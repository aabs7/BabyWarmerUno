
BabyWarmerUno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000014f6  0000158a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  0080010a  0080010a  00001594  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00001604  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003d27  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000db3  00000000  00000000  000055bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013c7  00000000  00000000  0000636e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000670  00000000  00000000  00007738  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000eeb  00000000  00000000  00007da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013d6  00000000  00000000  00008c93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  0000a069  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	34 c0       	rjmp	.+104    	; 0x6a <__ctors_end>
       2:	00 00       	nop
       4:	59 c0       	rjmp	.+178    	; 0xb8 <__bad_interrupt>
       6:	00 00       	nop
       8:	57 c0       	rjmp	.+174    	; 0xb8 <__bad_interrupt>
       a:	00 00       	nop
       c:	55 c0       	rjmp	.+170    	; 0xb8 <__bad_interrupt>
       e:	00 00       	nop
      10:	53 c0       	rjmp	.+166    	; 0xb8 <__bad_interrupt>
      12:	00 00       	nop
      14:	51 c0       	rjmp	.+162    	; 0xb8 <__bad_interrupt>
      16:	00 00       	nop
      18:	4f c0       	rjmp	.+158    	; 0xb8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	4d c0       	rjmp	.+154    	; 0xb8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	4b c0       	rjmp	.+150    	; 0xb8 <__bad_interrupt>
      22:	00 00       	nop
      24:	49 c0       	rjmp	.+146    	; 0xb8 <__bad_interrupt>
      26:	00 00       	nop
      28:	47 c0       	rjmp	.+142    	; 0xb8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a9 c0       	rjmp	.+338    	; 0x180 <__vector_11>
      2e:	00 00       	nop
      30:	43 c0       	rjmp	.+134    	; 0xb8 <__bad_interrupt>
      32:	00 00       	nop
      34:	41 c0       	rjmp	.+130    	; 0xb8 <__bad_interrupt>
      36:	00 00       	nop
      38:	3f c0       	rjmp	.+126    	; 0xb8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	3d c0       	rjmp	.+122    	; 0xb8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3b c0       	rjmp	.+118    	; 0xb8 <__bad_interrupt>
      42:	00 00       	nop
      44:	39 c0       	rjmp	.+114    	; 0xb8 <__bad_interrupt>
      46:	00 00       	nop
      48:	37 c0       	rjmp	.+110    	; 0xb8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	35 c0       	rjmp	.+106    	; 0xb8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	33 c0       	rjmp	.+102    	; 0xb8 <__bad_interrupt>
      52:	00 00       	nop
      54:	31 c0       	rjmp	.+98     	; 0xb8 <__bad_interrupt>
      56:	00 00       	nop
      58:	2f c0       	rjmp	.+94     	; 0xb8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	2d c0       	rjmp	.+90     	; 0xb8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2b c0       	rjmp	.+86     	; 0xb8 <__bad_interrupt>
      62:	00 00       	nop
      64:	29 c0       	rjmp	.+82     	; 0xb8 <__bad_interrupt>
	...

00000068 <__ctors_start>:
      68:	02 05       	cpc	r16, r2

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	e6 ef       	ldi	r30, 0xF6	; 246
      7e:	f4 e1       	ldi	r31, 0x14	; 20
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	aa 30       	cpi	r26, 0x0A	; 10
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	21 e0       	ldi	r18, 0x01	; 1
      8e:	aa e0       	ldi	r26, 0x0A	; 10
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	af 33       	cpi	r26, 0x3F	; 63
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	c5 e3       	ldi	r28, 0x35	; 53
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	21 97       	sbiw	r28, 0x01	; 1
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__tablejump2__>
      ac:	c4 33       	cpi	r28, 0x34	; 52
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	8f d3       	rcall	.+1822   	; 0x7d2 <main>
      b4:	0c 94 79 0a 	jmp	0x14f2	; 0x14f2 <_exit>

000000b8 <__bad_interrupt>:
      b8:	a3 cf       	rjmp	.-186    	; 0x0 <__vectors>

000000ba <_Z12init_devicesv>:
	
	//second 4-7 segment display from left to right
	max1.MAX7219_writeData(4,B);
	max1.MAX7219_writeData(8,A);
	max1.MAX7219_writeData(6,B);
	max1.MAX7219_writeData(2,Y);
      ba:	78 94       	sei
      bc:	81 e1       	ldi	r24, 0x11	; 17
      be:	91 e0       	ldi	r25, 0x01	; 1
      c0:	be d4       	rcall	.+2428   	; 0xa3e <_ZN3led8led_initEv>
      c2:	88 e3       	ldi	r24, 0x38	; 56
      c4:	91 e0       	ldi	r25, 0x01	; 1
      c6:	af d4       	rcall	.+2398   	; 0xa26 <_ZN8Controls12initControlsEv>
      c8:	81 e1       	ldi	r24, 0x11	; 17
      ca:	91 e0       	ldi	r25, 0x01	; 1
      cc:	b8 d4       	rcall	.+2416   	; 0xa3e <_ZN3led8led_initEv>
      ce:	61 e0       	ldi	r22, 0x01	; 1
      d0:	70 e0       	ldi	r23, 0x00	; 0
      d2:	8a e3       	ldi	r24, 0x3A	; 58
      d4:	91 e0       	ldi	r25, 0x01	; 1
      d6:	43 d7       	rcall	.+3718   	; 0xf5e <_ZN6Timerr11setTimerNumEi>
      d8:	8a e3       	ldi	r24, 0x3A	; 58
      da:	91 e0       	ldi	r25, 0x01	; 1
      dc:	44 d7       	rcall	.+3720   	; 0xf66 <_ZN6Timerr19setCompareInterruptEv>
      de:	68 ec       	ldi	r22, 0xC8	; 200
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	8a e3       	ldi	r24, 0x3A	; 58
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	45 d7       	rcall	.+3722   	; 0xf72 <_ZN6Timerr16startCustomTimerEi>
      e8:	88 e1       	ldi	r24, 0x18	; 24
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	fc d6       	rcall	.+3576   	; 0xee6 <_ZN7max721912MAX7219_initEv>
      ee:	24 e0       	ldi	r18, 0x04	; 4
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	44 e0       	ldi	r20, 0x04	; 4
      f4:	50 e0       	ldi	r21, 0x00	; 0
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	70 e0       	ldi	r23, 0x00	; 0
      fa:	88 e1       	ldi	r24, 0x18	; 24
      fc:	91 e0       	ldi	r25, 0x01	; 1
      fe:	c8 d6       	rcall	.+3472   	; 0xe90 <_ZN7max721911MAX7219_setEiii>
     100:	8f e3       	ldi	r24, 0x3F	; 63
     102:	9c e9       	ldi	r25, 0x9C	; 156
     104:	01 97       	sbiw	r24, 0x01	; 1
     106:	f1 f7       	brne	.-4      	; 0x104 <_Z12init_devicesv+0x4a>
     108:	00 c0       	rjmp	.+0      	; 0x10a <_Z12init_devicesv+0x50>
     10a:	00 00       	nop
     10c:	24 e0       	ldi	r18, 0x04	; 4
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	44 e0       	ldi	r20, 0x04	; 4
     112:	50 e0       	ldi	r21, 0x00	; 0
     114:	61 e0       	ldi	r22, 0x01	; 1
     116:	70 e0       	ldi	r23, 0x00	; 0
     118:	82 e1       	ldi	r24, 0x12	; 18
     11a:	91 e0       	ldi	r25, 0x01	; 1
     11c:	b9 d6       	rcall	.+3442   	; 0xe90 <_ZN7max721911MAX7219_setEiii>
     11e:	8f e3       	ldi	r24, 0x3F	; 63
     120:	9c e9       	ldi	r25, 0x9C	; 156
     122:	01 97       	sbiw	r24, 0x01	; 1
     124:	f1 f7       	brne	.-4      	; 0x122 <_Z12init_devicesv+0x68>
     126:	00 c0       	rjmp	.+0      	; 0x128 <_Z12init_devicesv+0x6e>
     128:	00 00       	nop
     12a:	88 e1       	ldi	r24, 0x18	; 24
     12c:	91 e0       	ldi	r25, 0x01	; 1
     12e:	db d6       	rcall	.+3510   	; 0xee6 <_ZN7max721912MAX7219_initEv>
     130:	8f e3       	ldi	r24, 0x3F	; 63
     132:	9c e9       	ldi	r25, 0x9C	; 156
     134:	01 97       	sbiw	r24, 0x01	; 1
     136:	f1 f7       	brne	.-4      	; 0x134 <_Z12init_devicesv+0x7a>
     138:	00 c0       	rjmp	.+0      	; 0x13a <_Z12init_devicesv+0x80>
     13a:	00 00       	nop
     13c:	82 e1       	ldi	r24, 0x12	; 18
     13e:	91 e0       	ldi	r25, 0x01	; 1
     140:	d2 d6       	rcall	.+3492   	; 0xee6 <_ZN7max721912MAX7219_initEv>
     142:	8f e3       	ldi	r24, 0x3F	; 63
     144:	9c e9       	ldi	r25, 0x9C	; 156
     146:	01 97       	sbiw	r24, 0x01	; 1
     148:	f1 f7       	brne	.-4      	; 0x146 <_Z12init_devicesv+0x8c>
     14a:	00 c0       	rjmp	.+0      	; 0x14c <_Z12init_devicesv+0x92>
     14c:	00 00       	nop
     14e:	88 e1       	ldi	r24, 0x18	; 24
     150:	91 e0       	ldi	r25, 0x01	; 1
     152:	e4 d6       	rcall	.+3528   	; 0xf1c <_ZN7max721920MAX7219_clearDisplayEv>
     154:	9f ef       	ldi	r25, 0xFF	; 255
     156:	26 e7       	ldi	r18, 0x76	; 118
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	91 50       	subi	r25, 0x01	; 1
     15c:	20 40       	sbci	r18, 0x00	; 0
     15e:	80 40       	sbci	r24, 0x00	; 0
     160:	e1 f7       	brne	.-8      	; 0x15a <_Z12init_devicesv+0xa0>
     162:	00 c0       	rjmp	.+0      	; 0x164 <_Z12init_devicesv+0xaa>
     164:	00 00       	nop
     166:	82 e1       	ldi	r24, 0x12	; 18
     168:	91 e0       	ldi	r25, 0x01	; 1
     16a:	d8 d6       	rcall	.+3504   	; 0xf1c <_ZN7max721920MAX7219_clearDisplayEv>
     16c:	9f ef       	ldi	r25, 0xFF	; 255
     16e:	26 e7       	ldi	r18, 0x76	; 118
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	91 50       	subi	r25, 0x01	; 1
     174:	20 40       	sbci	r18, 0x00	; 0
     176:	80 40       	sbci	r24, 0x00	; 0
     178:	e1 f7       	brne	.-8      	; 0x172 <_Z12init_devicesv+0xb8>
     17a:	00 c0       	rjmp	.+0      	; 0x17c <_Z12init_devicesv+0xc2>
     17c:	00 00       	nop
     17e:	08 95       	ret

00000180 <__vector_11>:
     180:	1f 92       	push	r1
     182:	0f 92       	push	r0
     184:	0f b6       	in	r0, 0x3f	; 63
     186:	0f 92       	push	r0
     188:	11 24       	eor	r1, r1
     18a:	2f 93       	push	r18
     18c:	3f 93       	push	r19
     18e:	8f 93       	push	r24
     190:	9f 93       	push	r25
     192:	10 92 85 00 	sts	0x0085, r1
     196:	10 92 84 00 	sts	0x0084, r1
     19a:	80 91 3e 01 	lds	r24, 0x013E
     19e:	88 23       	and	r24, r24
     1a0:	49 f0       	breq	.+18     	; 0x1b4 <__vector_11+0x34>
     1a2:	80 91 3c 01 	lds	r24, 0x013C
     1a6:	90 91 3d 01 	lds	r25, 0x013D
     1aa:	01 96       	adiw	r24, 0x01	; 1
     1ac:	90 93 3d 01 	sts	0x013D, r25
     1b0:	80 93 3c 01 	sts	0x013C, r24
     1b4:	80 91 1e 01 	lds	r24, 0x011E
     1b8:	90 91 1f 01 	lds	r25, 0x011F
     1bc:	01 96       	adiw	r24, 0x01	; 1
     1be:	90 93 1f 01 	sts	0x011F, r25
     1c2:	80 93 1e 01 	sts	0x011E, r24
     1c6:	20 91 1e 01 	lds	r18, 0x011E
     1ca:	30 91 1f 01 	lds	r19, 0x011F
     1ce:	80 91 00 01 	lds	r24, 0x0100
     1d2:	90 91 01 01 	lds	r25, 0x0101
     1d6:	28 17       	cp	r18, r24
     1d8:	39 07       	cpc	r19, r25
     1da:	3c f0       	brlt	.+14     	; 0x1ea <__vector_11+0x6a>
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	80 93 39 01 	sts	0x0139, r24
     1e2:	10 92 1f 01 	sts	0x011F, r1
     1e6:	10 92 1e 01 	sts	0x011E, r1
     1ea:	9f 91       	pop	r25
     1ec:	8f 91       	pop	r24
     1ee:	3f 91       	pop	r19
     1f0:	2f 91       	pop	r18
     1f2:	0f 90       	pop	r0
     1f4:	0f be       	out	0x3f, r0	; 63
     1f6:	0f 90       	pop	r0
     1f8:	1f 90       	pop	r1
     1fa:	18 95       	reti

000001fc <_Z13sendToDisplayfff>:
     1fc:	4f 92       	push	r4
     1fe:	5f 92       	push	r5
     200:	6f 92       	push	r6
     202:	7f 92       	push	r7
     204:	8f 92       	push	r8
     206:	9f 92       	push	r9
     208:	af 92       	push	r10
     20a:	bf 92       	push	r11
     20c:	cf 92       	push	r12
     20e:	df 92       	push	r13
     210:	ef 92       	push	r14
     212:	ff 92       	push	r15
     214:	0f 93       	push	r16
     216:	1f 93       	push	r17
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	2b 01       	movw	r4, r22
     21e:	3c 01       	movw	r6, r24
     220:	49 01       	movw	r8, r18
     222:	5a 01       	movw	r10, r20
     224:	67 01       	movw	r12, r14
     226:	78 01       	movw	r14, r16
     228:	4f ef       	ldi	r20, 0xFF	; 255
     22a:	69 e0       	ldi	r22, 0x09	; 9
     22c:	88 e1       	ldi	r24, 0x18	; 24
     22e:	91 e0       	ldi	r25, 0x01	; 1
     230:	37 d6       	rcall	.+3182   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     232:	4f ef       	ldi	r20, 0xFF	; 255
     234:	69 e0       	ldi	r22, 0x09	; 9
     236:	82 e1       	ldi	r24, 0x12	; 18
     238:	91 e0       	ldi	r25, 0x01	; 1
     23a:	32 d6       	rcall	.+3172   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     23c:	40 e0       	ldi	r20, 0x00	; 0
     23e:	64 e0       	ldi	r22, 0x04	; 4
     240:	88 e1       	ldi	r24, 0x18	; 24
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	2d d6       	rcall	.+3162   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	40 e2       	ldi	r20, 0x20	; 32
     24c:	51 e4       	ldi	r21, 0x41	; 65
     24e:	c3 01       	movw	r24, r6
     250:	b2 01       	movw	r22, r4
     252:	19 d7       	rcall	.+3634   	; 0x1086 <__divsf3>
     254:	85 d7       	rcall	.+3850   	; 0x1160 <__fixunssfsi>
     256:	46 2f       	mov	r20, r22
     258:	68 e0       	ldi	r22, 0x08	; 8
     25a:	88 e1       	ldi	r24, 0x18	; 24
     25c:	91 e0       	ldi	r25, 0x01	; 1
     25e:	20 d6       	rcall	.+3136   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     260:	c3 01       	movw	r24, r6
     262:	b2 01       	movw	r22, r4
     264:	78 d7       	rcall	.+3824   	; 0x1156 <__fixsfsi>
     266:	ca e0       	ldi	r28, 0x0A	; 10
     268:	d0 e0       	ldi	r29, 0x00	; 0
     26a:	cb 01       	movw	r24, r22
     26c:	be 01       	movw	r22, r28
     26e:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__divmodhi4>
     272:	48 2f       	mov	r20, r24
     274:	40 68       	ori	r20, 0x80	; 128
     276:	66 e0       	ldi	r22, 0x06	; 6
     278:	88 e1       	ldi	r24, 0x18	; 24
     27a:	91 e0       	ldi	r25, 0x01	; 1
     27c:	11 d6       	rcall	.+3106   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	40 e2       	ldi	r20, 0x20	; 32
     284:	51 e4       	ldi	r21, 0x41	; 65
     286:	c3 01       	movw	r24, r6
     288:	b2 01       	movw	r22, r4
     28a:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
     28e:	63 d7       	rcall	.+3782   	; 0x1156 <__fixsfsi>
     290:	cb 01       	movw	r24, r22
     292:	be 01       	movw	r22, r28
     294:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__divmodhi4>
     298:	48 2f       	mov	r20, r24
     29a:	62 e0       	ldi	r22, 0x02	; 2
     29c:	88 e1       	ldi	r24, 0x18	; 24
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	ff d5       	rcall	.+3070   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	63 e0       	ldi	r22, 0x03	; 3
     2a6:	88 e1       	ldi	r24, 0x18	; 24
     2a8:	91 e0       	ldi	r25, 0x01	; 1
     2aa:	fa d5       	rcall	.+3060   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	40 e2       	ldi	r20, 0x20	; 32
     2b2:	51 e4       	ldi	r21, 0x41	; 65
     2b4:	c5 01       	movw	r24, r10
     2b6:	b4 01       	movw	r22, r8
     2b8:	e6 d6       	rcall	.+3532   	; 0x1086 <__divsf3>
     2ba:	52 d7       	rcall	.+3748   	; 0x1160 <__fixunssfsi>
     2bc:	46 2f       	mov	r20, r22
     2be:	67 e0       	ldi	r22, 0x07	; 7
     2c0:	88 e1       	ldi	r24, 0x18	; 24
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	ed d5       	rcall	.+3034   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     2c6:	c5 01       	movw	r24, r10
     2c8:	b4 01       	movw	r22, r8
     2ca:	45 d7       	rcall	.+3722   	; 0x1156 <__fixsfsi>
     2cc:	cb 01       	movw	r24, r22
     2ce:	be 01       	movw	r22, r28
     2d0:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__divmodhi4>
     2d4:	48 2f       	mov	r20, r24
     2d6:	40 68       	ori	r20, 0x80	; 128
     2d8:	65 e0       	ldi	r22, 0x05	; 5
     2da:	88 e1       	ldi	r24, 0x18	; 24
     2dc:	91 e0       	ldi	r25, 0x01	; 1
     2de:	e0 d5       	rcall	.+3008   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	40 e2       	ldi	r20, 0x20	; 32
     2e6:	51 e4       	ldi	r21, 0x41	; 65
     2e8:	c5 01       	movw	r24, r10
     2ea:	b4 01       	movw	r22, r8
     2ec:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
     2f0:	32 d7       	rcall	.+3684   	; 0x1156 <__fixsfsi>
     2f2:	cb 01       	movw	r24, r22
     2f4:	be 01       	movw	r22, r28
     2f6:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__divmodhi4>
     2fa:	48 2f       	mov	r20, r24
     2fc:	61 e0       	ldi	r22, 0x01	; 1
     2fe:	88 e1       	ldi	r24, 0x18	; 24
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	ce d5       	rcall	.+2972   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	40 e2       	ldi	r20, 0x20	; 32
     30a:	51 e4       	ldi	r21, 0x41	; 65
     30c:	c7 01       	movw	r24, r14
     30e:	b6 01       	movw	r22, r12
     310:	ba d6       	rcall	.+3444   	; 0x1086 <__divsf3>
     312:	26 d7       	rcall	.+3660   	; 0x1160 <__fixunssfsi>
     314:	46 2f       	mov	r20, r22
     316:	66 e0       	ldi	r22, 0x06	; 6
     318:	82 e1       	ldi	r24, 0x12	; 18
     31a:	91 e0       	ldi	r25, 0x01	; 1
     31c:	c1 d5       	rcall	.+2946   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     31e:	c7 01       	movw	r24, r14
     320:	b6 01       	movw	r22, r12
     322:	19 d7       	rcall	.+3634   	; 0x1156 <__fixsfsi>
     324:	cb 01       	movw	r24, r22
     326:	be 01       	movw	r22, r28
     328:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__divmodhi4>
     32c:	48 2f       	mov	r20, r24
     32e:	40 68       	ori	r20, 0x80	; 128
     330:	68 e0       	ldi	r22, 0x08	; 8
     332:	82 e1       	ldi	r24, 0x12	; 18
     334:	91 e0       	ldi	r25, 0x01	; 1
     336:	b4 d5       	rcall	.+2920   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	40 e2       	ldi	r20, 0x20	; 32
     33e:	51 e4       	ldi	r21, 0x41	; 65
     340:	c7 01       	movw	r24, r14
     342:	b6 01       	movw	r22, r12
     344:	ef d7       	rcall	.+4062   	; 0x1324 <__mulsf3>
     346:	07 d7       	rcall	.+3598   	; 0x1156 <__fixsfsi>
     348:	cb 01       	movw	r24, r22
     34a:	be 01       	movw	r22, r28
     34c:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__divmodhi4>
     350:	48 2f       	mov	r20, r24
     352:	62 e0       	ldi	r22, 0x02	; 2
     354:	82 e1       	ldi	r24, 0x12	; 18
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	a3 d5       	rcall	.+2886   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	1f 91       	pop	r17
     360:	0f 91       	pop	r16
     362:	ff 90       	pop	r15
     364:	ef 90       	pop	r14
     366:	df 90       	pop	r13
     368:	cf 90       	pop	r12
     36a:	bf 90       	pop	r11
     36c:	af 90       	pop	r10
     36e:	9f 90       	pop	r9
     370:	8f 90       	pop	r8
     372:	7f 90       	pop	r7
     374:	6f 90       	pop	r6
     376:	5f 90       	pop	r5
     378:	4f 90       	pop	r4
     37a:	08 95       	ret

0000037c <_Z18sendToDisplayBelowf>:
     37c:	cf 92       	push	r12
     37e:	df 92       	push	r13
     380:	ef 92       	push	r14
     382:	ff 92       	push	r15
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	6b 01       	movw	r12, r22
     38a:	7c 01       	movw	r14, r24
     38c:	4f ef       	ldi	r20, 0xFF	; 255
     38e:	69 e0       	ldi	r22, 0x09	; 9
     390:	82 e1       	ldi	r24, 0x12	; 18
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	85 d5       	rcall	.+2826   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	40 e2       	ldi	r20, 0x20	; 32
     39c:	51 e4       	ldi	r21, 0x41	; 65
     39e:	c7 01       	movw	r24, r14
     3a0:	b6 01       	movw	r22, r12
     3a2:	71 d6       	rcall	.+3298   	; 0x1086 <__divsf3>
     3a4:	dd d6       	rcall	.+3514   	; 0x1160 <__fixunssfsi>
     3a6:	46 2f       	mov	r20, r22
     3a8:	66 e0       	ldi	r22, 0x06	; 6
     3aa:	82 e1       	ldi	r24, 0x12	; 18
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	78 d5       	rcall	.+2800   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     3b0:	c7 01       	movw	r24, r14
     3b2:	b6 01       	movw	r22, r12
     3b4:	d0 d6       	rcall	.+3488   	; 0x1156 <__fixsfsi>
     3b6:	ca e0       	ldi	r28, 0x0A	; 10
     3b8:	d0 e0       	ldi	r29, 0x00	; 0
     3ba:	cb 01       	movw	r24, r22
     3bc:	be 01       	movw	r22, r28
     3be:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__divmodhi4>
     3c2:	48 2f       	mov	r20, r24
     3c4:	40 68       	ori	r20, 0x80	; 128
     3c6:	68 e0       	ldi	r22, 0x08	; 8
     3c8:	82 e1       	ldi	r24, 0x12	; 18
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	69 d5       	rcall	.+2770   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     3ce:	20 e0       	ldi	r18, 0x00	; 0
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	40 e2       	ldi	r20, 0x20	; 32
     3d4:	51 e4       	ldi	r21, 0x41	; 65
     3d6:	c7 01       	movw	r24, r14
     3d8:	b6 01       	movw	r22, r12
     3da:	a4 d7       	rcall	.+3912   	; 0x1324 <__mulsf3>
     3dc:	bc d6       	rcall	.+3448   	; 0x1156 <__fixsfsi>
     3de:	cb 01       	movw	r24, r22
     3e0:	be 01       	movw	r22, r28
     3e2:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__divmodhi4>
     3e6:	48 2f       	mov	r20, r24
     3e8:	62 e0       	ldi	r22, 0x02	; 2
     3ea:	82 e1       	ldi	r24, 0x12	; 18
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	58 d5       	rcall	.+2736   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	ff 90       	pop	r15
     3f6:	ef 90       	pop	r14
     3f8:	df 90       	pop	r13
     3fa:	cf 90       	pop	r12
     3fc:	08 95       	ret

000003fe <_Z21displaySetTemperaturev>:
     3fe:	40 e0       	ldi	r20, 0x00	; 0
     400:	69 e0       	ldi	r22, 0x09	; 9
     402:	88 e1       	ldi	r24, 0x18	; 24
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	4c d5       	rcall	.+2712   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     408:	40 e0       	ldi	r20, 0x00	; 0
     40a:	63 e0       	ldi	r22, 0x03	; 3
     40c:	88 e1       	ldi	r24, 0x18	; 24
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	47 d5       	rcall	.+2702   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     412:	4b e5       	ldi	r20, 0x5B	; 91
     414:	67 e0       	ldi	r22, 0x07	; 7
     416:	88 e1       	ldi	r24, 0x18	; 24
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	42 d5       	rcall	.+2692   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     41c:	4f e4       	ldi	r20, 0x4F	; 79
     41e:	65 e0       	ldi	r22, 0x05	; 5
     420:	88 e1       	ldi	r24, 0x18	; 24
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	3d d5       	rcall	.+2682   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     426:	4f e0       	ldi	r20, 0x0F	; 15
     428:	61 e0       	ldi	r22, 0x01	; 1
     42a:	88 e1       	ldi	r24, 0x18	; 24
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	38 d5       	rcall	.+2672   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     430:	4f e0       	ldi	r20, 0x0F	; 15
     432:	64 e0       	ldi	r22, 0x04	; 4
     434:	88 e1       	ldi	r24, 0x18	; 24
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	33 d5       	rcall	.+2662   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     43a:	47 e6       	ldi	r20, 0x67	; 103
     43c:	68 e0       	ldi	r22, 0x08	; 8
     43e:	88 e1       	ldi	r24, 0x18	; 24
     440:	91 e0       	ldi	r25, 0x01	; 1
     442:	2e d5       	rcall	.+2652   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     444:	40 e0       	ldi	r20, 0x00	; 0
     446:	66 e0       	ldi	r22, 0x06	; 6
     448:	88 e1       	ldi	r24, 0x18	; 24
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	29 d5       	rcall	.+2642   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     44e:	40 e0       	ldi	r20, 0x00	; 0
     450:	62 e0       	ldi	r22, 0x02	; 2
     452:	88 e1       	ldi	r24, 0x18	; 24
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	24 c5       	rjmp	.+2632   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     458:	08 95       	ret

0000045a <_Z14displayPreHeatv>:
     45a:	40 e0       	ldi	r20, 0x00	; 0
     45c:	69 e0       	ldi	r22, 0x09	; 9
     45e:	88 e1       	ldi	r24, 0x18	; 24
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	1e d5       	rcall	.+2620   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     464:	40 e0       	ldi	r20, 0x00	; 0
     466:	63 e0       	ldi	r22, 0x03	; 3
     468:	88 e1       	ldi	r24, 0x18	; 24
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	19 d5       	rcall	.+2610   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     46e:	47 e6       	ldi	r20, 0x67	; 103
     470:	67 e0       	ldi	r22, 0x07	; 7
     472:	88 e1       	ldi	r24, 0x18	; 24
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	14 d5       	rcall	.+2600   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     478:	45 e0       	ldi	r20, 0x05	; 5
     47a:	65 e0       	ldi	r22, 0x05	; 5
     47c:	88 e1       	ldi	r24, 0x18	; 24
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	0f d5       	rcall	.+2590   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     482:	4f e4       	ldi	r20, 0x4F	; 79
     484:	61 e0       	ldi	r22, 0x01	; 1
     486:	88 e1       	ldi	r24, 0x18	; 24
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	0a d5       	rcall	.+2580   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     48c:	47 e3       	ldi	r20, 0x37	; 55
     48e:	64 e0       	ldi	r22, 0x04	; 4
     490:	88 e1       	ldi	r24, 0x18	; 24
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	05 d5       	rcall	.+2570   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     496:	4f e4       	ldi	r20, 0x4F	; 79
     498:	68 e0       	ldi	r22, 0x08	; 8
     49a:	88 e1       	ldi	r24, 0x18	; 24
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	00 d5       	rcall	.+2560   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     4a0:	47 e7       	ldi	r20, 0x77	; 119
     4a2:	66 e0       	ldi	r22, 0x06	; 6
     4a4:	88 e1       	ldi	r24, 0x18	; 24
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	fb d4       	rcall	.+2550   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     4aa:	4f e0       	ldi	r20, 0x0F	; 15
     4ac:	62 e0       	ldi	r22, 0x02	; 2
     4ae:	88 e1       	ldi	r24, 0x18	; 24
     4b0:	91 e0       	ldi	r25, 0x01	; 1
     4b2:	f6 c4       	rjmp	.+2540   	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
     4b4:	08 95       	ret

000004b6 <_Z8titititiv>:
// Order of right and left 4-7 segment matrix registers.
// 3 7 5 1      4 8 6 2


void titititi(){
	controls.startBuzzer();
     4b6:	88 e3       	ldi	r24, 0x38	; 56
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	bd d2       	rcall	.+1402   	; 0xa36 <_ZN8Controls11startBuzzerEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4bc:	2f ef       	ldi	r18, 0xFF	; 255
     4be:	81 ee       	ldi	r24, 0xE1	; 225
     4c0:	94 e0       	ldi	r25, 0x04	; 4
     4c2:	21 50       	subi	r18, 0x01	; 1
     4c4:	80 40       	sbci	r24, 0x00	; 0
     4c6:	90 40       	sbci	r25, 0x00	; 0
     4c8:	e1 f7       	brne	.-8      	; 0x4c2 <_Z8titititiv+0xc>
     4ca:	00 c0       	rjmp	.+0      	; 0x4cc <_Z8titititiv+0x16>
     4cc:	00 00       	nop
	_delay_ms(100);
	controls.stopBuzzer();
     4ce:	88 e3       	ldi	r24, 0x38	; 56
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	b3 d2       	rcall	.+1382   	; 0xa3a <_ZN8Controls10stopBuzzerEv>
     4d4:	2f ef       	ldi	r18, 0xFF	; 255
     4d6:	81 ee       	ldi	r24, 0xE1	; 225
     4d8:	94 e0       	ldi	r25, 0x04	; 4
     4da:	21 50       	subi	r18, 0x01	; 1
     4dc:	80 40       	sbci	r24, 0x00	; 0
     4de:	90 40       	sbci	r25, 0x00	; 0
     4e0:	e1 f7       	brne	.-8      	; 0x4da <_Z8titititiv+0x24>
     4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <_Z8titititiv+0x2e>
     4e4:	00 00       	nop
	_delay_ms(100);
	controls.startBuzzer();
     4e6:	88 e3       	ldi	r24, 0x38	; 56
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	a5 d2       	rcall	.+1354   	; 0xa36 <_ZN8Controls11startBuzzerEv>
     4ec:	2f ef       	ldi	r18, 0xFF	; 255
     4ee:	81 ee       	ldi	r24, 0xE1	; 225
     4f0:	94 e0       	ldi	r25, 0x04	; 4
     4f2:	21 50       	subi	r18, 0x01	; 1
     4f4:	80 40       	sbci	r24, 0x00	; 0
     4f6:	90 40       	sbci	r25, 0x00	; 0
     4f8:	e1 f7       	brne	.-8      	; 0x4f2 <_Z8titititiv+0x3c>
     4fa:	00 c0       	rjmp	.+0      	; 0x4fc <_Z8titititiv+0x46>
     4fc:	00 00       	nop
	_delay_ms(100);
	controls.stopBuzzer();
     4fe:	88 e3       	ldi	r24, 0x38	; 56
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	9b d2       	rcall	.+1334   	; 0xa3a <_ZN8Controls10stopBuzzerEv>
     504:	2f ef       	ldi	r18, 0xFF	; 255
     506:	85 ea       	ldi	r24, 0xA5	; 165
     508:	9e e0       	ldi	r25, 0x0E	; 14
     50a:	21 50       	subi	r18, 0x01	; 1
     50c:	80 40       	sbci	r24, 0x00	; 0
     50e:	90 40       	sbci	r25, 0x00	; 0
     510:	e1 f7       	brne	.-8      	; 0x50a <_Z8titititiv+0x54>
     512:	00 c0       	rjmp	.+0      	; 0x514 <_Z8titititiv+0x5e>
     514:	00 00       	nop
	_delay_ms(300);
	controls.startBuzzer();
     516:	88 e3       	ldi	r24, 0x38	; 56
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	8d d2       	rcall	.+1306   	; 0xa36 <_ZN8Controls11startBuzzerEv>
     51c:	2f ef       	ldi	r18, 0xFF	; 255
     51e:	81 ee       	ldi	r24, 0xE1	; 225
     520:	94 e0       	ldi	r25, 0x04	; 4
     522:	21 50       	subi	r18, 0x01	; 1
     524:	80 40       	sbci	r24, 0x00	; 0
     526:	90 40       	sbci	r25, 0x00	; 0
     528:	e1 f7       	brne	.-8      	; 0x522 <_Z8titititiv+0x6c>
     52a:	00 c0       	rjmp	.+0      	; 0x52c <_Z8titititiv+0x76>
     52c:	00 00       	nop
	_delay_ms(100);
	controls.stopBuzzer();
     52e:	88 e3       	ldi	r24, 0x38	; 56
     530:	91 e0       	ldi	r25, 0x01	; 1
     532:	83 d2       	rcall	.+1286   	; 0xa3a <_ZN8Controls10stopBuzzerEv>
     534:	2f ef       	ldi	r18, 0xFF	; 255
     536:	81 ee       	ldi	r24, 0xE1	; 225
     538:	94 e0       	ldi	r25, 0x04	; 4
     53a:	21 50       	subi	r18, 0x01	; 1
     53c:	80 40       	sbci	r24, 0x00	; 0
     53e:	90 40       	sbci	r25, 0x00	; 0
     540:	e1 f7       	brne	.-8      	; 0x53a <_Z8titititiv+0x84>
     542:	00 c0       	rjmp	.+0      	; 0x544 <_Z8titititiv+0x8e>
     544:	00 00       	nop
	_delay_ms(100);
	controls.startBuzzer();
     546:	88 e3       	ldi	r24, 0x38	; 56
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	75 d2       	rcall	.+1258   	; 0xa36 <_ZN8Controls11startBuzzerEv>
     54c:	2f ef       	ldi	r18, 0xFF	; 255
     54e:	81 ee       	ldi	r24, 0xE1	; 225
     550:	94 e0       	ldi	r25, 0x04	; 4
     552:	21 50       	subi	r18, 0x01	; 1
     554:	80 40       	sbci	r24, 0x00	; 0
     556:	90 40       	sbci	r25, 0x00	; 0
     558:	e1 f7       	brne	.-8      	; 0x552 <_Z8titititiv+0x9c>
     55a:	00 c0       	rjmp	.+0      	; 0x55c <_Z8titititiv+0xa6>
     55c:	00 00       	nop
     55e:	08 95       	ret

00000560 <_Z4titiv>:
	_delay_ms(100);
}

void titi(){
	controls.startBuzzer();
     560:	88 e3       	ldi	r24, 0x38	; 56
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	68 d2       	rcall	.+1232   	; 0xa36 <_ZN8Controls11startBuzzerEv>
     566:	2f ef       	ldi	r18, 0xFF	; 255
     568:	81 ee       	ldi	r24, 0xE1	; 225
     56a:	94 e0       	ldi	r25, 0x04	; 4
     56c:	21 50       	subi	r18, 0x01	; 1
     56e:	80 40       	sbci	r24, 0x00	; 0
     570:	90 40       	sbci	r25, 0x00	; 0
     572:	e1 f7       	brne	.-8      	; 0x56c <_Z4titiv+0xc>
     574:	00 c0       	rjmp	.+0      	; 0x576 <_Z4titiv+0x16>
     576:	00 00       	nop
	_delay_ms(100);
	controls.stopBuzzer();
     578:	88 e3       	ldi	r24, 0x38	; 56
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	5e d2       	rcall	.+1212   	; 0xa3a <_ZN8Controls10stopBuzzerEv>
     57e:	2f ef       	ldi	r18, 0xFF	; 255
     580:	81 ee       	ldi	r24, 0xE1	; 225
     582:	94 e0       	ldi	r25, 0x04	; 4
     584:	21 50       	subi	r18, 0x01	; 1
     586:	80 40       	sbci	r24, 0x00	; 0
     588:	90 40       	sbci	r25, 0x00	; 0
     58a:	e1 f7       	brne	.-8      	; 0x584 <_Z4titiv+0x24>
     58c:	00 c0       	rjmp	.+0      	; 0x58e <_Z4titiv+0x2e>
     58e:	00 00       	nop
	_delay_ms(100);
	controls.startBuzzer();
     590:	88 e3       	ldi	r24, 0x38	; 56
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	50 d2       	rcall	.+1184   	; 0xa36 <_ZN8Controls11startBuzzerEv>
     596:	2f ef       	ldi	r18, 0xFF	; 255
     598:	81 ee       	ldi	r24, 0xE1	; 225
     59a:	94 e0       	ldi	r25, 0x04	; 4
     59c:	21 50       	subi	r18, 0x01	; 1
     59e:	80 40       	sbci	r24, 0x00	; 0
     5a0:	90 40       	sbci	r25, 0x00	; 0
     5a2:	e1 f7       	brne	.-8      	; 0x59c <_Z4titiv+0x3c>
     5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <_Z4titiv+0x46>
     5a6:	00 00       	nop
	_delay_ms(100);
	controls.stopBuzzer();
     5a8:	88 e3       	ldi	r24, 0x38	; 56
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	46 d2       	rcall	.+1164   	; 0xa3a <_ZN8Controls10stopBuzzerEv>
     5ae:	2f ef       	ldi	r18, 0xFF	; 255
     5b0:	81 ee       	ldi	r24, 0xE1	; 225
     5b2:	94 e0       	ldi	r25, 0x04	; 4
     5b4:	21 50       	subi	r18, 0x01	; 1
     5b6:	80 40       	sbci	r24, 0x00	; 0
     5b8:	90 40       	sbci	r25, 0x00	; 0
     5ba:	e1 f7       	brne	.-8      	; 0x5b4 <_Z4titiv+0x54>
     5bc:	00 c0       	rjmp	.+0      	; 0x5be <_Z4titiv+0x5e>
     5be:	00 00       	nop
     5c0:	08 95       	ret

000005c2 <_Z5checkv>:
}


void check() {
	
	if(skin_temperature >= (set_temperature+0.2)) {
     5c2:	2d ec       	ldi	r18, 0xCD	; 205
     5c4:	3c ec       	ldi	r19, 0xCC	; 204
     5c6:	4c e4       	ldi	r20, 0x4C	; 76
     5c8:	5e e3       	ldi	r21, 0x3E	; 62
     5ca:	60 91 06 01 	lds	r22, 0x0106
     5ce:	70 91 07 01 	lds	r23, 0x0107
     5d2:	80 91 08 01 	lds	r24, 0x0108
     5d6:	90 91 09 01 	lds	r25, 0x0109
     5da:	ed d4       	rcall	.+2522   	; 0xfb6 <__addsf3>
     5dc:	20 91 28 01 	lds	r18, 0x0128
     5e0:	30 91 29 01 	lds	r19, 0x0129
     5e4:	40 91 2a 01 	lds	r20, 0x012A
     5e8:	50 91 2b 01 	lds	r21, 0x012B
     5ec:	48 d5       	rcall	.+2704   	; 0x107e <__cmpsf2>
     5ee:	18 16       	cp	r1, r24
     5f0:	2c f1       	brlt	.+74     	; 0x63c <_Z5checkv+0x7a>
		if(!startMonitor) {
     5f2:	80 91 3e 01 	lds	r24, 0x013E
     5f6:	81 11       	cpse	r24, r1
     5f8:	12 c0       	rjmp	.+36     	; 0x61e <_Z5checkv+0x5c>
			//controls.startBuzzer();
			start_buzzer = true;	
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	80 93 37 01 	sts	0x0137, r24
		}	
		
		if(stop_buzzer && !startMonitor) {
     600:	80 91 0c 01 	lds	r24, 0x010C
     604:	88 23       	and	r24, r24
     606:	59 f0       	breq	.+22     	; 0x61e <_Z5checkv+0x5c>
			startMonitor = true;
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	80 93 3e 01 	sts	0x013E, r24
			second = 0;
     60e:	10 92 3d 01 	sts	0x013D, r1
     612:	10 92 3c 01 	sts	0x013C, r1
			stop_buzzer = false;
     616:	10 92 0c 01 	sts	0x010C, r1
			start_buzzer = false;
     61a:	10 92 37 01 	sts	0x0137, r1
			//controls.stopBuzzer();
		}
		
		Led.led_do(TS_HIGH_LED, 1);
     61e:	41 e0       	ldi	r20, 0x01	; 1
     620:	50 e0       	ldi	r21, 0x00	; 0
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	81 e1       	ldi	r24, 0x11	; 17
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	10 d2       	rcall	.+1056   	; 0xa4c <_ZN3led6led_doEii>
		Led.led_do(TS_HIGH_LED, 0);
		startMonitor = false;
		second = 0;
	}
	
	if(second >= 600) {
     62c:	80 91 3c 01 	lds	r24, 0x013C
     630:	90 91 3d 01 	lds	r25, 0x013D
     634:	88 35       	cpi	r24, 0x58	; 88
     636:	92 40       	sbci	r25, 0x02	; 2
     638:	a4 f4       	brge	.+40     	; 0x662 <_Z5checkv+0xa0>
     63a:	19 c0       	rjmp	.+50     	; 0x66e <_Z5checkv+0xac>
		}
		
		Led.led_do(TS_HIGH_LED, 1);
		//Led.led_do(TA_HIGH_LED, 1);
	} else {
		controls.stopBuzzer();
     63c:	88 e3       	ldi	r24, 0x38	; 56
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	fc d1       	rcall	.+1016   	; 0xa3a <_ZN8Controls10stopBuzzerEv>
		start_buzzer = false;
     642:	10 92 37 01 	sts	0x0137, r1
		Led.led_do(TS_HIGH_LED, 0);
     646:	40 e0       	ldi	r20, 0x00	; 0
     648:	50 e0       	ldi	r21, 0x00	; 0
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	81 e1       	ldi	r24, 0x11	; 17
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	fc d1       	rcall	.+1016   	; 0xa4c <_ZN3led6led_doEii>
		startMonitor = false;
     654:	10 92 3e 01 	sts	0x013E, r1
		second = 0;
     658:	10 92 3d 01 	sts	0x013D, r1
     65c:	10 92 3c 01 	sts	0x013C, r1
     660:	06 c0       	rjmp	.+12     	; 0x66e <_Z5checkv+0xac>
	}
	
	if(second >= 600) {
		//why this below line needed when if startMonitor = false, and skin temperature still set_temperature + 0.2 
		//controls.startBuzzer();
		startMonitor = false;
     662:	10 92 3e 01 	sts	0x013E, r1
		second = 0;
     666:	10 92 3d 01 	sts	0x013D, r1
     66a:	10 92 3c 01 	sts	0x013C, r1
	}
		
	if(air_temperature > 37) {
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	44 e1       	ldi	r20, 0x14	; 20
     674:	52 e4       	ldi	r21, 0x42	; 66
     676:	60 91 24 01 	lds	r22, 0x0124
     67a:	70 91 25 01 	lds	r23, 0x0125
     67e:	80 91 26 01 	lds	r24, 0x0126
     682:	90 91 27 01 	lds	r25, 0x0127
     686:	4a d6       	rcall	.+3220   	; 0x131c <__gesf2>
     688:	18 16       	cp	r1, r24
     68a:	44 f4       	brge	.+16     	; 0x69c <_Z5checkv+0xda>
		//controls.startBuzzer();
		//Led.led_do(TS_HIGH_LED, 1);
		Led.led_do(TA_HIGH_LED, 1);
     68c:	41 e0       	ldi	r20, 0x01	; 1
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	61 e0       	ldi	r22, 0x01	; 1
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	81 e1       	ldi	r24, 0x11	; 17
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	d9 d1       	rcall	.+946    	; 0xa4c <_ZN3led6led_doEii>
     69a:	07 c0       	rjmp	.+14     	; 0x6aa <_Z5checkv+0xe8>
	} else{
		//controls.stopBuzzer();
		Led.led_do(TS_HIGH_LED, 0);
     69c:	40 e0       	ldi	r20, 0x00	; 0
     69e:	50 e0       	ldi	r21, 0x00	; 0
     6a0:	60 e0       	ldi	r22, 0x00	; 0
     6a2:	70 e0       	ldi	r23, 0x00	; 0
     6a4:	81 e1       	ldi	r24, 0x11	; 17
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	d1 d1       	rcall	.+930    	; 0xa4c <_ZN3led6led_doEii>
	} 
	
	//buzzer stop button
	if(bit_is_clear(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN) && !buzzer_stop_pressed ) {
     6aa:	34 99       	sbic	0x06, 4	; 6
     6ac:	73 c0       	rjmp	.+230    	; 0x794 <_Z5checkv+0x1d2>
     6ae:	80 91 0d 01 	lds	r24, 0x010D
     6b2:	81 11       	cpse	r24, r1
     6b4:	6f c0       	rjmp	.+222    	; 0x794 <_Z5checkv+0x1d2>
     6b6:	65 c0       	rjmp	.+202    	; 0x782 <_Z5checkv+0x1c0>
		stop_buzzer = true;
		buzzer_stop_pressed = true;
	}
	
	else if(bit_is_set(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN)) {
		buzzer_stop_pressed = false;
     6b8:	10 92 0d 01 	sts	0x010D, r1
	}
	
	//set up button
	
	if(bit_is_clear(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN) && !set_up_pressed) {
     6bc:	33 99       	sbic	0x06, 3	; 6
     6be:	6d c0       	rjmp	.+218    	; 0x79a <_Z5checkv+0x1d8>
     6c0:	80 91 10 01 	lds	r24, 0x0110
     6c4:	81 11       	cpse	r24, r1
     6c6:	69 c0       	rjmp	.+210    	; 0x79a <_Z5checkv+0x1d8>
     6c8:	6b c0       	rjmp	.+214    	; 0x7a0 <_Z5checkv+0x1de>
		
		if(button_change) {
			set_temperature_copy += 0.1; 
     6ca:	2d ec       	ldi	r18, 0xCD	; 205
     6cc:	3c ec       	ldi	r19, 0xCC	; 204
     6ce:	4c ec       	ldi	r20, 0xCC	; 204
     6d0:	5d e3       	ldi	r21, 0x3D	; 61
     6d2:	60 91 20 01 	lds	r22, 0x0120
     6d6:	70 91 21 01 	lds	r23, 0x0121
     6da:	80 91 22 01 	lds	r24, 0x0122
     6de:	90 91 23 01 	lds	r25, 0x0123
     6e2:	69 d4       	rcall	.+2258   	; 0xfb6 <__addsf3>
     6e4:	60 93 20 01 	sts	0x0120, r22
     6e8:	70 93 21 01 	sts	0x0121, r23
     6ec:	80 93 22 01 	sts	0x0122, r24
     6f0:	90 93 23 01 	sts	0x0123, r25
		}
		set_up_pressed = true;
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	80 93 10 01 	sts	0x0110, r24
     6fa:	02 c0       	rjmp	.+4      	; 0x700 <_Z5checkv+0x13e>
	}
	
	else if(bit_is_set(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN)) {
		set_up_pressed = false;
     6fc:	10 92 10 01 	sts	0x0110, r1
	}
	
	
	//set down button
	if(bit_is_clear(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN) && !set_down_pressed) {
     700:	4a 99       	sbic	0x09, 2	; 9
     702:	58 c0       	rjmp	.+176    	; 0x7b4 <_Z5checkv+0x1f2>
     704:	80 91 0e 01 	lds	r24, 0x010E
     708:	81 11       	cpse	r24, r1
     70a:	54 c0       	rjmp	.+168    	; 0x7b4 <_Z5checkv+0x1f2>
     70c:	4e c0       	rjmp	.+156    	; 0x7aa <_Z5checkv+0x1e8>
		
		if(button_change) {
			set_temperature_copy -= 0.1;
     70e:	2d ec       	ldi	r18, 0xCD	; 205
     710:	3c ec       	ldi	r19, 0xCC	; 204
     712:	4c ec       	ldi	r20, 0xCC	; 204
     714:	5d e3       	ldi	r21, 0x3D	; 61
     716:	60 91 20 01 	lds	r22, 0x0120
     71a:	70 91 21 01 	lds	r23, 0x0121
     71e:	80 91 22 01 	lds	r24, 0x0122
     722:	90 91 23 01 	lds	r25, 0x0123
     726:	46 d4       	rcall	.+2188   	; 0xfb4 <__subsf3>
     728:	60 93 20 01 	sts	0x0120, r22
     72c:	70 93 21 01 	sts	0x0121, r23
     730:	80 93 22 01 	sts	0x0122, r24
     734:	90 93 23 01 	sts	0x0123, r25
		}
		
		set_down_pressed= true;
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	80 93 0e 01 	sts	0x010E, r24
     73e:	02 c0       	rjmp	.+4      	; 0x744 <_Z5checkv+0x182>
	}
	
	else if(bit_is_set(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN)) {
		set_down_pressed = false;
     740:	10 92 0e 01 	sts	0x010E, r1
	}
	
	//set button
	if(bit_is_clear(SET_BUTTON_PORT, SET_BUTTON_PIN) && !set_pressed) {
     744:	18 99       	sbic	0x03, 0	; 3
     746:	42 c0       	rjmp	.+132    	; 0x7cc <_Z5checkv+0x20a>
     748:	80 91 0f 01 	lds	r24, 0x010F
     74c:	81 11       	cpse	r24, r1
     74e:	3e c0       	rjmp	.+124    	; 0x7cc <_Z5checkv+0x20a>
     750:	34 c0       	rjmp	.+104    	; 0x7ba <_Z5checkv+0x1f8>
			button_change = !button_change;
			if(!button_change) {
				set_temperature = set_temperature_copy;
     752:	80 91 20 01 	lds	r24, 0x0120
     756:	90 91 21 01 	lds	r25, 0x0121
     75a:	a0 91 22 01 	lds	r26, 0x0122
     75e:	b0 91 23 01 	lds	r27, 0x0123
     762:	80 93 06 01 	sts	0x0106, r24
     766:	90 93 07 01 	sts	0x0107, r25
     76a:	a0 93 08 01 	sts	0x0108, r26
     76e:	b0 93 09 01 	sts	0x0109, r27
				titi();
     772:	f6 de       	rcall	.-532    	; 0x560 <_Z4titiv>
			}
			
			set_pressed = true;
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	80 93 0f 01 	sts	0x010F, r24
     77a:	08 95       	ret
		}
	
	else if(bit_is_set(SET_BUTTON_PORT, SET_BUTTON_PIN)) {
		set_pressed = false;
     77c:	10 92 0f 01 	sts	0x010F, r1
     780:	08 95       	ret
	} 
	
	//buzzer stop button
	if(bit_is_clear(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN) && !buzzer_stop_pressed ) {
		
		controls.stopBuzzer();
     782:	88 e3       	ldi	r24, 0x38	; 56
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	59 d1       	rcall	.+690    	; 0xa3a <_ZN8Controls10stopBuzzerEv>
		stop_buzzer = true;
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	80 93 0c 01 	sts	0x010C, r24
		buzzer_stop_pressed = true;
     78e:	80 93 0d 01 	sts	0x010D, r24
     792:	94 cf       	rjmp	.-216    	; 0x6bc <_Z5checkv+0xfa>
	}
	
	else if(bit_is_set(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN)) {
     794:	34 99       	sbic	0x06, 4	; 6
     796:	90 cf       	rjmp	.-224    	; 0x6b8 <_Z5checkv+0xf6>
     798:	91 cf       	rjmp	.-222    	; 0x6bc <_Z5checkv+0xfa>
			set_temperature_copy += 0.1; 
		}
		set_up_pressed = true;
	}
	
	else if(bit_is_set(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN)) {
     79a:	33 99       	sbic	0x06, 3	; 6
     79c:	af cf       	rjmp	.-162    	; 0x6fc <_Z5checkv+0x13a>
     79e:	b0 cf       	rjmp	.-160    	; 0x700 <_Z5checkv+0x13e>
	
	//set up button
	
	if(bit_is_clear(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN) && !set_up_pressed) {
		
		if(button_change) {
     7a0:	80 91 0b 01 	lds	r24, 0x010B
     7a4:	81 11       	cpse	r24, r1
     7a6:	91 cf       	rjmp	.-222    	; 0x6ca <_Z5checkv+0x108>
     7a8:	a5 cf       	rjmp	.-182    	; 0x6f4 <_Z5checkv+0x132>
	
	
	//set down button
	if(bit_is_clear(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN) && !set_down_pressed) {
		
		if(button_change) {
     7aa:	80 91 0b 01 	lds	r24, 0x010B
     7ae:	81 11       	cpse	r24, r1
     7b0:	ae cf       	rjmp	.-164    	; 0x70e <_Z5checkv+0x14c>
     7b2:	c2 cf       	rjmp	.-124    	; 0x738 <_Z5checkv+0x176>
		}
		
		set_down_pressed= true;
	}
	
	else if(bit_is_set(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN)) {
     7b4:	4a 99       	sbic	0x09, 2	; 9
     7b6:	c4 cf       	rjmp	.-120    	; 0x740 <_Z5checkv+0x17e>
     7b8:	c5 cf       	rjmp	.-118    	; 0x744 <_Z5checkv+0x182>
		set_down_pressed = false;
	}
	
	//set button
	if(bit_is_clear(SET_BUTTON_PORT, SET_BUTTON_PIN) && !set_pressed) {
			button_change = !button_change;
     7ba:	90 91 0b 01 	lds	r25, 0x010B
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	89 27       	eor	r24, r25
     7c2:	80 93 0b 01 	sts	0x010B, r24
			if(!button_change) {
     7c6:	81 11       	cpse	r24, r1
     7c8:	d5 cf       	rjmp	.-86     	; 0x774 <_Z5checkv+0x1b2>
     7ca:	c3 cf       	rjmp	.-122    	; 0x752 <_Z5checkv+0x190>
			}
			
			set_pressed = true;
		}
	
	else if(bit_is_set(SET_BUTTON_PORT, SET_BUTTON_PIN)) {
     7cc:	18 99       	sbic	0x03, 0	; 3
     7ce:	d6 cf       	rjmp	.-84     	; 0x77c <_Z5checkv+0x1ba>
     7d0:	08 95       	ret

000007d2 <main>:
uint32_t countpreheat = 0;


int main(void)
{	
	initUART0();
     7d2:	e4 d3       	rcall	.+1992   	; 0xf9c <_Z9initUART0v>
	init_devices();
     7d4:	72 dc       	rcall	.-1820   	; 0xba <_Z12init_devicesv>
// 		}
// 		
// 	}
// 	//
	// ti ti ti ti
	titi();
     7d6:	c4 de       	rcall	.-632    	; 0x560 <_Z4titiv>

// 	controls.stopBuzzer();
	////////////////////
	
	//wait while preheat condition is meet.
	bool clear_display = false;
     7d8:	d0 e0       	ldi	r29, 0x00	; 0
	bool set_temp_display = false;
   	while(!preHeat){
		  
  		 if(displayUpdate){
			clear_display = !clear_display;
     7da:	c1 e0       	ldi	r28, 0x01	; 1
	////////////////////
	
	//wait while preheat condition is meet.
	bool clear_display = false;
	bool set_temp_display = false;
   	while(!preHeat){
     7dc:	5f c0       	rjmp	.+190    	; 0x89c <main+0xca>
		  
  		 if(displayUpdate){
     7de:	80 91 39 01 	lds	r24, 0x0139
     7e2:	88 23       	and	r24, r24
     7e4:	09 f4       	brne	.+2      	; 0x7e8 <main+0x16>
     7e6:	59 c0       	rjmp	.+178    	; 0x89a <main+0xc8>
			clear_display = !clear_display;
     7e8:	dc 27       	eor	r29, r28
			
 			displayUpdate = false;
     7ea:	10 92 39 01 	sts	0x0139, r1
   			maxSkin.begin(1);
     7ee:	6c 2f       	mov	r22, r28
     7f0:	8c e2       	ldi	r24, 0x2C	; 44
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	38 d2       	rcall	.+1136   	; 0xc66 <_ZN17Adafruit_MAX318655beginEh>
   			skin_temperature = maxSkin.temperature(100.0,430.0);
     7f6:	00 e0       	ldi	r16, 0x00	; 0
     7f8:	10 e0       	ldi	r17, 0x00	; 0
     7fa:	27 ed       	ldi	r18, 0xD7	; 215
     7fc:	33 e4       	ldi	r19, 0x43	; 67
     7fe:	40 e0       	ldi	r20, 0x00	; 0
     800:	50 e0       	ldi	r21, 0x00	; 0
     802:	68 ec       	ldi	r22, 0xC8	; 200
     804:	72 e4       	ldi	r23, 0x42	; 66
     806:	8c e2       	ldi	r24, 0x2C	; 44
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	6c d2       	rcall	.+1240   	; 0xce4 <_ZN17Adafruit_MAX3186511temperatureEff>
     80c:	60 93 28 01 	sts	0x0128, r22
     810:	70 93 29 01 	sts	0x0129, r23
     814:	80 93 2a 01 	sts	0x012A, r24
     818:	90 93 2b 01 	sts	0x012B, r25
     		max1.MAX7219_init();
     81c:	88 e1       	ldi	r24, 0x18	; 24
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	62 d3       	rcall	.+1732   	; 0xee6 <_ZN7max721912MAX7219_initEv>
     		max2.MAX7219_init();
     822:	82 e1       	ldi	r24, 0x12	; 18
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	5f d3       	rcall	.+1726   	; 0xee6 <_ZN7max721912MAX7219_initEv>
 			//these above init should be done to initialize spi 
    			//sendToDisplay(air_temperature,skin_temperature,set_temperature);
 			displayPreHeat();
     828:	18 de       	rcall	.-976    	; 0x45a <_Z14displayPreHeatv>
			 if(clear_display) {
     82a:	dd 23       	and	r29, r29
     82c:	21 f0       	breq	.+8      	; 0x836 <main+0x64>
				 max2.MAX7219_clearDisplay();
     82e:	82 e1       	ldi	r24, 0x12	; 18
     830:	91 e0       	ldi	r25, 0x01	; 1
     832:	74 d3       	rcall	.+1768   	; 0xf1c <_ZN7max721920MAX7219_clearDisplayEv>
     834:	09 c0       	rjmp	.+18     	; 0x848 <main+0x76>
				 //max1.MAX7219_clearDisplay();
			 } else {
  				sendToDisplayBelow(skin_temperature);
     836:	60 91 28 01 	lds	r22, 0x0128
     83a:	70 91 29 01 	lds	r23, 0x0129
     83e:	80 91 2a 01 	lds	r24, 0x012A
     842:	90 91 2b 01 	lds	r25, 0x012B
     846:	9a dd       	rcall	.-1228   	; 0x37c <_Z18sendToDisplayBelowf>
			 }
			 if(skin_temperature > pre_heat_max_temp) {
     848:	c0 90 28 01 	lds	r12, 0x0128
     84c:	d0 90 29 01 	lds	r13, 0x0129
     850:	e0 90 2a 01 	lds	r14, 0x012A
     854:	f0 90 2b 01 	lds	r15, 0x012B
     858:	80 90 02 01 	lds	r8, 0x0102
     85c:	90 90 03 01 	lds	r9, 0x0103
     860:	a0 90 04 01 	lds	r10, 0x0104
     864:	b0 90 05 01 	lds	r11, 0x0105
     868:	a5 01       	movw	r20, r10
     86a:	94 01       	movw	r18, r8
     86c:	c7 01       	movw	r24, r14
     86e:	b6 01       	movw	r22, r12
     870:	55 d5       	rcall	.+2730   	; 0x131c <__gesf2>
     872:	18 16       	cp	r1, r24
     874:	3c f4       	brge	.+14     	; 0x884 <main+0xb2>
 				controls.stopHeater();
     876:	88 e3       	ldi	r24, 0x38	; 56
     878:	91 e0       	ldi	r25, 0x01	; 1
     87a:	db d0       	rcall	.+438    	; 0xa32 <_ZN8Controls10stopHeaterEv>
 				preHeat = true;
     87c:	c0 93 0a 01 	sts	0x010A, r28
 				titititi();
     880:	1a de       	rcall	.-972    	; 0x4b6 <_Z8titititiv>
     882:	0c c0       	rjmp	.+24     	; 0x89c <main+0xca>
 				}
 			else if(skin_temperature < pre_heat_max_temp) {
     884:	a5 01       	movw	r20, r10
     886:	94 01       	movw	r18, r8
     888:	c7 01       	movw	r24, r14
     88a:	b6 01       	movw	r22, r12
     88c:	f8 d3       	rcall	.+2032   	; 0x107e <__cmpsf2>
     88e:	88 23       	and	r24, r24
     890:	2c f4       	brge	.+10     	; 0x89c <main+0xca>
 				controls.startHeater();
     892:	88 e3       	ldi	r24, 0x38	; 56
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	cb d0       	rcall	.+406    	; 0xa2e <_ZN8Controls11startHeaterEv>
     898:	01 c0       	rjmp	.+2      	; 0x89c <main+0xca>
 				}
  		 }
  		  
  		  else{
 			   asm volatile ("nop");
     89a:	00 00       	nop
	////////////////////
	
	//wait while preheat condition is meet.
	bool clear_display = false;
	bool set_temp_display = false;
   	while(!preHeat){
     89c:	80 91 0a 01 	lds	r24, 0x010A
     8a0:	88 23       	and	r24, r24
     8a2:	09 f4       	brne	.+2      	; 0x8a6 <main+0xd4>
     8a4:	9c cf       	rjmp	.-200    	; 0x7de <main+0xc>
     8a6:	d0 e0       	ldi	r29, 0x00	; 0
 			max1.MAX7219_init(); // these are init
 			max2.MAX7219_init();
			 
			 //buzzer karaing
			 if(start_buzzer) {
				 buzzer_timer = !buzzer_timer;
     8a8:	c1 e0       	ldi	r28, 0x01	; 1
   	}
	   
	while(1)
	
	{
 		check();
     8aa:	8b de       	rcall	.-746    	; 0x5c2 <_Z5checkv>
 		if(displayUpdate) {
     8ac:	80 91 39 01 	lds	r24, 0x0139
     8b0:	88 23       	and	r24, r24
     8b2:	d9 f3       	breq	.-10     	; 0x8aa <main+0xd8>
 			//spi for max7219 for display
 			max1.MAX7219_init(); // these are init
     8b4:	88 e1       	ldi	r24, 0x18	; 24
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	16 d3       	rcall	.+1580   	; 0xee6 <_ZN7max721912MAX7219_initEv>
 			max2.MAX7219_init();
     8ba:	82 e1       	ldi	r24, 0x12	; 18
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	13 d3       	rcall	.+1574   	; 0xee6 <_ZN7max721912MAX7219_initEv>
			 
			 //buzzer karaing
			 if(start_buzzer) {
     8c0:	80 91 37 01 	lds	r24, 0x0137
     8c4:	88 23       	and	r24, r24
     8c6:	71 f0       	breq	.+28     	; 0x8e4 <main+0x112>
				 buzzer_timer = !buzzer_timer;
     8c8:	80 91 36 01 	lds	r24, 0x0136
     8cc:	8c 27       	eor	r24, r28
     8ce:	80 93 36 01 	sts	0x0136, r24
				 if(buzzer_timer) {
     8d2:	88 23       	and	r24, r24
     8d4:	21 f0       	breq	.+8      	; 0x8de <main+0x10c>
					 controls.startBuzzer();
     8d6:	88 e3       	ldi	r24, 0x38	; 56
     8d8:	91 e0       	ldi	r25, 0x01	; 1
     8da:	ad d0       	rcall	.+346    	; 0xa36 <_ZN8Controls11startBuzzerEv>
     8dc:	03 c0       	rjmp	.+6      	; 0x8e4 <main+0x112>
				 } else {
					 controls.stopBuzzer();
     8de:	88 e3       	ldi	r24, 0x38	; 56
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	ab d0       	rcall	.+342    	; 0xa3a <_ZN8Controls10stopBuzzerEv>
				 }
			 }
			 // sending this
			 if(button_change){
     8e4:	80 91 0b 01 	lds	r24, 0x010B
     8e8:	88 23       	and	r24, r24
     8ea:	89 f0       	breq	.+34     	; 0x90e <__stack+0xf>
				 set_temp_display = !set_temp_display;
     8ec:	dc 27       	eor	r29, r28
				 if(set_temp_display) {
     8ee:	51 f0       	breq	.+20     	; 0x904 <__stack+0x5>
					sendToDisplayBelow(set_temperature_copy);
     8f0:	60 91 20 01 	lds	r22, 0x0120
     8f4:	70 91 21 01 	lds	r23, 0x0121
     8f8:	80 91 22 01 	lds	r24, 0x0122
     8fc:	90 91 23 01 	lds	r25, 0x0123
     900:	3d dd       	rcall	.-1414   	; 0x37c <_Z18sendToDisplayBelowf>
     902:	03 c0       	rjmp	.+6      	; 0x90a <__stack+0xb>
				 } else {
					max2.MAX7219_clearDisplay(); 
     904:	82 e1       	ldi	r24, 0x12	; 18
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	09 d3       	rcall	.+1554   	; 0xf1c <_ZN7max721920MAX7219_clearDisplayEv>
				 }
				 displaySetTemperature();
     90a:	79 dd       	rcall	.-1294   	; 0x3fe <_Z21displaySetTemperaturev>
     90c:	19 c0       	rjmp	.+50     	; 0x940 <__stack+0x41>
			 }
			 
			 else{
				 sendToDisplay(air_temperature, skin_temperature, set_temperature);
     90e:	e0 90 06 01 	lds	r14, 0x0106
     912:	f0 90 07 01 	lds	r15, 0x0107
     916:	00 91 08 01 	lds	r16, 0x0108
     91a:	10 91 09 01 	lds	r17, 0x0109
     91e:	20 91 28 01 	lds	r18, 0x0128
     922:	30 91 29 01 	lds	r19, 0x0129
     926:	40 91 2a 01 	lds	r20, 0x012A
     92a:	50 91 2b 01 	lds	r21, 0x012B
     92e:	60 91 24 01 	lds	r22, 0x0124
     932:	70 91 25 01 	lds	r23, 0x0125
     936:	80 91 26 01 	lds	r24, 0x0126
     93a:	90 91 27 01 	lds	r25, 0x0127
     93e:	5e dc       	rcall	.-1860   	; 0x1fc <_Z13sendToDisplayfff>
			 }
			 	
 			//spi for temperature pt100
 			maxAir.begin(0); //these are init 
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	81 e3       	ldi	r24, 0x31	; 49
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	8f d1       	rcall	.+798    	; 0xc66 <_ZN17Adafruit_MAX318655beginEh>
 			maxSkin.begin(1);
     948:	6c 2f       	mov	r22, r28
     94a:	8c e2       	ldi	r24, 0x2C	; 44
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	8b d1       	rcall	.+790    	; 0xc66 <_ZN17Adafruit_MAX318655beginEh>
 			skin_temperature = maxSkin.temperature(100.0, 430.0);
     950:	00 e0       	ldi	r16, 0x00	; 0
     952:	10 e0       	ldi	r17, 0x00	; 0
     954:	27 ed       	ldi	r18, 0xD7	; 215
     956:	33 e4       	ldi	r19, 0x43	; 67
     958:	40 e0       	ldi	r20, 0x00	; 0
     95a:	50 e0       	ldi	r21, 0x00	; 0
     95c:	68 ec       	ldi	r22, 0xC8	; 200
     95e:	72 e4       	ldi	r23, 0x42	; 66
     960:	8c e2       	ldi	r24, 0x2C	; 44
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	bf d1       	rcall	.+894    	; 0xce4 <_ZN17Adafruit_MAX3186511temperatureEff>
     966:	60 93 28 01 	sts	0x0128, r22
     96a:	70 93 29 01 	sts	0x0129, r23
     96e:	80 93 2a 01 	sts	0x012A, r24
     972:	90 93 2b 01 	sts	0x012B, r25
			air_temperature = maxAir.temperature(100.0, 430.0);
     976:	00 e0       	ldi	r16, 0x00	; 0
     978:	10 e0       	ldi	r17, 0x00	; 0
     97a:	27 ed       	ldi	r18, 0xD7	; 215
     97c:	33 e4       	ldi	r19, 0x43	; 67
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	68 ec       	ldi	r22, 0xC8	; 200
     984:	72 e4       	ldi	r23, 0x42	; 66
     986:	81 e3       	ldi	r24, 0x31	; 49
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	ac d1       	rcall	.+856    	; 0xce4 <_ZN17Adafruit_MAX3186511temperatureEff>
     98c:	60 93 24 01 	sts	0x0124, r22
     990:	70 93 25 01 	sts	0x0125, r23
     994:	80 93 26 01 	sts	0x0126, r24
     998:	90 93 27 01 	sts	0x0127, r25
			 
				 if(skin_temperature >= (set_temperature-0.1)) {
     99c:	80 90 06 01 	lds	r8, 0x0106
     9a0:	90 90 07 01 	lds	r9, 0x0107
     9a4:	a0 90 08 01 	lds	r10, 0x0108
     9a8:	b0 90 09 01 	lds	r11, 0x0109
     9ac:	c0 90 28 01 	lds	r12, 0x0128
     9b0:	d0 90 29 01 	lds	r13, 0x0129
     9b4:	e0 90 2a 01 	lds	r14, 0x012A
     9b8:	f0 90 2b 01 	lds	r15, 0x012B
     9bc:	2d ec       	ldi	r18, 0xCD	; 205
     9be:	3c ec       	ldi	r19, 0xCC	; 204
     9c0:	4c ec       	ldi	r20, 0xCC	; 204
     9c2:	5d e3       	ldi	r21, 0x3D	; 61
     9c4:	c5 01       	movw	r24, r10
     9c6:	b4 01       	movw	r22, r8
     9c8:	f5 d2       	rcall	.+1514   	; 0xfb4 <__subsf3>
     9ca:	a7 01       	movw	r20, r14
     9cc:	96 01       	movw	r18, r12
     9ce:	57 d3       	rcall	.+1710   	; 0x107e <__cmpsf2>
     9d0:	18 16       	cp	r1, r24
     9d2:	24 f0       	brlt	.+8      	; 0x9dc <__stack+0xdd>
					 controls.stopHeater();
     9d4:	88 e3       	ldi	r24, 0x38	; 56
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	2c d0       	rcall	.+88     	; 0xa32 <_ZN8Controls10stopHeaterEv>
     9da:	11 c0       	rjmp	.+34     	; 0x9fe <__stack+0xff>
					 }else if(skin_temperature <= (set_temperature - 0.2)) {
     9dc:	2d ec       	ldi	r18, 0xCD	; 205
     9de:	3c ec       	ldi	r19, 0xCC	; 204
     9e0:	4c e4       	ldi	r20, 0x4C	; 76
     9e2:	5e e3       	ldi	r21, 0x3E	; 62
     9e4:	c5 01       	movw	r24, r10
     9e6:	b4 01       	movw	r22, r8
     9e8:	e5 d2       	rcall	.+1482   	; 0xfb4 <__subsf3>
     9ea:	9b 01       	movw	r18, r22
     9ec:	ac 01       	movw	r20, r24
     9ee:	c7 01       	movw	r24, r14
     9f0:	b6 01       	movw	r22, r12
     9f2:	45 d3       	rcall	.+1674   	; 0x107e <__cmpsf2>
     9f4:	18 16       	cp	r1, r24
     9f6:	1c f0       	brlt	.+6      	; 0x9fe <__stack+0xff>
					 controls.startHeater();
     9f8:	88 e3       	ldi	r24, 0x38	; 56
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	18 d0       	rcall	.+48     	; 0xa2e <_ZN8Controls11startHeaterEv>
				 }
 			                                                                                                                                                                                                                               
 			displayUpdate = false;
     9fe:	10 92 39 01 	sts	0x0139, r1
     a02:	53 cf       	rjmp	.-346    	; 0x8aa <main+0xd8>

00000a04 <_GLOBAL__sub_I_startMonitor>:
Adafruit_MAX31865 maxSkin;

float skin_temperature = 0.0;
float air_temperature = 0.0;
float set_temperature = 30.5;
float set_temperature_copy = set_temperature;
     a04:	80 91 06 01 	lds	r24, 0x0106
     a08:	90 91 07 01 	lds	r25, 0x0107
     a0c:	a0 91 08 01 	lds	r26, 0x0108
     a10:	b0 91 09 01 	lds	r27, 0x0109
     a14:	80 93 20 01 	sts	0x0120, r24
     a18:	90 93 21 01 	sts	0x0121, r25
     a1c:	a0 93 22 01 	sts	0x0122, r26
     a20:	b0 93 23 01 	sts	0x0123, r27
     a24:	08 95       	ret

00000a26 <_ZN8Controls12initControlsEv>:

void Controls::startHeater() {
	HEATER_PORT |= (1 << HEATER_PIN);
}

void Controls::stopFan() {
     a26:	53 9a       	sbi	0x0a, 3	; 10
     a28:	3d 9a       	sbi	0x07, 5	; 7
     a2a:	5b 98       	cbi	0x0b, 3	; 11
     a2c:	08 95       	ret

00000a2e <_ZN8Controls11startHeaterEv>:
     a2e:	5b 9a       	sbi	0x0b, 3	; 11
     a30:	08 95       	ret

00000a32 <_ZN8Controls10stopHeaterEv>:
	//FAN_PORT &=~ (1 << FAN_PIN);
	//PORTB &=~ ((1 << PINB7) | (1 << PINB4));
}

void Controls::stopHeater() {
	HEATER_PORT &=~ (1 << HEATER_PIN);
     a32:	5b 98       	cbi	0x0b, 3	; 11
     a34:	08 95       	ret

00000a36 <_ZN8Controls11startBuzzerEv>:
}

void Controls::startBuzzer() {
	BUZZER_PORT |= (1 << BUZZER_PIN);
     a36:	45 9a       	sbi	0x08, 5	; 8
     a38:	08 95       	ret

00000a3a <_ZN8Controls10stopBuzzerEv>:
}

void Controls::stopBuzzer() {
	BUZZER_PORT &=~ (1 << BUZZER_PIN);
     a3a:	45 98       	cbi	0x08, 5	; 8
     a3c:	08 95       	ret

00000a3e <_ZN3led8led_initEv>:
#include <avr/io.h>

#define DDR(x) (*(&x - 1))      /* address of data direction register of port x */

void led::led_init() {
	DDR(TS_HIGH_PORT) |= (1 << TS_HIGH_PIN);
     a3e:	56 9a       	sbi	0x0a, 6	; 10
	DDR(TA_HIGH_PORT) |= (1 << TA_HIGH_PIN);
     a40:	50 9a       	sbi	0x0a, 0	; 10
	DDR(SET_TEMP_PORT) |= (1 << SET_TEMP_PIN);
     a42:	51 9a       	sbi	0x0a, 1	; 10
	DDR(SENSOR_FAIL_PORT) |= (1 << SENSOR_FAIL_PIN);
     a44:	51 9a       	sbi	0x0a, 1	; 10
	DDR(HEATER_FAIL_PORT) |= (1 << HEATER_FAIL_PIN);
     a46:	57 9a       	sbi	0x0a, 7	; 10
	DDR(POWER_PORT) |= (1 << POWER_PIN);
     a48:	50 9a       	sbi	0x0a, 0	; 10
     a4a:	08 95       	ret

00000a4c <_ZN3led6led_doEii>:
	
}


void led::led_do(int led_num, int state) {
	switch(led_num) {
     a4c:	62 30       	cpi	r22, 0x02	; 2
     a4e:	71 05       	cpc	r23, r1
     a50:	41 f1       	breq	.+80     	; 0xaa2 <_ZN3led6led_doEii+0x56>
     a52:	3c f4       	brge	.+14     	; 0xa62 <_ZN3led6led_doEii+0x16>
     a54:	61 15       	cp	r22, r1
     a56:	71 05       	cpc	r23, r1
     a58:	61 f0       	breq	.+24     	; 0xa72 <_ZN3led6led_doEii+0x26>
     a5a:	61 30       	cpi	r22, 0x01	; 1
     a5c:	71 05       	cpc	r23, r1
     a5e:	79 f0       	breq	.+30     	; 0xa7e <_ZN3led6led_doEii+0x32>
     a60:	08 95       	ret
     a62:	64 30       	cpi	r22, 0x04	; 4
     a64:	71 05       	cpc	r23, r1
     a66:	b9 f0       	breq	.+46     	; 0xa96 <_ZN3led6led_doEii+0x4a>
     a68:	14 f1       	brlt	.+68     	; 0xaae <_ZN3led6led_doEii+0x62>
     a6a:	65 30       	cpi	r22, 0x05	; 5
     a6c:	71 05       	cpc	r23, r1
     a6e:	69 f0       	breq	.+26     	; 0xa8a <_ZN3led6led_doEii+0x3e>
     a70:	08 95       	ret
		case TS_HIGH_LED:
		REGISTER_LED(TS_HIGH_PORT, TS_HIGH_PIN, state);
     a72:	45 2b       	or	r20, r21
     a74:	11 f0       	breq	.+4      	; 0xa7a <_ZN3led6led_doEii+0x2e>
     a76:	5e 9a       	sbi	0x0b, 6	; 11
     a78:	08 95       	ret
     a7a:	5e 98       	cbi	0x0b, 6	; 11
     a7c:	08 95       	ret
		break;
	
		case TA_HIGH_LED:
		REGISTER_LED(TA_HIGH_PORT, TA_HIGH_PIN, state);
     a7e:	45 2b       	or	r20, r21
     a80:	11 f0       	breq	.+4      	; 0xa86 <_ZN3led6led_doEii+0x3a>
     a82:	58 9a       	sbi	0x0b, 0	; 11
     a84:	08 95       	ret
     a86:	58 98       	cbi	0x0b, 0	; 11
     a88:	08 95       	ret
		break;
		
		case SENSOR_FAIL_LED:
		REGISTER_LED(SENSOR_FAIL_PORT, SENSOR_FAIL_PIN, state);
     a8a:	45 2b       	or	r20, r21
     a8c:	11 f0       	breq	.+4      	; 0xa92 <_ZN3led6led_doEii+0x46>
     a8e:	59 9a       	sbi	0x0b, 1	; 11
     a90:	08 95       	ret
     a92:	59 98       	cbi	0x0b, 1	; 11
     a94:	08 95       	ret
		break;
		
		case HEATER_FAIL_LED:
		REGISTER_LED(HEATER_FAIL_PORT, HEATER_FAIL_PIN, state);
     a96:	45 2b       	or	r20, r21
     a98:	11 f0       	breq	.+4      	; 0xa9e <_ZN3led6led_doEii+0x52>
     a9a:	5f 9a       	sbi	0x0b, 7	; 11
     a9c:	08 95       	ret
     a9e:	5f 98       	cbi	0x0b, 7	; 11
     aa0:	08 95       	ret
		break;
		
		case SET_TEMP_LED:
		REGISTER_LED(SET_TEMP_PORT, SET_TEMP_PIN, state);
     aa2:	45 2b       	or	r20, r21
     aa4:	11 f0       	breq	.+4      	; 0xaaa <_ZN3led6led_doEii+0x5e>
     aa6:	59 9a       	sbi	0x0b, 1	; 11
     aa8:	08 95       	ret
     aaa:	59 98       	cbi	0x0b, 1	; 11
     aac:	08 95       	ret
		break;
		
		case POWER_LED:
		REGISTER_LED(POWER_PORT, POWER_PIN, state);
     aae:	45 2b       	or	r20, r21
     ab0:	11 f0       	breq	.+4      	; 0xab6 <_ZN3led6led_doEii+0x6a>
     ab2:	58 9a       	sbi	0x0b, 0	; 11
     ab4:	08 95       	ret
     ab6:	58 98       	cbi	0x0b, 0	; 11
     ab8:	08 95       	ret

00000aba <_ZN17Adafruit_MAX318657spixferEh>:
}


uint8_t Adafruit_MAX31865::readFault(void) {
	return readRegister8(MAX31856_FAULTSTAT_REG);
}
     aba:	6e bd       	out	0x2e, r22	; 46
     abc:	0d b4       	in	r0, 0x2d	; 45
     abe:	07 fe       	sbrs	r0, 7
     ac0:	fd cf       	rjmp	.-6      	; 0xabc <_ZN17Adafruit_MAX318657spixferEh+0x2>
     ac2:	8e b5       	in	r24, 0x2e	; 46
     ac4:	08 95       	ret

00000ac6 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>:
     ac6:	ef 92       	push	r14
     ac8:	ff 92       	push	r15
     aca:	0f 93       	push	r16
     acc:	1f 93       	push	r17
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	7c 01       	movw	r14, r24
     ad4:	ea 01       	movw	r28, r20
     ad6:	12 2f       	mov	r17, r18
     ad8:	fc 01       	movw	r30, r24
     ada:	80 81       	ld	r24, Z
     adc:	88 23       	and	r24, r24
     ade:	19 f0       	breq	.+6      	; 0xae6 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x20>
     ae0:	81 30       	cpi	r24, 0x01	; 1
     ae2:	21 f0       	breq	.+8      	; 0xaec <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x26>
     ae4:	05 c0       	rjmp	.+10     	; 0xaf0 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x2a>
     ae6:	29 98       	cbi	0x05, 1	; 5
     ae8:	2a 9a       	sbi	0x05, 2	; 5
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x2a>
     aec:	2a 98       	cbi	0x05, 2	; 5
     aee:	29 9a       	sbi	0x05, 1	; 5
     af0:	6f 77       	andi	r22, 0x7F	; 127
     af2:	c7 01       	movw	r24, r14
     af4:	e2 df       	rcall	.-60     	; 0xaba <_ZN17Adafruit_MAX318657spixferEh>
     af6:	0f ef       	ldi	r16, 0xFF	; 255
     af8:	01 0f       	add	r16, r17
     afa:	11 23       	and	r17, r17
     afc:	61 f0       	breq	.+24     	; 0xb16 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x50>
     afe:	10 e0       	ldi	r17, 0x00	; 0
     b00:	0f 5f       	subi	r16, 0xFF	; 255
     b02:	1f 4f       	sbci	r17, 0xFF	; 255
     b04:	0c 0f       	add	r16, r28
     b06:	1d 1f       	adc	r17, r29
     b08:	6f ef       	ldi	r22, 0xFF	; 255
     b0a:	c7 01       	movw	r24, r14
     b0c:	d6 df       	rcall	.-84     	; 0xaba <_ZN17Adafruit_MAX318657spixferEh>
     b0e:	89 93       	st	Y+, r24
     b10:	c0 17       	cp	r28, r16
     b12:	d1 07       	cpc	r29, r17
     b14:	c9 f7       	brne	.-14     	; 0xb08 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x42>
     b16:	f7 01       	movw	r30, r14
     b18:	80 81       	ld	r24, Z
     b1a:	88 23       	and	r24, r24
     b1c:	19 f0       	breq	.+6      	; 0xb24 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x5e>
     b1e:	81 30       	cpi	r24, 0x01	; 1
     b20:	19 f0       	breq	.+6      	; 0xb28 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x62>
     b22:	03 c0       	rjmp	.+6      	; 0xb2a <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x64>
     b24:	29 9a       	sbi	0x05, 1	; 5
     b26:	01 c0       	rjmp	.+2      	; 0xb2a <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x64>
     b28:	2a 9a       	sbi	0x05, 2	; 5
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	ff 90       	pop	r15
     b34:	ef 90       	pop	r14
     b36:	08 95       	ret

00000b38 <_ZN17Adafruit_MAX3186513readRegister8Eh>:
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	1f 92       	push	r1
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	19 82       	std	Y+1, r1	; 0x01
     b44:	21 e0       	ldi	r18, 0x01	; 1
     b46:	ae 01       	movw	r20, r28
     b48:	4f 5f       	subi	r20, 0xFF	; 255
     b4a:	5f 4f       	sbci	r21, 0xFF	; 255
     b4c:	bc df       	rcall	.-136    	; 0xac6 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>
     b4e:	89 81       	ldd	r24, Y+1	; 0x01
     b50:	0f 90       	pop	r0
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	08 95       	ret

00000b58 <_ZN17Adafruit_MAX3186514readRegister16Eh>:
	readRegisterN(addr, &ret, 1);
	
	return ret;
}

uint16_t Adafruit_MAX31865::readRegister16(uint8_t addr) {
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	00 d0       	rcall	.+0      	; 0xb5e <_ZN17Adafruit_MAX3186514readRegister16Eh+0x6>
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
uint8_t buffer[2] = {0, 0};
     b62:	19 82       	std	Y+1, r1	; 0x01
     b64:	1a 82       	std	Y+2, r1	; 0x02
readRegisterN(addr, buffer, 2);
     b66:	22 e0       	ldi	r18, 0x02	; 2
     b68:	ae 01       	movw	r20, r28
     b6a:	4f 5f       	subi	r20, 0xFF	; 255
     b6c:	5f 4f       	sbci	r21, 0xFF	; 255
     b6e:	ab df       	rcall	.-170    	; 0xac6 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>

uint16_t ret = buffer[0];
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	90 e0       	ldi	r25, 0x00	; 0
ret <<= 8;
     b74:	98 2f       	mov	r25, r24
     b76:	88 27       	eor	r24, r24
ret |=  buffer[1];
     b78:	2a 81       	ldd	r18, Y+2	; 0x02

return ret;
}
     b7a:	82 2b       	or	r24, r18
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	08 95       	ret

00000b86 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>:

 
}


void Adafruit_MAX31865::writeRegister8(uint8_t addr, uint8_t data) {
     b86:	1f 93       	push	r17
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	ec 01       	movw	r28, r24
     b8e:	14 2f       	mov	r17, r20
 
  switch(choose) {
     b90:	88 81       	ld	r24, Y
     b92:	88 23       	and	r24, r24
     b94:	19 f0       	breq	.+6      	; 0xb9c <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x16>
     b96:	81 30       	cpi	r24, 0x01	; 1
     b98:	21 f0       	breq	.+8      	; 0xba2 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x1c>
     b9a:	05 c0       	rjmp	.+10     	; 0xba6 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x20>
	  case 0:
		TEMP_I_PORT &=~ (1 << PINB1);
     b9c:	29 98       	cbi	0x05, 1	; 5
		TEMP_II_PORT |= (1 << PINB2);
     b9e:	2a 9a       	sbi	0x05, 2	; 5
		break;
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x20>
	  case 1:
		TEMP_II_PORT &=~ (1 << PINB2);
     ba2:	2a 98       	cbi	0x05, 2	; 5
		TEMP_I_PORT |= (1 << PINB1);
     ba4:	29 9a       	sbi	0x05, 1	; 5
		break;
  }
  spixfer(addr | 0x80);   // make sure top bit is set
     ba6:	60 68       	ori	r22, 0x80	; 128
     ba8:	ce 01       	movw	r24, r28
     baa:	87 df       	rcall	.-242    	; 0xaba <_ZN17Adafruit_MAX318657spixferEh>
  spixfer(data);
     bac:	61 2f       	mov	r22, r17
     bae:	ce 01       	movw	r24, r28
     bb0:	84 df       	rcall	.-248    	; 0xaba <_ZN17Adafruit_MAX318657spixferEh>

  //Serial.print("$"); Serial.print(addr, HEX); Serial.print(" = 0x"); Serial.println(data, HEX);

switch(choose) {
     bb2:	88 81       	ld	r24, Y
     bb4:	88 23       	and	r24, r24
     bb6:	19 f0       	breq	.+6      	; 0xbbe <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x38>
     bb8:	81 30       	cpi	r24, 0x01	; 1
     bba:	19 f0       	breq	.+6      	; 0xbc2 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x3c>
     bbc:	03 c0       	rjmp	.+6      	; 0xbc4 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x3e>
   case 0:
	TEMP_I_PORT |= (1 << PINB1);
     bbe:	29 9a       	sbi	0x05, 1	; 5
	break;
     bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x3e>
  case 1:
	TEMP_II_PORT |= (1 << PINB2);
     bc2:	2a 9a       	sbi	0x05, 2	; 5
	break;
}
}
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	1f 91       	pop	r17
     bca:	08 95       	ret

00000bcc <_ZN17Adafruit_MAX3186510clearFaultEv>:

uint8_t Adafruit_MAX31865::readFault(void) {
	return readRegister8(MAX31856_FAULTSTAT_REG);
}

void Adafruit_MAX31865::clearFault(void) {
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
     bd0:	ec 01       	movw	r28, r24
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	b1 df       	rcall	.-158    	; 0xb38 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	t &= ~0x2C;
     bd6:	83 7d       	andi	r24, 0xD3	; 211
	t |= MAX31856_CONFIG_FAULTSTAT;
     bd8:	48 2f       	mov	r20, r24
     bda:	42 60       	ori	r20, 0x02	; 2
	writeRegister8(MAX31856_CONFIG_REG, t);
     bdc:	60 e0       	ldi	r22, 0x00	; 0
     bde:	ce 01       	movw	r24, r28
     be0:	d2 df       	rcall	.-92     	; 0xb86 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	08 95       	ret

00000be8 <_ZN17Adafruit_MAX3186510enableBiasEb>:

void Adafruit_MAX31865::enableBias(bool b) {
     be8:	1f 93       	push	r17
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	ec 01       	movw	r28, r24
     bf0:	16 2f       	mov	r17, r22
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
     bf2:	60 e0       	ldi	r22, 0x00	; 0
     bf4:	a1 df       	rcall	.-190    	; 0xb38 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	if (b) {
     bf6:	11 23       	and	r17, r17
     bf8:	19 f0       	breq	.+6      	; 0xc00 <_ZN17Adafruit_MAX3186510enableBiasEb+0x18>
		t |= MAX31856_CONFIG_BIAS;       // enable bias
     bfa:	48 2f       	mov	r20, r24
     bfc:	40 68       	ori	r20, 0x80	; 128
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <_ZN17Adafruit_MAX3186510enableBiasEb+0x1c>
	} else {
		t &= ~MAX31856_CONFIG_BIAS;       // disable bias
     c00:	48 2f       	mov	r20, r24
     c02:	4f 77       	andi	r20, 0x7F	; 127
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	ce 01       	movw	r24, r28
     c08:	be df       	rcall	.-132    	; 0xb86 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	08 95       	ret

00000c12 <_ZN17Adafruit_MAX3186511autoConvertEb>:

void Adafruit_MAX31865::autoConvert(bool b) {
     c12:	1f 93       	push	r17
     c14:	cf 93       	push	r28
     c16:	df 93       	push	r29
     c18:	ec 01       	movw	r28, r24
     c1a:	16 2f       	mov	r17, r22
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	8c df       	rcall	.-232    	; 0xb38 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	if (b) {
     c20:	11 23       	and	r17, r17
     c22:	19 f0       	breq	.+6      	; 0xc2a <_ZN17Adafruit_MAX3186511autoConvertEb+0x18>
		t |= MAX31856_CONFIG_MODEAUTO;       // enable autoconvert
     c24:	48 2f       	mov	r20, r24
     c26:	40 64       	ori	r20, 0x40	; 64
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <_ZN17Adafruit_MAX3186511autoConvertEb+0x1c>
	} else {
		t &= ~MAX31856_CONFIG_MODEAUTO;       // disable autoconvert
     c2a:	48 2f       	mov	r20, r24
     c2c:	4f 7b       	andi	r20, 0xBF	; 191
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	ce 01       	movw	r24, r28
     c32:	a9 df       	rcall	.-174    	; 0xb86 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	1f 91       	pop	r17
     c3a:	08 95       	ret

00000c3c <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires>:

void Adafruit_MAX31865::setWires(max31865_numwires_t wires ) {
     c3c:	1f 93       	push	r17
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	ec 01       	movw	r28, r24
     c44:	16 2f       	mov	r17, r22
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	77 df       	rcall	.-274    	; 0xb38 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	if (wires == MAX31865_3WIRE) {
     c4a:	11 30       	cpi	r17, 0x01	; 1
     c4c:	19 f4       	brne	.+6      	; 0xc54 <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires+0x18>
		t |= MAX31856_CONFIG_3WIRE;
     c4e:	48 2f       	mov	r20, r24
     c50:	40 61       	ori	r20, 0x10	; 16
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires+0x1c>
	} else {
		// 2 or 4 wire
		t &= ~MAX31856_CONFIG_3WIRE;
     c54:	48 2f       	mov	r20, r24
     c56:	4f 7e       	andi	r20, 0xEF	; 239
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	ce 01       	movw	r24, r28
     c5c:	94 df       	rcall	.-216    	; 0xb86 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	1f 91       	pop	r17
     c64:	08 95       	ret

00000c66 <_ZN17Adafruit_MAX318655beginEh>:
#include <stdlib.h>
#include "header.h"
#include <util/delay.h>


bool Adafruit_MAX31865::begin(uint8_t choose1) {
     c66:	1f 93       	push	r17
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	ec 01       	movw	r28, r24
     c6e:	16 2f       	mov	r17, r22
	
	DISPLAY_I_PORT |= (1 << DISPLAY_I_PIN) | (1 << DISPLAY_II_PIN);
     c70:	8b b1       	in	r24, 0x0b	; 11
     c72:	80 63       	ori	r24, 0x30	; 48
     c74:	8b b9       	out	0x0b, r24	; 11
	SPI.begin();
     c76:	64 d1       	rcall	.+712    	; 0xf40 <_ZN8SPIClass5beginEv>
  static void begin();
  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    SPCR = settings.spcr;
     c78:	85 e5       	ldi	r24, 0x55	; 85
     c7a:	8c bd       	out	0x2c, r24	; 44
	SPI.beginTransaction(SPISettings(1000000,MSBFIRST,SPI_MODE1));
	for (uint8_t i=0; i<16; i++) {
		// readRegister8(i);
	}
	choose = choose1;
     c7c:	18 83       	st	Y, r17
	setWires(MAX31865_3WIRE);
     c7e:	61 e0       	ldi	r22, 0x01	; 1
     c80:	ce 01       	movw	r24, r28
     c82:	dc df       	rcall	.-72     	; 0xc3c <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires>
	enableBias(false);
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	ce 01       	movw	r24, r28
     c88:	af df       	rcall	.-162    	; 0xbe8 <_ZN17Adafruit_MAX3186510enableBiasEb>
	autoConvert(false);
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	ce 01       	movw	r24, r28
     c8e:	c1 df       	rcall	.-126    	; 0xc12 <_ZN17Adafruit_MAX3186511autoConvertEb>
	clearFault();
     c90:	ce 01       	movw	r24, r28
     c92:	9c df       	rcall	.-200    	; 0xbcc <_ZN17Adafruit_MAX3186510clearFaultEv>
	
	//Serial.print("config: "); Serial.println(readRegister8(MAX31856_CONFIG_REG), HEX);
	return true;
}
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <_ZN17Adafruit_MAX318657readRTDEv>:
	temp += 1.5243e-10 * rpoly;

	return temp;
}

uint16_t Adafruit_MAX31865::readRTD (void) {
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	ec 01       	movw	r28, r24
	clearFault();
     ca4:	93 df       	rcall	.-218    	; 0xbcc <_ZN17Adafruit_MAX3186510clearFaultEv>
	enableBias(true);
     ca6:	61 e0       	ldi	r22, 0x01	; 1
     ca8:	ce 01       	movw	r24, r28
     caa:	9e df       	rcall	.-196    	; 0xbe8 <_ZN17Adafruit_MAX3186510enableBiasEb>
     cac:	83 ec       	ldi	r24, 0xC3	; 195
     cae:	99 e0       	ldi	r25, 0x09	; 9
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	f1 f7       	brne	.-4      	; 0xcb0 <_ZN17Adafruit_MAX318657readRTDEv+0x12>
     cb4:	00 c0       	rjmp	.+0      	; 0xcb6 <_ZN17Adafruit_MAX318657readRTDEv+0x18>
     cb6:	00 00       	nop
	_delay_ms(10);
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	ce 01       	movw	r24, r28
     cbc:	3d df       	rcall	.-390    	; 0xb38 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	t |= MAX31856_CONFIG_1SHOT;
     cbe:	48 2f       	mov	r20, r24
     cc0:	40 62       	ori	r20, 0x20	; 32
	writeRegister8(MAX31856_CONFIG_REG, t);
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	ce 01       	movw	r24, r28
     cc6:	5f df       	rcall	.-322    	; 0xb86 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
     cc8:	89 e7       	ldi	r24, 0x79	; 121
     cca:	9f e3       	ldi	r25, 0x3F	; 63
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	f1 f7       	brne	.-4      	; 0xccc <_ZN17Adafruit_MAX318657readRTDEv+0x2e>
     cd0:	00 c0       	rjmp	.+0      	; 0xcd2 <_ZN17Adafruit_MAX318657readRTDEv+0x34>
     cd2:	00 00       	nop
	_delay_ms(65);

	uint16_t rtd = readRegister16(MAX31856_RTDMSB_REG);
     cd4:	61 e0       	ldi	r22, 0x01	; 1
     cd6:	ce 01       	movw	r24, r28
     cd8:	3f df       	rcall	.-386    	; 0xb58 <_ZN17Adafruit_MAX3186514readRegister16Eh>

	// remove fault
	rtd >>= 1;

	return rtd;
}
     cda:	96 95       	lsr	r25
     cdc:	87 95       	ror	r24
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	08 95       	ret

00000ce4 <_ZN17Adafruit_MAX3186511temperatureEff>:
		t &= ~MAX31856_CONFIG_3WIRE;
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
}

float  Adafruit_MAX31865::temperature(float RTDnominal, float refResistor) {
     ce4:	4f 92       	push	r4
     ce6:	5f 92       	push	r5
     ce8:	6f 92       	push	r6
     cea:	7f 92       	push	r7
     cec:	8f 92       	push	r8
     cee:	9f 92       	push	r9
     cf0:	af 92       	push	r10
     cf2:	bf 92       	push	r11
     cf4:	cf 92       	push	r12
     cf6:	df 92       	push	r13
     cf8:	ef 92       	push	r14
     cfa:	ff 92       	push	r15
     cfc:	0f 93       	push	r16
     cfe:	1f 93       	push	r17
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	4a 01       	movw	r8, r20
     d06:	5b 01       	movw	r10, r22
     d08:	68 01       	movw	r12, r16
     d0a:	79 01       	movw	r14, r18
	// http://www.analog.com/media/en/technical-documentation/application-notes/AN709_0.pdf

	float Z1, Z2, Z3, Z4, Rt, temp;

	Rt = readRTD();
     d0c:	c8 df       	rcall	.-112    	; 0xc9e <_ZN17Adafruit_MAX318657readRTDEv>
     d0e:	bc 01       	movw	r22, r24
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	51 d2       	rcall	.+1186   	; 0x11b8 <__floatunsisf>
	Rt /= 32768;
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	40 e0       	ldi	r20, 0x00	; 0
     d1c:	58 e3       	ldi	r21, 0x38	; 56
     d1e:	02 d3       	rcall	.+1540   	; 0x1324 <__mulsf3>
	Rt *= refResistor;
     d20:	a7 01       	movw	r20, r14
     d22:	96 01       	movw	r18, r12
     d24:	ff d2       	rcall	.+1534   	; 0x1324 <__mulsf3>
     d26:	2b 01       	movw	r4, r22
     d28:	3c 01       	movw	r6, r24
	
	// Serial.print("\nResistance: "); Serial.println(Rt, 8);

	Z1 = -RTD_A;
	Z2 = RTD_A * RTD_A - (4 * RTD_B);
	Z3 = (4 * RTD_B) / RTDnominal;
     d2a:	a5 01       	movw	r20, r10
     d2c:	94 01       	movw	r18, r8
     d2e:	6f e7       	ldi	r22, 0x7F	; 127
     d30:	75 e0       	ldi	r23, 0x05	; 5
     d32:	8b e1       	ldi	r24, 0x1B	; 27
     d34:	96 eb       	ldi	r25, 0xB6	; 182
     d36:	a7 d1       	rcall	.+846    	; 0x1086 <__divsf3>
     d38:	6b 01       	movw	r12, r22
     d3a:	7c 01       	movw	r14, r24
	Z4 = 2 * RTD_B;

	temp = Z2 + (Z3 * Rt);
     d3c:	a3 01       	movw	r20, r6
     d3e:	92 01       	movw	r18, r4
     d40:	c7 01       	movw	r24, r14
     d42:	b6 01       	movw	r22, r12
     d44:	ef d2       	rcall	.+1502   	; 0x1324 <__mulsf3>
     d46:	26 e1       	ldi	r18, 0x16	; 22
     d48:	33 e8       	ldi	r19, 0x83	; 131
     d4a:	43 e9       	ldi	r20, 0x93	; 147
     d4c:	57 e3       	ldi	r21, 0x37	; 55
     d4e:	33 d1       	rcall	.+614    	; 0xfb6 <__addsf3>
	temp = (sqrt(temp) + Z1) / Z4;
     d50:	50 d3       	rcall	.+1696   	; 0x13f2 <sqrt>
     d52:	22 e3       	ldi	r18, 0x32	; 50
     d54:	31 e1       	ldi	r19, 0x11	; 17
     d56:	40 e8       	ldi	r20, 0x80	; 128
     d58:	5b e3       	ldi	r21, 0x3B	; 59
     d5a:	2c d1       	rcall	.+600    	; 0xfb4 <__subsf3>
     d5c:	2f e7       	ldi	r18, 0x7F	; 127
     d5e:	35 e0       	ldi	r19, 0x05	; 5
     d60:	4b e9       	ldi	r20, 0x9B	; 155
     d62:	55 eb       	ldi	r21, 0xB5	; 181
     d64:	90 d1       	rcall	.+800    	; 0x1086 <__divsf3>
     d66:	06 2f       	mov	r16, r22
     d68:	17 2f       	mov	r17, r23
     d6a:	d8 2f       	mov	r29, r24
     d6c:	c9 2f       	mov	r28, r25
	
	if (temp >= 0) return temp;
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	a9 01       	movw	r20, r18
     d74:	d3 d2       	rcall	.+1446   	; 0x131c <__gesf2>
     d76:	88 23       	and	r24, r24
     d78:	0c f0       	brlt	.+2      	; 0xd7c <_ZN17Adafruit_MAX3186511temperatureEff+0x98>
     d7a:	60 c0       	rjmp	.+192    	; 0xe3c <_ZN17Adafruit_MAX3186511temperatureEff+0x158>

	// ugh.
	Rt /= RTDnominal;
     d7c:	a5 01       	movw	r20, r10
     d7e:	94 01       	movw	r18, r8
     d80:	c3 01       	movw	r24, r6
     d82:	b2 01       	movw	r22, r4
     d84:	80 d1       	rcall	.+768    	; 0x1086 <__divsf3>
	Rt *= 100;      // normalize to 100 ohm
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	48 ec       	ldi	r20, 0xC8	; 200
     d8c:	52 e4       	ldi	r21, 0x42	; 66
     d8e:	ca d2       	rcall	.+1428   	; 0x1324 <__mulsf3>
     d90:	6b 01       	movw	r12, r22
     d92:	7c 01       	movw	r14, r24

	float rpoly = Rt;

	temp = -242.02;
	temp += 2.2228 * rpoly;
     d94:	2b e5       	ldi	r18, 0x5B	; 91
     d96:	32 e4       	ldi	r19, 0x42	; 66
     d98:	4e e0       	ldi	r20, 0x0E	; 14
     d9a:	50 e4       	ldi	r21, 0x40	; 64
     d9c:	c3 d2       	rcall	.+1414   	; 0x1324 <__mulsf3>
     d9e:	2f e1       	ldi	r18, 0x1F	; 31
     da0:	35 e0       	ldi	r19, 0x05	; 5
     da2:	42 e7       	ldi	r20, 0x72	; 114
     da4:	53 ec       	ldi	r21, 0xC3	; 195
     da6:	07 d1       	rcall	.+526    	; 0xfb6 <__addsf3>
     da8:	2b 01       	movw	r4, r22
     daa:	3c 01       	movw	r6, r24
	rpoly *= Rt;  // square
     dac:	a7 01       	movw	r20, r14
     dae:	96 01       	movw	r18, r12
     db0:	c7 01       	movw	r24, r14
     db2:	b6 01       	movw	r22, r12
     db4:	b7 d2       	rcall	.+1390   	; 0x1324 <__mulsf3>
     db6:	4b 01       	movw	r8, r22
     db8:	5c 01       	movw	r10, r24
	temp += 2.5859e-3 * rpoly;
     dba:	24 e3       	ldi	r18, 0x34	; 52
     dbc:	38 e7       	ldi	r19, 0x78	; 120
     dbe:	49 e2       	ldi	r20, 0x29	; 41
     dc0:	5b e3       	ldi	r21, 0x3B	; 59
     dc2:	b0 d2       	rcall	.+1376   	; 0x1324 <__mulsf3>
     dc4:	a3 01       	movw	r20, r6
     dc6:	92 01       	movw	r18, r4
     dc8:	f6 d0       	rcall	.+492    	; 0xfb6 <__addsf3>
     dca:	2b 01       	movw	r4, r22
     dcc:	3c 01       	movw	r6, r24
	rpoly *= Rt;  // ^3
     dce:	a7 01       	movw	r20, r14
     dd0:	96 01       	movw	r18, r12
     dd2:	c5 01       	movw	r24, r10
     dd4:	b4 01       	movw	r22, r8
     dd6:	a6 d2       	rcall	.+1356   	; 0x1324 <__mulsf3>
     dd8:	4b 01       	movw	r8, r22
     dda:	5c 01       	movw	r10, r24
	temp -= 4.8260e-6 * rpoly;
     ddc:	26 e0       	ldi	r18, 0x06	; 6
     dde:	3f ee       	ldi	r19, 0xEF	; 239
     de0:	41 ea       	ldi	r20, 0xA1	; 161
     de2:	56 e3       	ldi	r21, 0x36	; 54
     de4:	9f d2       	rcall	.+1342   	; 0x1324 <__mulsf3>
     de6:	9b 01       	movw	r18, r22
     de8:	ac 01       	movw	r20, r24
     dea:	c3 01       	movw	r24, r6
     dec:	b2 01       	movw	r22, r4
     dee:	e2 d0       	rcall	.+452    	; 0xfb4 <__subsf3>
     df0:	2b 01       	movw	r4, r22
     df2:	3c 01       	movw	r6, r24
	rpoly *= Rt;  // ^4
     df4:	a7 01       	movw	r20, r14
     df6:	96 01       	movw	r18, r12
     df8:	c5 01       	movw	r24, r10
     dfa:	b4 01       	movw	r22, r8
     dfc:	93 d2       	rcall	.+1318   	; 0x1324 <__mulsf3>
     dfe:	4b 01       	movw	r8, r22
     e00:	5c 01       	movw	r10, r24
	temp -= 2.8183e-8 * rpoly;
     e02:	23 e1       	ldi	r18, 0x13	; 19
     e04:	37 e1       	ldi	r19, 0x17	; 23
     e06:	42 ef       	ldi	r20, 0xF2	; 242
     e08:	52 e3       	ldi	r21, 0x32	; 50
     e0a:	8c d2       	rcall	.+1304   	; 0x1324 <__mulsf3>
     e0c:	9b 01       	movw	r18, r22
     e0e:	ac 01       	movw	r20, r24
     e10:	c3 01       	movw	r24, r6
     e12:	b2 01       	movw	r22, r4
     e14:	cf d0       	rcall	.+414    	; 0xfb4 <__subsf3>
     e16:	2b 01       	movw	r4, r22
     e18:	3c 01       	movw	r6, r24
	rpoly *= Rt;  // ^5
     e1a:	a7 01       	movw	r20, r14
     e1c:	96 01       	movw	r18, r12
     e1e:	c5 01       	movw	r24, r10
     e20:	b4 01       	movw	r22, r8
     e22:	80 d2       	rcall	.+1280   	; 0x1324 <__mulsf3>
	temp += 1.5243e-10 * rpoly;
     e24:	2b e3       	ldi	r18, 0x3B	; 59
     e26:	39 e9       	ldi	r19, 0x99	; 153
     e28:	47 e2       	ldi	r20, 0x27	; 39
     e2a:	5f e2       	ldi	r21, 0x2F	; 47
     e2c:	7b d2       	rcall	.+1270   	; 0x1324 <__mulsf3>
     e2e:	a3 01       	movw	r20, r6
     e30:	92 01       	movw	r18, r4
     e32:	c1 d0       	rcall	.+386    	; 0xfb6 <__addsf3>

	return temp;
     e34:	06 2f       	mov	r16, r22
     e36:	17 2f       	mov	r17, r23
     e38:	d8 2f       	mov	r29, r24
     e3a:	c9 2f       	mov	r28, r25
}
     e3c:	60 2f       	mov	r22, r16
     e3e:	71 2f       	mov	r23, r17
     e40:	8d 2f       	mov	r24, r29
     e42:	9c 2f       	mov	r25, r28
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	ff 90       	pop	r15
     e4e:	ef 90       	pop	r14
     e50:	df 90       	pop	r13
     e52:	cf 90       	pop	r12
     e54:	bf 90       	pop	r11
     e56:	af 90       	pop	r10
     e58:	9f 90       	pop	r9
     e5a:	8f 90       	pop	r8
     e5c:	7f 90       	pop	r7
     e5e:	6f 90       	pop	r6
     e60:	5f 90       	pop	r5
     e62:	4f 90       	pop	r4
     e64:	08 95       	ret

00000e66 <_Z8spi_initv>:

#include <avr/io.h>

void spi_init() {
	// SPI Enable, Master mode
	SPCR |= (1 << SPE) | (1 << MSTR)| (1<<SPR1);
     e66:	8c b5       	in	r24, 0x2c	; 44
     e68:	82 65       	ori	r24, 0x52	; 82
     e6a:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ ((1 << SPR0) | (1<< CPHA));
     e6c:	8c b5       	in	r24, 0x2c	; 44
     e6e:	8a 7f       	andi	r24, 0xFA	; 250
     e70:	8c bd       	out	0x2c, r24	; 44
	
	// SCK MOSI CS/LOAD/SS
	DDRB |= (1 << PIN_SCK) | (1 << PIN_MOSI) ;
     e72:	84 b1       	in	r24, 0x04	; 4
     e74:	88 62       	ori	r24, 0x28	; 40
     e76:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1  << PIN_SS);
     e78:	22 9a       	sbi	0x04, 2	; 4
	
	//slave pins
	DDR(DISPLAY_I_PORT) |= (1 << DISPLAY_I_PIN) | (1 << DISPLAY_II_PIN);
     e7a:	8a b1       	in	r24, 0x0a	; 10
     e7c:	80 63       	ori	r24, 0x30	; 48
     e7e:	8a b9       	out	0x0a, r24	; 10
	
	DISPLAY_I_PORT |= (1 << DISPLAY_I_PIN); 
     e80:	5d 9a       	sbi	0x0b, 5	; 11
	DISPLAY_II_PORT |= (1 << DISPLAY_II_PIN);
     e82:	5c 9a       	sbi	0x0b, 4	; 11
     e84:	08 95       	ret

00000e86 <_Z11spiSendBytec>:
}

void spiSendByte (char databyte)
{
	// Copy data into the SPI data register
	SPDR = databyte;
     e86:	8e bd       	out	0x2e, r24	; 46
	// Wait until transfer is complete
	while (!(SPSR & (1 << SPIF)));
     e88:	0d b4       	in	r0, 0x2d	; 45
     e8a:	07 fe       	sbrs	r0, 7
     e8c:	fd cf       	rjmp	.-6      	; 0xe88 <_Z11spiSendBytec+0x2>
}
     e8e:	08 95       	ret

00000e90 <_ZN7max721911MAX7219_setEiii>:
 *  Author: swain
 */ 
#include "max7219.h"
#include "spiD.h"

void max7219::MAX7219_set(int numm, int ii, int jj) {
     e90:	fc 01       	movw	r30, r24
	num = numm;
     e92:	71 83       	std	Z+1, r23	; 0x01
     e94:	60 83       	st	Z, r22
	digits1 = ii;
     e96:	53 83       	std	Z+3, r21	; 0x03
     e98:	42 83       	std	Z+2, r20	; 0x02
	digits2 = jj;
     e9a:	35 83       	std	Z+5, r19	; 0x05
     e9c:	24 83       	std	Z+4, r18	; 0x04
     e9e:	08 95       	ret

00000ea0 <_ZN7max721917MAX7219_writeDataEcc>:
	max7219::MAX7219_writeData(MAX7219_MODE_INTENSITY, 0x0f);
	max7219::MAX7219_writeData(MAX7219_MODE_POWER, ON);
}

void max7219::MAX7219_writeData(char data_register, char data)
{
     ea0:	1f 93       	push	r17
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	ec 01       	movw	r28, r24
     ea8:	14 2f       	mov	r17, r20
	
	switch(max7219::num){
     eaa:	28 81       	ld	r18, Y
     eac:	39 81       	ldd	r19, Y+1	; 0x01
     eae:	21 15       	cp	r18, r1
     eb0:	31 05       	cpc	r19, r1
     eb2:	21 f0       	breq	.+8      	; 0xebc <_ZN7max721917MAX7219_writeDataEcc+0x1c>
     eb4:	21 30       	cpi	r18, 0x01	; 1
     eb6:	31 05       	cpc	r19, r1
     eb8:	19 f0       	breq	.+6      	; 0xec0 <_ZN7max721917MAX7219_writeDataEcc+0x20>
     eba:	03 c0       	rjmp	.+6      	; 0xec2 <_ZN7max721917MAX7219_writeDataEcc+0x22>
		case 0:
		MAX7219_LOAD_ON_1(0);
     ebc:	5d 98       	cbi	0x0b, 5	; 11
		break;
     ebe:	01 c0       	rjmp	.+2      	; 0xec2 <_ZN7max721917MAX7219_writeDataEcc+0x22>
		case 1:
		MAX7219_LOAD_ON_2(1);
     ec0:	5c 98       	cbi	0x0b, 4	; 11
		break;
	}		
		
	// Send the register where the data will be stored
	spiSendByte(data_register);
     ec2:	86 2f       	mov	r24, r22
     ec4:	e0 df       	rcall	.-64     	; 0xe86 <_Z11spiSendBytec>
	// Send the data to be stored
	spiSendByte(data);
     ec6:	81 2f       	mov	r24, r17
     ec8:	de df       	rcall	.-68     	; 0xe86 <_Z11spiSendBytec>
	
	switch(max7219::num){
     eca:	88 81       	ld	r24, Y
     ecc:	99 81       	ldd	r25, Y+1	; 0x01
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	19 f0       	breq	.+6      	; 0xed8 <_ZN7max721917MAX7219_writeDataEcc+0x38>
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	19 f0       	breq	.+6      	; 0xedc <_ZN7max721917MAX7219_writeDataEcc+0x3c>
     ed6:	03 c0       	rjmp	.+6      	; 0xede <_ZN7max721917MAX7219_writeDataEcc+0x3e>
		case 0:
		MAX7219_LOAD_OFF_1(0);
     ed8:	5d 9a       	sbi	0x0b, 5	; 11
		break;
     eda:	01 c0       	rjmp	.+2      	; 0xede <_ZN7max721917MAX7219_writeDataEcc+0x3e>
		case 1:
		MAX7219_LOAD_OFF_2(1);
     edc:	5c 9a       	sbi	0x0b, 4	; 11
		break;
	}
	
}
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	1f 91       	pop	r17
     ee4:	08 95       	ret

00000ee6 <_ZN7max721912MAX7219_initEv>:
	num = numm;
	digits1 = ii;
	digits2 = jj;
}

void max7219::MAX7219_init() {
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	ec 01       	movw	r28, r24
	spi_init();
     eec:	bc df       	rcall	.-136    	; 0xe66 <_Z8spi_initv>
	// Decode mode to "Font Code-B"
	max7219::MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
     eee:	4f ef       	ldi	r20, 0xFF	; 255
     ef0:	69 e0       	ldi	r22, 0x09	; 9
     ef2:	ce 01       	movw	r24, r28
     ef4:	d5 df       	rcall	.-86     	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(MAX7219_MODE_TEST,0);
     ef6:	40 e0       	ldi	r20, 0x00	; 0
     ef8:	6f e0       	ldi	r22, 0x0F	; 15
     efa:	ce 01       	movw	r24, r28
     efc:	d1 df       	rcall	.-94     	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
	// Scan limit runs from 0.
	max7219::MAX7219_writeData(MAX7219_MODE_SCAN_LIMIT, 7); //7 or 8?
     efe:	47 e0       	ldi	r20, 0x07	; 7
     f00:	6b e0       	ldi	r22, 0x0B	; 11
     f02:	ce 01       	movw	r24, r28
     f04:	cd df       	rcall	.-102    	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(MAX7219_MODE_INTENSITY, 0x0f);
     f06:	4f e0       	ldi	r20, 0x0F	; 15
     f08:	6a e0       	ldi	r22, 0x0A	; 10
     f0a:	ce 01       	movw	r24, r28
     f0c:	c9 df       	rcall	.-110    	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(MAX7219_MODE_POWER, ON);
     f0e:	41 e0       	ldi	r20, 0x01	; 1
     f10:	6c e0       	ldi	r22, 0x0C	; 12
     f12:	ce 01       	movw	r24, r28
     f14:	c5 df       	rcall	.-118    	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
}
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	08 95       	ret

00000f1c <_ZN7max721920MAX7219_clearDisplayEv>:
	}
	
}

void max7219::MAX7219_clearDisplay()
{
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	cf 93       	push	r28
     f22:	8c 01       	movw	r16, r24
	//char i = digitsInUse;
	char i = max7219::digits1 + max7219::digits2 ;
     f24:	fc 01       	movw	r30, r24
     f26:	c4 81       	ldd	r28, Z+4	; 0x04
     f28:	92 81       	ldd	r25, Z+2	; 0x02
     f2a:	c9 0f       	add	r28, r25
	// Loop until 0, but don't run for zero
	do {
		// Set each display in use to blank
		max7219::MAX7219_writeData(i, MAX7219_CHAR_BLANK);
     f2c:	4f e0       	ldi	r20, 0x0F	; 15
     f2e:	6c 2f       	mov	r22, r28
     f30:	c8 01       	movw	r24, r16
     f32:	b6 df       	rcall	.-148    	; 0xea0 <_ZN7max721917MAX7219_writeDataEcc>
void max7219::MAX7219_clearDisplay()
{
	//char i = digitsInUse;
	char i = max7219::digits1 + max7219::digits2 ;
	// Loop until 0, but don't run for zero
	do {
     f34:	c1 50       	subi	r28, 0x01	; 1
     f36:	d1 f7       	brne	.-12     	; 0xf2c <_ZN7max721920MAX7219_clearDisplayEv+0x10>
		// Set each display in use to blank
		max7219::MAX7219_writeData(i, MAX7219_CHAR_BLANK);
	} while (--i);
}
     f38:	cf 91       	pop	r28
     f3a:	1f 91       	pop	r17
     f3c:	0f 91       	pop	r16
     f3e:	08 95       	ret

00000f40 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
  
    //pinMode(SS, OUTPUT);
	DDRB |= (1 << PINB2);
     f40:	22 9a       	sbi	0x04, 2	; 4
    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
     f42:	8c b5       	in	r24, 0x2c	; 44
     f44:	80 61       	ori	r24, 0x10	; 16
     f46:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
     f48:	8c b5       	in	r24, 0x2c	; 44
     f4a:	80 64       	ori	r24, 0x40	; 64
     f4c:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ ((1 << SPR1) | (1 << SPR0));
     f4e:	8c b5       	in	r24, 0x2c	; 44
     f50:	8c 7f       	andi	r24, 0xFC	; 252
     f52:	8c bd       	out	0x2c, r24	; 44
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
	
    //pinMode(SCK, OUTPUT);
	DDRB |= (1 << PINB5);
     f54:	25 9a       	sbi	0x04, 5	; 4
    //pinMode(MOSI, OUTPUT);
	DDRB |= (1 << PINB3);
     f56:	23 9a       	sbi	0x04, 3	; 4
	
	DDR(TEMP_I_PORT ) |= (1 << TEMP_I_PIN ) | (1 << TEMP_I_PIN );
     f58:	21 9a       	sbi	0x04, 1	; 4
	TEMP_I_PORT  |= (1 << TEMP_I_PIN ) | (1 << TEMP_I_PIN );
     f5a:	29 9a       	sbi	0x05, 1	; 5
     f5c:	08 95       	ret

00000f5e <_ZN6Timerr11setTimerNumEi>:
	SET_COMPARE(1, A);
}

void Timerr::resetTimer() {
	
	TCNT1 = 0;
     f5e:	fc 01       	movw	r30, r24
     f60:	71 83       	std	Z+1, r23	; 0x01
     f62:	60 83       	st	Z, r22
     f64:	08 95       	ret

00000f66 <_ZN6Timerr19setCompareInterruptEv>:
     f66:	ef e6       	ldi	r30, 0x6F	; 111
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	82 60       	ori	r24, 0x02	; 2
     f6e:	80 83       	st	Z, r24
     f70:	08 95       	ret

00000f72 <_ZN6Timerr16startCustomTimerEi>:
	
}
void Timerr::startCustomTimer(int milli_sec) {
	
		int ocr = (15.625 * milli_sec);
     f72:	07 2e       	mov	r0, r23
     f74:	00 0c       	add	r0, r0
     f76:	88 0b       	sbc	r24, r24
     f78:	99 0b       	sbc	r25, r25
     f7a:	20 d1       	rcall	.+576    	; 0x11bc <__floatsisf>
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	4a e7       	ldi	r20, 0x7A	; 122
     f82:	51 e4       	ldi	r21, 0x41	; 65
     f84:	cf d1       	rcall	.+926    	; 0x1324 <__mulsf3>
     f86:	e7 d0       	rcall	.+462    	; 0x1156 <__fixsfsi>
		OCR1A = ocr;
     f88:	70 93 89 00 	sts	0x0089, r23
     f8c:	60 93 88 00 	sts	0x0088, r22
		START_TIMERR(1,0,2); //for proteus use 5,0,1 and for real life use 5,0,2
     f90:	e1 e8       	ldi	r30, 0x81	; 129
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	85 60       	ori	r24, 0x05	; 5
     f98:	80 83       	st	Z, r24
     f9a:	08 95       	ret

00000f9c <_Z9initUART0v>:
char buffer=0,buffer1=0,buffer2=0;

void initUART0(void)
{
	//set baud rate
	UBRR0H=(MYUBRR0)>>8;
     f9c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L=MYUBRR0;
     fa0:	87 e6       	ldi	r24, 0x67	; 103
     fa2:	80 93 c4 00 	sts	0x00C4, r24

	//Enable Receiver and Transmitter
	UCSR0B = ((1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0));
     fa6:	88 e9       	ldi	r24, 0x98	; 152
     fa8:	80 93 c1 00 	sts	0x00C1, r24
	
	//set frame format
	UCSR0C=((1<<UCSZ00)|(1<<UCSZ01));
     fac:	86 e0       	ldi	r24, 0x06	; 6
     fae:	80 93 c2 00 	sts	0x00C2, r24
     fb2:	08 95       	ret

00000fb4 <__subsf3>:
     fb4:	50 58       	subi	r21, 0x80	; 128

00000fb6 <__addsf3>:
     fb6:	bb 27       	eor	r27, r27
     fb8:	aa 27       	eor	r26, r26
     fba:	0e d0       	rcall	.+28     	; 0xfd8 <__addsf3x>
     fbc:	75 c1       	rjmp	.+746    	; 0x12a8 <__fp_round>
     fbe:	66 d1       	rcall	.+716    	; 0x128c <__fp_pscA>
     fc0:	30 f0       	brcs	.+12     	; 0xfce <__addsf3+0x18>
     fc2:	6b d1       	rcall	.+726    	; 0x129a <__fp_pscB>
     fc4:	20 f0       	brcs	.+8      	; 0xfce <__addsf3+0x18>
     fc6:	31 f4       	brne	.+12     	; 0xfd4 <__addsf3+0x1e>
     fc8:	9f 3f       	cpi	r25, 0xFF	; 255
     fca:	11 f4       	brne	.+4      	; 0xfd0 <__addsf3+0x1a>
     fcc:	1e f4       	brtc	.+6      	; 0xfd4 <__addsf3+0x1e>
     fce:	5b c1       	rjmp	.+694    	; 0x1286 <__fp_nan>
     fd0:	0e f4       	brtc	.+2      	; 0xfd4 <__addsf3+0x1e>
     fd2:	e0 95       	com	r30
     fd4:	e7 fb       	bst	r30, 7
     fd6:	51 c1       	rjmp	.+674    	; 0x127a <__fp_inf>

00000fd8 <__addsf3x>:
     fd8:	e9 2f       	mov	r30, r25
     fda:	77 d1       	rcall	.+750    	; 0x12ca <__fp_split3>
     fdc:	80 f3       	brcs	.-32     	; 0xfbe <__addsf3+0x8>
     fde:	ba 17       	cp	r27, r26
     fe0:	62 07       	cpc	r22, r18
     fe2:	73 07       	cpc	r23, r19
     fe4:	84 07       	cpc	r24, r20
     fe6:	95 07       	cpc	r25, r21
     fe8:	18 f0       	brcs	.+6      	; 0xff0 <__addsf3x+0x18>
     fea:	71 f4       	brne	.+28     	; 0x1008 <__addsf3x+0x30>
     fec:	9e f5       	brtc	.+102    	; 0x1054 <__addsf3x+0x7c>
     fee:	8f c1       	rjmp	.+798    	; 0x130e <__fp_zero>
     ff0:	0e f4       	brtc	.+2      	; 0xff4 <__addsf3x+0x1c>
     ff2:	e0 95       	com	r30
     ff4:	0b 2e       	mov	r0, r27
     ff6:	ba 2f       	mov	r27, r26
     ff8:	a0 2d       	mov	r26, r0
     ffa:	0b 01       	movw	r0, r22
     ffc:	b9 01       	movw	r22, r18
     ffe:	90 01       	movw	r18, r0
    1000:	0c 01       	movw	r0, r24
    1002:	ca 01       	movw	r24, r20
    1004:	a0 01       	movw	r20, r0
    1006:	11 24       	eor	r1, r1
    1008:	ff 27       	eor	r31, r31
    100a:	59 1b       	sub	r21, r25
    100c:	99 f0       	breq	.+38     	; 0x1034 <__addsf3x+0x5c>
    100e:	59 3f       	cpi	r21, 0xF9	; 249
    1010:	50 f4       	brcc	.+20     	; 0x1026 <__addsf3x+0x4e>
    1012:	50 3e       	cpi	r21, 0xE0	; 224
    1014:	68 f1       	brcs	.+90     	; 0x1070 <__addsf3x+0x98>
    1016:	1a 16       	cp	r1, r26
    1018:	f0 40       	sbci	r31, 0x00	; 0
    101a:	a2 2f       	mov	r26, r18
    101c:	23 2f       	mov	r18, r19
    101e:	34 2f       	mov	r19, r20
    1020:	44 27       	eor	r20, r20
    1022:	58 5f       	subi	r21, 0xF8	; 248
    1024:	f3 cf       	rjmp	.-26     	; 0x100c <__addsf3x+0x34>
    1026:	46 95       	lsr	r20
    1028:	37 95       	ror	r19
    102a:	27 95       	ror	r18
    102c:	a7 95       	ror	r26
    102e:	f0 40       	sbci	r31, 0x00	; 0
    1030:	53 95       	inc	r21
    1032:	c9 f7       	brne	.-14     	; 0x1026 <__addsf3x+0x4e>
    1034:	7e f4       	brtc	.+30     	; 0x1054 <__addsf3x+0x7c>
    1036:	1f 16       	cp	r1, r31
    1038:	ba 0b       	sbc	r27, r26
    103a:	62 0b       	sbc	r22, r18
    103c:	73 0b       	sbc	r23, r19
    103e:	84 0b       	sbc	r24, r20
    1040:	ba f0       	brmi	.+46     	; 0x1070 <__addsf3x+0x98>
    1042:	91 50       	subi	r25, 0x01	; 1
    1044:	a1 f0       	breq	.+40     	; 0x106e <__addsf3x+0x96>
    1046:	ff 0f       	add	r31, r31
    1048:	bb 1f       	adc	r27, r27
    104a:	66 1f       	adc	r22, r22
    104c:	77 1f       	adc	r23, r23
    104e:	88 1f       	adc	r24, r24
    1050:	c2 f7       	brpl	.-16     	; 0x1042 <__addsf3x+0x6a>
    1052:	0e c0       	rjmp	.+28     	; 0x1070 <__addsf3x+0x98>
    1054:	ba 0f       	add	r27, r26
    1056:	62 1f       	adc	r22, r18
    1058:	73 1f       	adc	r23, r19
    105a:	84 1f       	adc	r24, r20
    105c:	48 f4       	brcc	.+18     	; 0x1070 <__addsf3x+0x98>
    105e:	87 95       	ror	r24
    1060:	77 95       	ror	r23
    1062:	67 95       	ror	r22
    1064:	b7 95       	ror	r27
    1066:	f7 95       	ror	r31
    1068:	9e 3f       	cpi	r25, 0xFE	; 254
    106a:	08 f0       	brcs	.+2      	; 0x106e <__addsf3x+0x96>
    106c:	b3 cf       	rjmp	.-154    	; 0xfd4 <__addsf3+0x1e>
    106e:	93 95       	inc	r25
    1070:	88 0f       	add	r24, r24
    1072:	08 f0       	brcs	.+2      	; 0x1076 <__addsf3x+0x9e>
    1074:	99 27       	eor	r25, r25
    1076:	ee 0f       	add	r30, r30
    1078:	97 95       	ror	r25
    107a:	87 95       	ror	r24
    107c:	08 95       	ret

0000107e <__cmpsf2>:
    107e:	d9 d0       	rcall	.+434    	; 0x1232 <__fp_cmp>
    1080:	08 f4       	brcc	.+2      	; 0x1084 <__cmpsf2+0x6>
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	08 95       	ret

00001086 <__divsf3>:
    1086:	0c d0       	rcall	.+24     	; 0x10a0 <__divsf3x>
    1088:	0f c1       	rjmp	.+542    	; 0x12a8 <__fp_round>
    108a:	07 d1       	rcall	.+526    	; 0x129a <__fp_pscB>
    108c:	40 f0       	brcs	.+16     	; 0x109e <__divsf3+0x18>
    108e:	fe d0       	rcall	.+508    	; 0x128c <__fp_pscA>
    1090:	30 f0       	brcs	.+12     	; 0x109e <__divsf3+0x18>
    1092:	21 f4       	brne	.+8      	; 0x109c <__divsf3+0x16>
    1094:	5f 3f       	cpi	r21, 0xFF	; 255
    1096:	19 f0       	breq	.+6      	; 0x109e <__divsf3+0x18>
    1098:	f0 c0       	rjmp	.+480    	; 0x127a <__fp_inf>
    109a:	51 11       	cpse	r21, r1
    109c:	39 c1       	rjmp	.+626    	; 0x1310 <__fp_szero>
    109e:	f3 c0       	rjmp	.+486    	; 0x1286 <__fp_nan>

000010a0 <__divsf3x>:
    10a0:	14 d1       	rcall	.+552    	; 0x12ca <__fp_split3>
    10a2:	98 f3       	brcs	.-26     	; 0x108a <__divsf3+0x4>

000010a4 <__divsf3_pse>:
    10a4:	99 23       	and	r25, r25
    10a6:	c9 f3       	breq	.-14     	; 0x109a <__divsf3+0x14>
    10a8:	55 23       	and	r21, r21
    10aa:	b1 f3       	breq	.-20     	; 0x1098 <__divsf3+0x12>
    10ac:	95 1b       	sub	r25, r21
    10ae:	55 0b       	sbc	r21, r21
    10b0:	bb 27       	eor	r27, r27
    10b2:	aa 27       	eor	r26, r26
    10b4:	62 17       	cp	r22, r18
    10b6:	73 07       	cpc	r23, r19
    10b8:	84 07       	cpc	r24, r20
    10ba:	38 f0       	brcs	.+14     	; 0x10ca <__divsf3_pse+0x26>
    10bc:	9f 5f       	subi	r25, 0xFF	; 255
    10be:	5f 4f       	sbci	r21, 0xFF	; 255
    10c0:	22 0f       	add	r18, r18
    10c2:	33 1f       	adc	r19, r19
    10c4:	44 1f       	adc	r20, r20
    10c6:	aa 1f       	adc	r26, r26
    10c8:	a9 f3       	breq	.-22     	; 0x10b4 <__divsf3_pse+0x10>
    10ca:	33 d0       	rcall	.+102    	; 0x1132 <__divsf3_pse+0x8e>
    10cc:	0e 2e       	mov	r0, r30
    10ce:	3a f0       	brmi	.+14     	; 0x10de <__divsf3_pse+0x3a>
    10d0:	e0 e8       	ldi	r30, 0x80	; 128
    10d2:	30 d0       	rcall	.+96     	; 0x1134 <__divsf3_pse+0x90>
    10d4:	91 50       	subi	r25, 0x01	; 1
    10d6:	50 40       	sbci	r21, 0x00	; 0
    10d8:	e6 95       	lsr	r30
    10da:	00 1c       	adc	r0, r0
    10dc:	ca f7       	brpl	.-14     	; 0x10d0 <__divsf3_pse+0x2c>
    10de:	29 d0       	rcall	.+82     	; 0x1132 <__divsf3_pse+0x8e>
    10e0:	fe 2f       	mov	r31, r30
    10e2:	27 d0       	rcall	.+78     	; 0x1132 <__divsf3_pse+0x8e>
    10e4:	66 0f       	add	r22, r22
    10e6:	77 1f       	adc	r23, r23
    10e8:	88 1f       	adc	r24, r24
    10ea:	bb 1f       	adc	r27, r27
    10ec:	26 17       	cp	r18, r22
    10ee:	37 07       	cpc	r19, r23
    10f0:	48 07       	cpc	r20, r24
    10f2:	ab 07       	cpc	r26, r27
    10f4:	b0 e8       	ldi	r27, 0x80	; 128
    10f6:	09 f0       	breq	.+2      	; 0x10fa <__divsf3_pse+0x56>
    10f8:	bb 0b       	sbc	r27, r27
    10fa:	80 2d       	mov	r24, r0
    10fc:	bf 01       	movw	r22, r30
    10fe:	ff 27       	eor	r31, r31
    1100:	93 58       	subi	r25, 0x83	; 131
    1102:	5f 4f       	sbci	r21, 0xFF	; 255
    1104:	2a f0       	brmi	.+10     	; 0x1110 <__divsf3_pse+0x6c>
    1106:	9e 3f       	cpi	r25, 0xFE	; 254
    1108:	51 05       	cpc	r21, r1
    110a:	68 f0       	brcs	.+26     	; 0x1126 <__divsf3_pse+0x82>
    110c:	b6 c0       	rjmp	.+364    	; 0x127a <__fp_inf>
    110e:	00 c1       	rjmp	.+512    	; 0x1310 <__fp_szero>
    1110:	5f 3f       	cpi	r21, 0xFF	; 255
    1112:	ec f3       	brlt	.-6      	; 0x110e <__divsf3_pse+0x6a>
    1114:	98 3e       	cpi	r25, 0xE8	; 232
    1116:	dc f3       	brlt	.-10     	; 0x110e <__divsf3_pse+0x6a>
    1118:	86 95       	lsr	r24
    111a:	77 95       	ror	r23
    111c:	67 95       	ror	r22
    111e:	b7 95       	ror	r27
    1120:	f7 95       	ror	r31
    1122:	9f 5f       	subi	r25, 0xFF	; 255
    1124:	c9 f7       	brne	.-14     	; 0x1118 <__divsf3_pse+0x74>
    1126:	88 0f       	add	r24, r24
    1128:	91 1d       	adc	r25, r1
    112a:	96 95       	lsr	r25
    112c:	87 95       	ror	r24
    112e:	97 f9       	bld	r25, 7
    1130:	08 95       	ret
    1132:	e1 e0       	ldi	r30, 0x01	; 1
    1134:	66 0f       	add	r22, r22
    1136:	77 1f       	adc	r23, r23
    1138:	88 1f       	adc	r24, r24
    113a:	bb 1f       	adc	r27, r27
    113c:	62 17       	cp	r22, r18
    113e:	73 07       	cpc	r23, r19
    1140:	84 07       	cpc	r24, r20
    1142:	ba 07       	cpc	r27, r26
    1144:	20 f0       	brcs	.+8      	; 0x114e <__divsf3_pse+0xaa>
    1146:	62 1b       	sub	r22, r18
    1148:	73 0b       	sbc	r23, r19
    114a:	84 0b       	sbc	r24, r20
    114c:	ba 0b       	sbc	r27, r26
    114e:	ee 1f       	adc	r30, r30
    1150:	88 f7       	brcc	.-30     	; 0x1134 <__divsf3_pse+0x90>
    1152:	e0 95       	com	r30
    1154:	08 95       	ret

00001156 <__fixsfsi>:
    1156:	04 d0       	rcall	.+8      	; 0x1160 <__fixunssfsi>
    1158:	68 94       	set
    115a:	b1 11       	cpse	r27, r1
    115c:	d9 c0       	rjmp	.+434    	; 0x1310 <__fp_szero>
    115e:	08 95       	ret

00001160 <__fixunssfsi>:
    1160:	bc d0       	rcall	.+376    	; 0x12da <__fp_splitA>
    1162:	88 f0       	brcs	.+34     	; 0x1186 <__fixunssfsi+0x26>
    1164:	9f 57       	subi	r25, 0x7F	; 127
    1166:	90 f0       	brcs	.+36     	; 0x118c <__fixunssfsi+0x2c>
    1168:	b9 2f       	mov	r27, r25
    116a:	99 27       	eor	r25, r25
    116c:	b7 51       	subi	r27, 0x17	; 23
    116e:	a0 f0       	brcs	.+40     	; 0x1198 <__fixunssfsi+0x38>
    1170:	d1 f0       	breq	.+52     	; 0x11a6 <__fixunssfsi+0x46>
    1172:	66 0f       	add	r22, r22
    1174:	77 1f       	adc	r23, r23
    1176:	88 1f       	adc	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	1a f0       	brmi	.+6      	; 0x1182 <__fixunssfsi+0x22>
    117c:	ba 95       	dec	r27
    117e:	c9 f7       	brne	.-14     	; 0x1172 <__fixunssfsi+0x12>
    1180:	12 c0       	rjmp	.+36     	; 0x11a6 <__fixunssfsi+0x46>
    1182:	b1 30       	cpi	r27, 0x01	; 1
    1184:	81 f0       	breq	.+32     	; 0x11a6 <__fixunssfsi+0x46>
    1186:	c3 d0       	rcall	.+390    	; 0x130e <__fp_zero>
    1188:	b1 e0       	ldi	r27, 0x01	; 1
    118a:	08 95       	ret
    118c:	c0 c0       	rjmp	.+384    	; 0x130e <__fp_zero>
    118e:	67 2f       	mov	r22, r23
    1190:	78 2f       	mov	r23, r24
    1192:	88 27       	eor	r24, r24
    1194:	b8 5f       	subi	r27, 0xF8	; 248
    1196:	39 f0       	breq	.+14     	; 0x11a6 <__fixunssfsi+0x46>
    1198:	b9 3f       	cpi	r27, 0xF9	; 249
    119a:	cc f3       	brlt	.-14     	; 0x118e <__fixunssfsi+0x2e>
    119c:	86 95       	lsr	r24
    119e:	77 95       	ror	r23
    11a0:	67 95       	ror	r22
    11a2:	b3 95       	inc	r27
    11a4:	d9 f7       	brne	.-10     	; 0x119c <__fixunssfsi+0x3c>
    11a6:	3e f4       	brtc	.+14     	; 0x11b6 <__fixunssfsi+0x56>
    11a8:	90 95       	com	r25
    11aa:	80 95       	com	r24
    11ac:	70 95       	com	r23
    11ae:	61 95       	neg	r22
    11b0:	7f 4f       	sbci	r23, 0xFF	; 255
    11b2:	8f 4f       	sbci	r24, 0xFF	; 255
    11b4:	9f 4f       	sbci	r25, 0xFF	; 255
    11b6:	08 95       	ret

000011b8 <__floatunsisf>:
    11b8:	e8 94       	clt
    11ba:	09 c0       	rjmp	.+18     	; 0x11ce <__floatsisf+0x12>

000011bc <__floatsisf>:
    11bc:	97 fb       	bst	r25, 7
    11be:	3e f4       	brtc	.+14     	; 0x11ce <__floatsisf+0x12>
    11c0:	90 95       	com	r25
    11c2:	80 95       	com	r24
    11c4:	70 95       	com	r23
    11c6:	61 95       	neg	r22
    11c8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ca:	8f 4f       	sbci	r24, 0xFF	; 255
    11cc:	9f 4f       	sbci	r25, 0xFF	; 255
    11ce:	99 23       	and	r25, r25
    11d0:	a9 f0       	breq	.+42     	; 0x11fc <__floatsisf+0x40>
    11d2:	f9 2f       	mov	r31, r25
    11d4:	96 e9       	ldi	r25, 0x96	; 150
    11d6:	bb 27       	eor	r27, r27
    11d8:	93 95       	inc	r25
    11da:	f6 95       	lsr	r31
    11dc:	87 95       	ror	r24
    11de:	77 95       	ror	r23
    11e0:	67 95       	ror	r22
    11e2:	b7 95       	ror	r27
    11e4:	f1 11       	cpse	r31, r1
    11e6:	f8 cf       	rjmp	.-16     	; 0x11d8 <__floatsisf+0x1c>
    11e8:	fa f4       	brpl	.+62     	; 0x1228 <__floatsisf+0x6c>
    11ea:	bb 0f       	add	r27, r27
    11ec:	11 f4       	brne	.+4      	; 0x11f2 <__floatsisf+0x36>
    11ee:	60 ff       	sbrs	r22, 0
    11f0:	1b c0       	rjmp	.+54     	; 0x1228 <__floatsisf+0x6c>
    11f2:	6f 5f       	subi	r22, 0xFF	; 255
    11f4:	7f 4f       	sbci	r23, 0xFF	; 255
    11f6:	8f 4f       	sbci	r24, 0xFF	; 255
    11f8:	9f 4f       	sbci	r25, 0xFF	; 255
    11fa:	16 c0       	rjmp	.+44     	; 0x1228 <__floatsisf+0x6c>
    11fc:	88 23       	and	r24, r24
    11fe:	11 f0       	breq	.+4      	; 0x1204 <__floatsisf+0x48>
    1200:	96 e9       	ldi	r25, 0x96	; 150
    1202:	11 c0       	rjmp	.+34     	; 0x1226 <__floatsisf+0x6a>
    1204:	77 23       	and	r23, r23
    1206:	21 f0       	breq	.+8      	; 0x1210 <__floatsisf+0x54>
    1208:	9e e8       	ldi	r25, 0x8E	; 142
    120a:	87 2f       	mov	r24, r23
    120c:	76 2f       	mov	r23, r22
    120e:	05 c0       	rjmp	.+10     	; 0x121a <__floatsisf+0x5e>
    1210:	66 23       	and	r22, r22
    1212:	71 f0       	breq	.+28     	; 0x1230 <__floatsisf+0x74>
    1214:	96 e8       	ldi	r25, 0x86	; 134
    1216:	86 2f       	mov	r24, r22
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	2a f0       	brmi	.+10     	; 0x1228 <__floatsisf+0x6c>
    121e:	9a 95       	dec	r25
    1220:	66 0f       	add	r22, r22
    1222:	77 1f       	adc	r23, r23
    1224:	88 1f       	adc	r24, r24
    1226:	da f7       	brpl	.-10     	; 0x121e <__floatsisf+0x62>
    1228:	88 0f       	add	r24, r24
    122a:	96 95       	lsr	r25
    122c:	87 95       	ror	r24
    122e:	97 f9       	bld	r25, 7
    1230:	08 95       	ret

00001232 <__fp_cmp>:
    1232:	99 0f       	add	r25, r25
    1234:	00 08       	sbc	r0, r0
    1236:	55 0f       	add	r21, r21
    1238:	aa 0b       	sbc	r26, r26
    123a:	e0 e8       	ldi	r30, 0x80	; 128
    123c:	fe ef       	ldi	r31, 0xFE	; 254
    123e:	16 16       	cp	r1, r22
    1240:	17 06       	cpc	r1, r23
    1242:	e8 07       	cpc	r30, r24
    1244:	f9 07       	cpc	r31, r25
    1246:	c0 f0       	brcs	.+48     	; 0x1278 <__fp_cmp+0x46>
    1248:	12 16       	cp	r1, r18
    124a:	13 06       	cpc	r1, r19
    124c:	e4 07       	cpc	r30, r20
    124e:	f5 07       	cpc	r31, r21
    1250:	98 f0       	brcs	.+38     	; 0x1278 <__fp_cmp+0x46>
    1252:	62 1b       	sub	r22, r18
    1254:	73 0b       	sbc	r23, r19
    1256:	84 0b       	sbc	r24, r20
    1258:	95 0b       	sbc	r25, r21
    125a:	39 f4       	brne	.+14     	; 0x126a <__fp_cmp+0x38>
    125c:	0a 26       	eor	r0, r26
    125e:	61 f0       	breq	.+24     	; 0x1278 <__fp_cmp+0x46>
    1260:	23 2b       	or	r18, r19
    1262:	24 2b       	or	r18, r20
    1264:	25 2b       	or	r18, r21
    1266:	21 f4       	brne	.+8      	; 0x1270 <__fp_cmp+0x3e>
    1268:	08 95       	ret
    126a:	0a 26       	eor	r0, r26
    126c:	09 f4       	brne	.+2      	; 0x1270 <__fp_cmp+0x3e>
    126e:	a1 40       	sbci	r26, 0x01	; 1
    1270:	a6 95       	lsr	r26
    1272:	8f ef       	ldi	r24, 0xFF	; 255
    1274:	81 1d       	adc	r24, r1
    1276:	81 1d       	adc	r24, r1
    1278:	08 95       	ret

0000127a <__fp_inf>:
    127a:	97 f9       	bld	r25, 7
    127c:	9f 67       	ori	r25, 0x7F	; 127
    127e:	80 e8       	ldi	r24, 0x80	; 128
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	08 95       	ret

00001286 <__fp_nan>:
    1286:	9f ef       	ldi	r25, 0xFF	; 255
    1288:	80 ec       	ldi	r24, 0xC0	; 192
    128a:	08 95       	ret

0000128c <__fp_pscA>:
    128c:	00 24       	eor	r0, r0
    128e:	0a 94       	dec	r0
    1290:	16 16       	cp	r1, r22
    1292:	17 06       	cpc	r1, r23
    1294:	18 06       	cpc	r1, r24
    1296:	09 06       	cpc	r0, r25
    1298:	08 95       	ret

0000129a <__fp_pscB>:
    129a:	00 24       	eor	r0, r0
    129c:	0a 94       	dec	r0
    129e:	12 16       	cp	r1, r18
    12a0:	13 06       	cpc	r1, r19
    12a2:	14 06       	cpc	r1, r20
    12a4:	05 06       	cpc	r0, r21
    12a6:	08 95       	ret

000012a8 <__fp_round>:
    12a8:	09 2e       	mov	r0, r25
    12aa:	03 94       	inc	r0
    12ac:	00 0c       	add	r0, r0
    12ae:	11 f4       	brne	.+4      	; 0x12b4 <__fp_round+0xc>
    12b0:	88 23       	and	r24, r24
    12b2:	52 f0       	brmi	.+20     	; 0x12c8 <__fp_round+0x20>
    12b4:	bb 0f       	add	r27, r27
    12b6:	40 f4       	brcc	.+16     	; 0x12c8 <__fp_round+0x20>
    12b8:	bf 2b       	or	r27, r31
    12ba:	11 f4       	brne	.+4      	; 0x12c0 <__fp_round+0x18>
    12bc:	60 ff       	sbrs	r22, 0
    12be:	04 c0       	rjmp	.+8      	; 0x12c8 <__fp_round+0x20>
    12c0:	6f 5f       	subi	r22, 0xFF	; 255
    12c2:	7f 4f       	sbci	r23, 0xFF	; 255
    12c4:	8f 4f       	sbci	r24, 0xFF	; 255
    12c6:	9f 4f       	sbci	r25, 0xFF	; 255
    12c8:	08 95       	ret

000012ca <__fp_split3>:
    12ca:	57 fd       	sbrc	r21, 7
    12cc:	90 58       	subi	r25, 0x80	; 128
    12ce:	44 0f       	add	r20, r20
    12d0:	55 1f       	adc	r21, r21
    12d2:	59 f0       	breq	.+22     	; 0x12ea <__fp_splitA+0x10>
    12d4:	5f 3f       	cpi	r21, 0xFF	; 255
    12d6:	71 f0       	breq	.+28     	; 0x12f4 <__fp_splitA+0x1a>
    12d8:	47 95       	ror	r20

000012da <__fp_splitA>:
    12da:	88 0f       	add	r24, r24
    12dc:	97 fb       	bst	r25, 7
    12de:	99 1f       	adc	r25, r25
    12e0:	61 f0       	breq	.+24     	; 0x12fa <__fp_splitA+0x20>
    12e2:	9f 3f       	cpi	r25, 0xFF	; 255
    12e4:	79 f0       	breq	.+30     	; 0x1304 <__fp_splitA+0x2a>
    12e6:	87 95       	ror	r24
    12e8:	08 95       	ret
    12ea:	12 16       	cp	r1, r18
    12ec:	13 06       	cpc	r1, r19
    12ee:	14 06       	cpc	r1, r20
    12f0:	55 1f       	adc	r21, r21
    12f2:	f2 cf       	rjmp	.-28     	; 0x12d8 <__fp_split3+0xe>
    12f4:	46 95       	lsr	r20
    12f6:	f1 df       	rcall	.-30     	; 0x12da <__fp_splitA>
    12f8:	08 c0       	rjmp	.+16     	; 0x130a <__fp_splitA+0x30>
    12fa:	16 16       	cp	r1, r22
    12fc:	17 06       	cpc	r1, r23
    12fe:	18 06       	cpc	r1, r24
    1300:	99 1f       	adc	r25, r25
    1302:	f1 cf       	rjmp	.-30     	; 0x12e6 <__fp_splitA+0xc>
    1304:	86 95       	lsr	r24
    1306:	71 05       	cpc	r23, r1
    1308:	61 05       	cpc	r22, r1
    130a:	08 94       	sec
    130c:	08 95       	ret

0000130e <__fp_zero>:
    130e:	e8 94       	clt

00001310 <__fp_szero>:
    1310:	bb 27       	eor	r27, r27
    1312:	66 27       	eor	r22, r22
    1314:	77 27       	eor	r23, r23
    1316:	cb 01       	movw	r24, r22
    1318:	97 f9       	bld	r25, 7
    131a:	08 95       	ret

0000131c <__gesf2>:
    131c:	8a df       	rcall	.-236    	; 0x1232 <__fp_cmp>
    131e:	08 f4       	brcc	.+2      	; 0x1322 <__gesf2+0x6>
    1320:	8f ef       	ldi	r24, 0xFF	; 255
    1322:	08 95       	ret

00001324 <__mulsf3>:
    1324:	0b d0       	rcall	.+22     	; 0x133c <__mulsf3x>
    1326:	c0 cf       	rjmp	.-128    	; 0x12a8 <__fp_round>
    1328:	b1 df       	rcall	.-158    	; 0x128c <__fp_pscA>
    132a:	28 f0       	brcs	.+10     	; 0x1336 <__mulsf3+0x12>
    132c:	b6 df       	rcall	.-148    	; 0x129a <__fp_pscB>
    132e:	18 f0       	brcs	.+6      	; 0x1336 <__mulsf3+0x12>
    1330:	95 23       	and	r25, r21
    1332:	09 f0       	breq	.+2      	; 0x1336 <__mulsf3+0x12>
    1334:	a2 cf       	rjmp	.-188    	; 0x127a <__fp_inf>
    1336:	a7 cf       	rjmp	.-178    	; 0x1286 <__fp_nan>
    1338:	11 24       	eor	r1, r1
    133a:	ea cf       	rjmp	.-44     	; 0x1310 <__fp_szero>

0000133c <__mulsf3x>:
    133c:	c6 df       	rcall	.-116    	; 0x12ca <__fp_split3>
    133e:	a0 f3       	brcs	.-24     	; 0x1328 <__mulsf3+0x4>

00001340 <__mulsf3_pse>:
    1340:	95 9f       	mul	r25, r21
    1342:	d1 f3       	breq	.-12     	; 0x1338 <__mulsf3+0x14>
    1344:	95 0f       	add	r25, r21
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	55 1f       	adc	r21, r21
    134a:	62 9f       	mul	r22, r18
    134c:	f0 01       	movw	r30, r0
    134e:	72 9f       	mul	r23, r18
    1350:	bb 27       	eor	r27, r27
    1352:	f0 0d       	add	r31, r0
    1354:	b1 1d       	adc	r27, r1
    1356:	63 9f       	mul	r22, r19
    1358:	aa 27       	eor	r26, r26
    135a:	f0 0d       	add	r31, r0
    135c:	b1 1d       	adc	r27, r1
    135e:	aa 1f       	adc	r26, r26
    1360:	64 9f       	mul	r22, r20
    1362:	66 27       	eor	r22, r22
    1364:	b0 0d       	add	r27, r0
    1366:	a1 1d       	adc	r26, r1
    1368:	66 1f       	adc	r22, r22
    136a:	82 9f       	mul	r24, r18
    136c:	22 27       	eor	r18, r18
    136e:	b0 0d       	add	r27, r0
    1370:	a1 1d       	adc	r26, r1
    1372:	62 1f       	adc	r22, r18
    1374:	73 9f       	mul	r23, r19
    1376:	b0 0d       	add	r27, r0
    1378:	a1 1d       	adc	r26, r1
    137a:	62 1f       	adc	r22, r18
    137c:	83 9f       	mul	r24, r19
    137e:	a0 0d       	add	r26, r0
    1380:	61 1d       	adc	r22, r1
    1382:	22 1f       	adc	r18, r18
    1384:	74 9f       	mul	r23, r20
    1386:	33 27       	eor	r19, r19
    1388:	a0 0d       	add	r26, r0
    138a:	61 1d       	adc	r22, r1
    138c:	23 1f       	adc	r18, r19
    138e:	84 9f       	mul	r24, r20
    1390:	60 0d       	add	r22, r0
    1392:	21 1d       	adc	r18, r1
    1394:	82 2f       	mov	r24, r18
    1396:	76 2f       	mov	r23, r22
    1398:	6a 2f       	mov	r22, r26
    139a:	11 24       	eor	r1, r1
    139c:	9f 57       	subi	r25, 0x7F	; 127
    139e:	50 40       	sbci	r21, 0x00	; 0
    13a0:	8a f0       	brmi	.+34     	; 0x13c4 <__mulsf3_pse+0x84>
    13a2:	e1 f0       	breq	.+56     	; 0x13dc <__mulsf3_pse+0x9c>
    13a4:	88 23       	and	r24, r24
    13a6:	4a f0       	brmi	.+18     	; 0x13ba <__mulsf3_pse+0x7a>
    13a8:	ee 0f       	add	r30, r30
    13aa:	ff 1f       	adc	r31, r31
    13ac:	bb 1f       	adc	r27, r27
    13ae:	66 1f       	adc	r22, r22
    13b0:	77 1f       	adc	r23, r23
    13b2:	88 1f       	adc	r24, r24
    13b4:	91 50       	subi	r25, 0x01	; 1
    13b6:	50 40       	sbci	r21, 0x00	; 0
    13b8:	a9 f7       	brne	.-22     	; 0x13a4 <__mulsf3_pse+0x64>
    13ba:	9e 3f       	cpi	r25, 0xFE	; 254
    13bc:	51 05       	cpc	r21, r1
    13be:	70 f0       	brcs	.+28     	; 0x13dc <__mulsf3_pse+0x9c>
    13c0:	5c cf       	rjmp	.-328    	; 0x127a <__fp_inf>
    13c2:	a6 cf       	rjmp	.-180    	; 0x1310 <__fp_szero>
    13c4:	5f 3f       	cpi	r21, 0xFF	; 255
    13c6:	ec f3       	brlt	.-6      	; 0x13c2 <__mulsf3_pse+0x82>
    13c8:	98 3e       	cpi	r25, 0xE8	; 232
    13ca:	dc f3       	brlt	.-10     	; 0x13c2 <__mulsf3_pse+0x82>
    13cc:	86 95       	lsr	r24
    13ce:	77 95       	ror	r23
    13d0:	67 95       	ror	r22
    13d2:	b7 95       	ror	r27
    13d4:	f7 95       	ror	r31
    13d6:	e7 95       	ror	r30
    13d8:	9f 5f       	subi	r25, 0xFF	; 255
    13da:	c1 f7       	brne	.-16     	; 0x13cc <__mulsf3_pse+0x8c>
    13dc:	fe 2b       	or	r31, r30
    13de:	88 0f       	add	r24, r24
    13e0:	91 1d       	adc	r25, r1
    13e2:	96 95       	lsr	r25
    13e4:	87 95       	ror	r24
    13e6:	97 f9       	bld	r25, 7
    13e8:	08 95       	ret
    13ea:	11 f4       	brne	.+4      	; 0x13f0 <__mulsf3_pse+0xb0>
    13ec:	0e f4       	brtc	.+2      	; 0x13f0 <__mulsf3_pse+0xb0>
    13ee:	4b cf       	rjmp	.-362    	; 0x1286 <__fp_nan>
    13f0:	3e c0       	rjmp	.+124    	; 0x146e <__fp_mpack>

000013f2 <sqrt>:
    13f2:	73 df       	rcall	.-282    	; 0x12da <__fp_splitA>
    13f4:	d0 f3       	brcs	.-12     	; 0x13ea <__mulsf3_pse+0xaa>
    13f6:	99 23       	and	r25, r25
    13f8:	d9 f3       	breq	.-10     	; 0x13f0 <__mulsf3_pse+0xb0>
    13fa:	ce f3       	brts	.-14     	; 0x13ee <__mulsf3_pse+0xae>
    13fc:	9f 57       	subi	r25, 0x7F	; 127
    13fe:	55 0b       	sbc	r21, r21
    1400:	87 ff       	sbrs	r24, 7
    1402:	43 d0       	rcall	.+134    	; 0x148a <__fp_norm2>
    1404:	00 24       	eor	r0, r0
    1406:	a0 e6       	ldi	r26, 0x60	; 96
    1408:	40 ea       	ldi	r20, 0xA0	; 160
    140a:	90 01       	movw	r18, r0
    140c:	80 58       	subi	r24, 0x80	; 128
    140e:	56 95       	lsr	r21
    1410:	97 95       	ror	r25
    1412:	28 f4       	brcc	.+10     	; 0x141e <sqrt+0x2c>
    1414:	80 5c       	subi	r24, 0xC0	; 192
    1416:	66 0f       	add	r22, r22
    1418:	77 1f       	adc	r23, r23
    141a:	88 1f       	adc	r24, r24
    141c:	20 f0       	brcs	.+8      	; 0x1426 <sqrt+0x34>
    141e:	26 17       	cp	r18, r22
    1420:	37 07       	cpc	r19, r23
    1422:	48 07       	cpc	r20, r24
    1424:	30 f4       	brcc	.+12     	; 0x1432 <sqrt+0x40>
    1426:	62 1b       	sub	r22, r18
    1428:	73 0b       	sbc	r23, r19
    142a:	84 0b       	sbc	r24, r20
    142c:	20 29       	or	r18, r0
    142e:	31 29       	or	r19, r1
    1430:	4a 2b       	or	r20, r26
    1432:	a6 95       	lsr	r26
    1434:	17 94       	ror	r1
    1436:	07 94       	ror	r0
    1438:	20 25       	eor	r18, r0
    143a:	31 25       	eor	r19, r1
    143c:	4a 27       	eor	r20, r26
    143e:	58 f7       	brcc	.-42     	; 0x1416 <sqrt+0x24>
    1440:	66 0f       	add	r22, r22
    1442:	77 1f       	adc	r23, r23
    1444:	88 1f       	adc	r24, r24
    1446:	20 f0       	brcs	.+8      	; 0x1450 <sqrt+0x5e>
    1448:	26 17       	cp	r18, r22
    144a:	37 07       	cpc	r19, r23
    144c:	48 07       	cpc	r20, r24
    144e:	30 f4       	brcc	.+12     	; 0x145c <sqrt+0x6a>
    1450:	62 0b       	sbc	r22, r18
    1452:	73 0b       	sbc	r23, r19
    1454:	84 0b       	sbc	r24, r20
    1456:	20 0d       	add	r18, r0
    1458:	31 1d       	adc	r19, r1
    145a:	41 1d       	adc	r20, r1
    145c:	a0 95       	com	r26
    145e:	81 f7       	brne	.-32     	; 0x1440 <sqrt+0x4e>
    1460:	b9 01       	movw	r22, r18
    1462:	84 2f       	mov	r24, r20
    1464:	91 58       	subi	r25, 0x81	; 129
    1466:	88 0f       	add	r24, r24
    1468:	96 95       	lsr	r25
    146a:	87 95       	ror	r24
    146c:	08 95       	ret

0000146e <__fp_mpack>:
    146e:	9f 3f       	cpi	r25, 0xFF	; 255
    1470:	31 f0       	breq	.+12     	; 0x147e <__fp_mpack_finite+0xc>

00001472 <__fp_mpack_finite>:
    1472:	91 50       	subi	r25, 0x01	; 1
    1474:	20 f4       	brcc	.+8      	; 0x147e <__fp_mpack_finite+0xc>
    1476:	87 95       	ror	r24
    1478:	77 95       	ror	r23
    147a:	67 95       	ror	r22
    147c:	b7 95       	ror	r27
    147e:	88 0f       	add	r24, r24
    1480:	91 1d       	adc	r25, r1
    1482:	96 95       	lsr	r25
    1484:	87 95       	ror	r24
    1486:	97 f9       	bld	r25, 7
    1488:	08 95       	ret

0000148a <__fp_norm2>:
    148a:	91 50       	subi	r25, 0x01	; 1
    148c:	50 40       	sbci	r21, 0x00	; 0
    148e:	66 0f       	add	r22, r22
    1490:	77 1f       	adc	r23, r23
    1492:	88 1f       	adc	r24, r24
    1494:	d2 f7       	brpl	.-12     	; 0x148a <__fp_norm2>
    1496:	08 95       	ret

00001498 <__divmodhi4>:
    1498:	97 fb       	bst	r25, 7
    149a:	07 2e       	mov	r0, r23
    149c:	16 f4       	brtc	.+4      	; 0x14a2 <__divmodhi4+0xa>
    149e:	00 94       	com	r0
    14a0:	06 d0       	rcall	.+12     	; 0x14ae <__divmodhi4_neg1>
    14a2:	77 fd       	sbrc	r23, 7
    14a4:	08 d0       	rcall	.+16     	; 0x14b6 <__divmodhi4_neg2>
    14a6:	0b d0       	rcall	.+22     	; 0x14be <__udivmodhi4>
    14a8:	07 fc       	sbrc	r0, 7
    14aa:	05 d0       	rcall	.+10     	; 0x14b6 <__divmodhi4_neg2>
    14ac:	3e f4       	brtc	.+14     	; 0x14bc <__divmodhi4_exit>

000014ae <__divmodhi4_neg1>:
    14ae:	90 95       	com	r25
    14b0:	81 95       	neg	r24
    14b2:	9f 4f       	sbci	r25, 0xFF	; 255
    14b4:	08 95       	ret

000014b6 <__divmodhi4_neg2>:
    14b6:	70 95       	com	r23
    14b8:	61 95       	neg	r22
    14ba:	7f 4f       	sbci	r23, 0xFF	; 255

000014bc <__divmodhi4_exit>:
    14bc:	08 95       	ret

000014be <__udivmodhi4>:
    14be:	aa 1b       	sub	r26, r26
    14c0:	bb 1b       	sub	r27, r27
    14c2:	51 e1       	ldi	r21, 0x11	; 17
    14c4:	07 c0       	rjmp	.+14     	; 0x14d4 <__udivmodhi4_ep>

000014c6 <__udivmodhi4_loop>:
    14c6:	aa 1f       	adc	r26, r26
    14c8:	bb 1f       	adc	r27, r27
    14ca:	a6 17       	cp	r26, r22
    14cc:	b7 07       	cpc	r27, r23
    14ce:	10 f0       	brcs	.+4      	; 0x14d4 <__udivmodhi4_ep>
    14d0:	a6 1b       	sub	r26, r22
    14d2:	b7 0b       	sbc	r27, r23

000014d4 <__udivmodhi4_ep>:
    14d4:	88 1f       	adc	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	5a 95       	dec	r21
    14da:	a9 f7       	brne	.-22     	; 0x14c6 <__udivmodhi4_loop>
    14dc:	80 95       	com	r24
    14de:	90 95       	com	r25
    14e0:	bc 01       	movw	r22, r24
    14e2:	cd 01       	movw	r24, r26
    14e4:	08 95       	ret

000014e6 <__tablejump2__>:
    14e6:	ee 0f       	add	r30, r30
    14e8:	ff 1f       	adc	r31, r31
    14ea:	05 90       	lpm	r0, Z+
    14ec:	f4 91       	lpm	r31, Z
    14ee:	e0 2d       	mov	r30, r0
    14f0:	09 94       	ijmp

000014f2 <_exit>:
    14f2:	f8 94       	cli

000014f4 <__stop_program>:
    14f4:	ff cf       	rjmp	.-2      	; 0x14f4 <__stop_program>
