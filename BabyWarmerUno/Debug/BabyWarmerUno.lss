
BabyWarmerUno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000144a  000014de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000144a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  00800104  00800104  000014e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001514  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003bfb  00000000  00000000  000017e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d9d  00000000  00000000  000053df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001357  00000000  00000000  0000617c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000660  00000000  00000000  000074d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e58  00000000  00000000  00007b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001371  00000000  00000000  0000898c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  00009cfd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	34 c0       	rjmp	.+104    	; 0x6a <__ctors_end>
       2:	00 00       	nop
       4:	59 c0       	rjmp	.+178    	; 0xb8 <__bad_interrupt>
       6:	00 00       	nop
       8:	57 c0       	rjmp	.+174    	; 0xb8 <__bad_interrupt>
       a:	00 00       	nop
       c:	55 c0       	rjmp	.+170    	; 0xb8 <__bad_interrupt>
       e:	00 00       	nop
      10:	53 c0       	rjmp	.+166    	; 0xb8 <__bad_interrupt>
      12:	00 00       	nop
      14:	51 c0       	rjmp	.+162    	; 0xb8 <__bad_interrupt>
      16:	00 00       	nop
      18:	4f c0       	rjmp	.+158    	; 0xb8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	4d c0       	rjmp	.+154    	; 0xb8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	4b c0       	rjmp	.+150    	; 0xb8 <__bad_interrupt>
      22:	00 00       	nop
      24:	49 c0       	rjmp	.+146    	; 0xb8 <__bad_interrupt>
      26:	00 00       	nop
      28:	47 c0       	rjmp	.+142    	; 0xb8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ab c1       	rjmp	.+854    	; 0x384 <__vector_11>
      2e:	00 00       	nop
      30:	43 c0       	rjmp	.+134    	; 0xb8 <__bad_interrupt>
      32:	00 00       	nop
      34:	41 c0       	rjmp	.+130    	; 0xb8 <__bad_interrupt>
      36:	00 00       	nop
      38:	3f c0       	rjmp	.+126    	; 0xb8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	3d c0       	rjmp	.+122    	; 0xb8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3b c0       	rjmp	.+118    	; 0xb8 <__bad_interrupt>
      42:	00 00       	nop
      44:	39 c0       	rjmp	.+114    	; 0xb8 <__bad_interrupt>
      46:	00 00       	nop
      48:	37 c0       	rjmp	.+110    	; 0xb8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	35 c0       	rjmp	.+106    	; 0xb8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	33 c0       	rjmp	.+102    	; 0xb8 <__bad_interrupt>
      52:	00 00       	nop
      54:	31 c0       	rjmp	.+98     	; 0xb8 <__bad_interrupt>
      56:	00 00       	nop
      58:	2f c0       	rjmp	.+94     	; 0xb8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	2d c0       	rjmp	.+90     	; 0xb8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2b c0       	rjmp	.+86     	; 0xb8 <__bad_interrupt>
      62:	00 00       	nop
      64:	29 c0       	rjmp	.+82     	; 0xb8 <__bad_interrupt>
	...

00000068 <__ctors_start>:
      68:	b0 04       	cpc	r11, r0

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	ea e4       	ldi	r30, 0x4A	; 74
      7e:	f4 e1       	ldi	r31, 0x14	; 20
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	a4 30       	cpi	r26, 0x04	; 4
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	21 e0       	ldi	r18, 0x01	; 1
      8e:	a4 e0       	ldi	r26, 0x04	; 4
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	a1 33       	cpi	r26, 0x31	; 49
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	c5 e3       	ldi	r28, 0x35	; 53
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	21 97       	sbiw	r28, 0x01	; 1
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 1d 0a 	call	0x143a	; 0x143a <__tablejump2__>
      ac:	c4 33       	cpi	r28, 0x34	; 52
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	54 d3       	rcall	.+1704   	; 0x75c <main>
      b4:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <_exit>

000000b8 <__bad_interrupt>:
      b8:	a3 cf       	rjmp	.-186    	; 0x0 <__vectors>

000000ba <_Z12init_devicesv>:
	
	//second 4-7 segment display from left to right
	max1.MAX7219_writeData(4,B);
	max1.MAX7219_writeData(8,A);
	max1.MAX7219_writeData(6,B);
	max1.MAX7219_writeData(2,Y);
      ba:	78 94       	sei
      bc:	8f e0       	ldi	r24, 0x0F	; 15
      be:	91 e0       	ldi	r25, 0x01	; 1
      c0:	6c d4       	rcall	.+2264   	; 0x99a <_ZN3led8led_initEv>
      c2:	8d e2       	ldi	r24, 0x2D	; 45
      c4:	91 e0       	ldi	r25, 0x01	; 1
      c6:	5d d4       	rcall	.+2234   	; 0x982 <_ZN8Controls12initControlsEv>
      c8:	8f e0       	ldi	r24, 0x0F	; 15
      ca:	91 e0       	ldi	r25, 0x01	; 1
      cc:	66 d4       	rcall	.+2252   	; 0x99a <_ZN3led8led_initEv>
      ce:	61 e0       	ldi	r22, 0x01	; 1
      d0:	70 e0       	ldi	r23, 0x00	; 0
      d2:	8f e2       	ldi	r24, 0x2F	; 47
      d4:	91 e0       	ldi	r25, 0x01	; 1
      d6:	ed d6       	rcall	.+3546   	; 0xeb2 <_ZN6Timerr11setTimerNumEi>
      d8:	8f e2       	ldi	r24, 0x2F	; 47
      da:	91 e0       	ldi	r25, 0x01	; 1
      dc:	ee d6       	rcall	.+3548   	; 0xeba <_ZN6Timerr19setCompareInterruptEv>
      de:	68 ee       	ldi	r22, 0xE8	; 232
      e0:	73 e0       	ldi	r23, 0x03	; 3
      e2:	8f e2       	ldi	r24, 0x2F	; 47
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	ef d6       	rcall	.+3550   	; 0xec6 <_ZN6Timerr16startCustomTimerEi>
      e8:	86 e1       	ldi	r24, 0x16	; 22
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	aa d6       	rcall	.+3412   	; 0xe42 <_ZN7max721912MAX7219_initEv>
      ee:	24 e0       	ldi	r18, 0x04	; 4
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	44 e0       	ldi	r20, 0x04	; 4
      f4:	50 e0       	ldi	r21, 0x00	; 0
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	70 e0       	ldi	r23, 0x00	; 0
      fa:	86 e1       	ldi	r24, 0x16	; 22
      fc:	91 e0       	ldi	r25, 0x01	; 1
      fe:	76 d6       	rcall	.+3308   	; 0xdec <_ZN7max721911MAX7219_setEiii>
     100:	8f e3       	ldi	r24, 0x3F	; 63
     102:	9c e9       	ldi	r25, 0x9C	; 156
     104:	01 97       	sbiw	r24, 0x01	; 1
     106:	f1 f7       	brne	.-4      	; 0x104 <_Z12init_devicesv+0x4a>
     108:	00 c0       	rjmp	.+0      	; 0x10a <_Z12init_devicesv+0x50>
     10a:	00 00       	nop
     10c:	24 e0       	ldi	r18, 0x04	; 4
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	44 e0       	ldi	r20, 0x04	; 4
     112:	50 e0       	ldi	r21, 0x00	; 0
     114:	61 e0       	ldi	r22, 0x01	; 1
     116:	70 e0       	ldi	r23, 0x00	; 0
     118:	80 e1       	ldi	r24, 0x10	; 16
     11a:	91 e0       	ldi	r25, 0x01	; 1
     11c:	67 d6       	rcall	.+3278   	; 0xdec <_ZN7max721911MAX7219_setEiii>
     11e:	8f e3       	ldi	r24, 0x3F	; 63
     120:	9c e9       	ldi	r25, 0x9C	; 156
     122:	01 97       	sbiw	r24, 0x01	; 1
     124:	f1 f7       	brne	.-4      	; 0x122 <_Z12init_devicesv+0x68>
     126:	00 c0       	rjmp	.+0      	; 0x128 <_Z12init_devicesv+0x6e>
     128:	00 00       	nop
     12a:	86 e1       	ldi	r24, 0x16	; 22
     12c:	91 e0       	ldi	r25, 0x01	; 1
     12e:	89 d6       	rcall	.+3346   	; 0xe42 <_ZN7max721912MAX7219_initEv>
     130:	8f e3       	ldi	r24, 0x3F	; 63
     132:	9c e9       	ldi	r25, 0x9C	; 156
     134:	01 97       	sbiw	r24, 0x01	; 1
     136:	f1 f7       	brne	.-4      	; 0x134 <_Z12init_devicesv+0x7a>
     138:	00 c0       	rjmp	.+0      	; 0x13a <_Z12init_devicesv+0x80>
     13a:	00 00       	nop
     13c:	80 e1       	ldi	r24, 0x10	; 16
     13e:	91 e0       	ldi	r25, 0x01	; 1
     140:	80 d6       	rcall	.+3328   	; 0xe42 <_ZN7max721912MAX7219_initEv>
     142:	8f e3       	ldi	r24, 0x3F	; 63
     144:	9c e9       	ldi	r25, 0x9C	; 156
     146:	01 97       	sbiw	r24, 0x01	; 1
     148:	f1 f7       	brne	.-4      	; 0x146 <_Z12init_devicesv+0x8c>
     14a:	00 c0       	rjmp	.+0      	; 0x14c <_Z12init_devicesv+0x92>
     14c:	00 00       	nop
     14e:	86 e1       	ldi	r24, 0x16	; 22
     150:	91 e0       	ldi	r25, 0x01	; 1
     152:	8e d6       	rcall	.+3356   	; 0xe70 <_ZN7max721920MAX7219_clearDisplayEv>
     154:	9f ef       	ldi	r25, 0xFF	; 255
     156:	26 e7       	ldi	r18, 0x76	; 118
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	91 50       	subi	r25, 0x01	; 1
     15c:	20 40       	sbci	r18, 0x00	; 0
     15e:	80 40       	sbci	r24, 0x00	; 0
     160:	e1 f7       	brne	.-8      	; 0x15a <_Z12init_devicesv+0xa0>
     162:	00 c0       	rjmp	.+0      	; 0x164 <_Z12init_devicesv+0xaa>
     164:	00 00       	nop
     166:	80 e1       	ldi	r24, 0x10	; 16
     168:	91 e0       	ldi	r25, 0x01	; 1
     16a:	82 d6       	rcall	.+3332   	; 0xe70 <_ZN7max721920MAX7219_clearDisplayEv>
     16c:	9f ef       	ldi	r25, 0xFF	; 255
     16e:	26 e7       	ldi	r18, 0x76	; 118
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	91 50       	subi	r25, 0x01	; 1
     174:	20 40       	sbci	r18, 0x00	; 0
     176:	80 40       	sbci	r24, 0x00	; 0
     178:	e1 f7       	brne	.-8      	; 0x172 <_Z12init_devicesv+0xb8>
     17a:	00 c0       	rjmp	.+0      	; 0x17c <_Z12init_devicesv+0xc2>
     17c:	00 00       	nop
     17e:	08 95       	ret

00000180 <_Z5checkv>:
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	42 e1       	ldi	r20, 0x12	; 18
     186:	52 e4       	ldi	r21, 0x42	; 66
     188:	60 91 24 01 	lds	r22, 0x0124
     18c:	70 91 25 01 	lds	r23, 0x0125
     190:	80 91 26 01 	lds	r24, 0x0126
     194:	90 91 27 01 	lds	r25, 0x0127
     198:	0e 94 38 09 	call	0x1270	; 0x1270 <__gesf2>
     19c:	18 16       	cp	r1, r24
     19e:	44 f4       	brge	.+16     	; 0x1b0 <_Z5checkv+0x30>
     1a0:	41 e0       	ldi	r20, 0x01	; 1
     1a2:	50 e0       	ldi	r21, 0x00	; 0
     1a4:	60 e0       	ldi	r22, 0x00	; 0
     1a6:	70 e0       	ldi	r23, 0x00	; 0
     1a8:	8f e0       	ldi	r24, 0x0F	; 15
     1aa:	91 e0       	ldi	r25, 0x01	; 1
     1ac:	fd d3       	rcall	.+2042   	; 0x9a8 <_ZN3led6led_doEii>
     1ae:	07 c0       	rjmp	.+14     	; 0x1be <_Z5checkv+0x3e>
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	50 e0       	ldi	r21, 0x00	; 0
     1b4:	60 e0       	ldi	r22, 0x00	; 0
     1b6:	70 e0       	ldi	r23, 0x00	; 0
     1b8:	8f e0       	ldi	r24, 0x0F	; 15
     1ba:	91 e0       	ldi	r25, 0x01	; 1
     1bc:	f5 d3       	rcall	.+2026   	; 0x9a8 <_ZN3led6led_doEii>
     1be:	20 e0       	ldi	r18, 0x00	; 0
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	44 e1       	ldi	r20, 0x14	; 20
     1c4:	52 e4       	ldi	r21, 0x42	; 66
     1c6:	60 91 20 01 	lds	r22, 0x0120
     1ca:	70 91 21 01 	lds	r23, 0x0121
     1ce:	80 91 22 01 	lds	r24, 0x0122
     1d2:	90 91 23 01 	lds	r25, 0x0123
     1d6:	0e 94 38 09 	call	0x1270	; 0x1270 <__gesf2>
     1da:	18 16       	cp	r1, r24
     1dc:	44 f4       	brge	.+16     	; 0x1ee <_Z5checkv+0x6e>
     1de:	41 e0       	ldi	r20, 0x01	; 1
     1e0:	50 e0       	ldi	r21, 0x00	; 0
     1e2:	61 e0       	ldi	r22, 0x01	; 1
     1e4:	70 e0       	ldi	r23, 0x00	; 0
     1e6:	8f e0       	ldi	r24, 0x0F	; 15
     1e8:	91 e0       	ldi	r25, 0x01	; 1
     1ea:	de d3       	rcall	.+1980   	; 0x9a8 <_ZN3led6led_doEii>
     1ec:	07 c0       	rjmp	.+14     	; 0x1fc <_Z5checkv+0x7c>
     1ee:	40 e0       	ldi	r20, 0x00	; 0
     1f0:	50 e0       	ldi	r21, 0x00	; 0
     1f2:	60 e0       	ldi	r22, 0x00	; 0
     1f4:	70 e0       	ldi	r23, 0x00	; 0
     1f6:	8f e0       	ldi	r24, 0x0F	; 15
     1f8:	91 e0       	ldi	r25, 0x01	; 1
     1fa:	d6 d3       	rcall	.+1964   	; 0x9a8 <_ZN3led6led_doEii>
     1fc:	34 99       	sbic	0x06, 4	; 6
     1fe:	7a c0       	rjmp	.+244    	; 0x2f4 <_Z5checkv+0x174>
     200:	80 91 0b 01 	lds	r24, 0x010B
     204:	81 11       	cpse	r24, r1
     206:	76 c0       	rjmp	.+236    	; 0x2f4 <_Z5checkv+0x174>
     208:	80 91 09 01 	lds	r24, 0x0109
     20c:	81 11       	cpse	r24, r1
     20e:	75 c0       	rjmp	.+234    	; 0x2fa <_Z5checkv+0x17a>
     210:	71 c0       	rjmp	.+226    	; 0x2f4 <_Z5checkv+0x174>
     212:	10 92 0b 01 	sts	0x010B, r1
     216:	33 99       	sbic	0x06, 3	; 6
     218:	77 c0       	rjmp	.+238    	; 0x308 <_Z5checkv+0x188>
     21a:	80 91 0e 01 	lds	r24, 0x010E
     21e:	81 11       	cpse	r24, r1
     220:	73 c0       	rjmp	.+230    	; 0x308 <_Z5checkv+0x188>
     222:	75 c0       	rjmp	.+234    	; 0x30e <_Z5checkv+0x18e>
     224:	2d ec       	ldi	r18, 0xCD	; 205
     226:	3c ec       	ldi	r19, 0xCC	; 204
     228:	4c ec       	ldi	r20, 0xCC	; 204
     22a:	5d e3       	ldi	r21, 0x3D	; 61
     22c:	60 91 1c 01 	lds	r22, 0x011C
     230:	70 91 1d 01 	lds	r23, 0x011D
     234:	80 91 1e 01 	lds	r24, 0x011E
     238:	90 91 1f 01 	lds	r25, 0x011F
     23c:	66 d6       	rcall	.+3276   	; 0xf0a <__addsf3>
     23e:	60 93 1c 01 	sts	0x011C, r22
     242:	70 93 1d 01 	sts	0x011D, r23
     246:	80 93 1e 01 	sts	0x011E, r24
     24a:	90 93 1f 01 	sts	0x011F, r25
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	80 93 0e 01 	sts	0x010E, r24
     254:	02 c0       	rjmp	.+4      	; 0x25a <_Z5checkv+0xda>
     256:	10 92 0e 01 	sts	0x010E, r1
     25a:	4a 99       	sbic	0x09, 2	; 9
     25c:	62 c0       	rjmp	.+196    	; 0x322 <_Z5checkv+0x1a2>
     25e:	80 91 0c 01 	lds	r24, 0x010C
     262:	81 11       	cpse	r24, r1
     264:	5e c0       	rjmp	.+188    	; 0x322 <_Z5checkv+0x1a2>
     266:	58 c0       	rjmp	.+176    	; 0x318 <_Z5checkv+0x198>
     268:	2d ec       	ldi	r18, 0xCD	; 205
     26a:	3c ec       	ldi	r19, 0xCC	; 204
     26c:	4c ec       	ldi	r20, 0xCC	; 204
     26e:	5d e3       	ldi	r21, 0x3D	; 61
     270:	60 91 1c 01 	lds	r22, 0x011C
     274:	70 91 1d 01 	lds	r23, 0x011D
     278:	80 91 1e 01 	lds	r24, 0x011E
     27c:	90 91 1f 01 	lds	r25, 0x011F
     280:	43 d6       	rcall	.+3206   	; 0xf08 <__subsf3>
     282:	60 93 1c 01 	sts	0x011C, r22
     286:	70 93 1d 01 	sts	0x011D, r23
     28a:	80 93 1e 01 	sts	0x011E, r24
     28e:	90 93 1f 01 	sts	0x011F, r25
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	80 93 0c 01 	sts	0x010C, r24
     298:	02 c0       	rjmp	.+4      	; 0x29e <_Z5checkv+0x11e>
     29a:	10 92 0c 01 	sts	0x010C, r1
     29e:	18 99       	sbic	0x03, 0	; 3
     2a0:	43 c0       	rjmp	.+134    	; 0x328 <_Z5checkv+0x1a8>
     2a2:	80 91 0d 01 	lds	r24, 0x010D
     2a6:	81 11       	cpse	r24, r1
     2a8:	6a c0       	rjmp	.+212    	; 0x37e <_Z5checkv+0x1fe>
     2aa:	41 c0       	rjmp	.+130    	; 0x32e <_Z5checkv+0x1ae>
     2ac:	90 91 0a 01 	lds	r25, 0x010A
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	89 27       	eor	r24, r25
     2b4:	80 93 0a 01 	sts	0x010A, r24
     2b8:	81 11       	cpse	r24, r1
     2ba:	10 c0       	rjmp	.+32     	; 0x2dc <_Z5checkv+0x15c>
     2bc:	80 91 1c 01 	lds	r24, 0x011C
     2c0:	90 91 1d 01 	lds	r25, 0x011D
     2c4:	a0 91 1e 01 	lds	r26, 0x011E
     2c8:	b0 91 1f 01 	lds	r27, 0x011F
     2cc:	80 93 00 01 	sts	0x0100, r24
     2d0:	90 93 01 01 	sts	0x0101, r25
     2d4:	a0 93 02 01 	sts	0x0102, r26
     2d8:	b0 93 03 01 	sts	0x0103, r27
     2dc:	8d e2       	ldi	r24, 0x2D	; 45
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	58 d3       	rcall	.+1712   	; 0x992 <_ZN8Controls11startBuzzerEv>
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	80 93 0d 01 	sts	0x010D, r24
     2e8:	08 95       	ret
     2ea:	80 91 0d 01 	lds	r24, 0x010D
     2ee:	81 11       	cpse	r24, r1
     2f0:	38 c0       	rjmp	.+112    	; 0x362 <_Z5checkv+0x1e2>
     2f2:	08 95       	ret
     2f4:	34 99       	sbic	0x06, 4	; 6
     2f6:	8d cf       	rjmp	.-230    	; 0x212 <_Z5checkv+0x92>
     2f8:	8e cf       	rjmp	.-228    	; 0x216 <_Z5checkv+0x96>
     2fa:	8d e2       	ldi	r24, 0x2D	; 45
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	4b d3       	rcall	.+1686   	; 0x996 <_ZN8Controls10stopBuzzerEv>
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	80 93 0b 01 	sts	0x010B, r24
     306:	87 cf       	rjmp	.-242    	; 0x216 <_Z5checkv+0x96>
     308:	33 99       	sbic	0x06, 3	; 6
     30a:	a5 cf       	rjmp	.-182    	; 0x256 <_Z5checkv+0xd6>
     30c:	a6 cf       	rjmp	.-180    	; 0x25a <_Z5checkv+0xda>
     30e:	80 91 0a 01 	lds	r24, 0x010A
     312:	81 11       	cpse	r24, r1
     314:	87 cf       	rjmp	.-242    	; 0x224 <_Z5checkv+0xa4>
     316:	9b cf       	rjmp	.-202    	; 0x24e <_Z5checkv+0xce>
     318:	80 91 0a 01 	lds	r24, 0x010A
     31c:	81 11       	cpse	r24, r1
     31e:	a4 cf       	rjmp	.-184    	; 0x268 <_Z5checkv+0xe8>
     320:	b8 cf       	rjmp	.-144    	; 0x292 <_Z5checkv+0x112>
     322:	4a 99       	sbic	0x09, 2	; 9
     324:	ba cf       	rjmp	.-140    	; 0x29a <_Z5checkv+0x11a>
     326:	bb cf       	rjmp	.-138    	; 0x29e <_Z5checkv+0x11e>
     328:	18 99       	sbic	0x03, 0	; 3
     32a:	df cf       	rjmp	.-66     	; 0x2ea <_Z5checkv+0x16a>
     32c:	08 95       	ret
     32e:	80 91 04 01 	lds	r24, 0x0104
     332:	90 91 05 01 	lds	r25, 0x0105
     336:	a0 91 06 01 	lds	r26, 0x0106
     33a:	b0 91 07 01 	lds	r27, 0x0107
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	a1 1d       	adc	r26, r1
     342:	b1 1d       	adc	r27, r1
     344:	80 93 04 01 	sts	0x0104, r24
     348:	90 93 05 01 	sts	0x0105, r25
     34c:	a0 93 06 01 	sts	0x0106, r26
     350:	b0 93 07 01 	sts	0x0107, r27
     354:	81 35       	cpi	r24, 0x51	; 81
     356:	93 4c       	sbci	r25, 0xC3	; 195
     358:	a1 05       	cpc	r26, r1
     35a:	b1 05       	cpc	r27, r1
     35c:	08 f0       	brcs	.+2      	; 0x360 <_Z5checkv+0x1e0>
     35e:	a6 cf       	rjmp	.-180    	; 0x2ac <_Z5checkv+0x12c>
     360:	08 95       	ret
     362:	10 92 04 01 	sts	0x0104, r1
     366:	10 92 05 01 	sts	0x0105, r1
     36a:	10 92 06 01 	sts	0x0106, r1
     36e:	10 92 07 01 	sts	0x0107, r1
     372:	8d e2       	ldi	r24, 0x2D	; 45
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	0f d3       	rcall	.+1566   	; 0x996 <_ZN8Controls10stopBuzzerEv>
     378:	10 92 0d 01 	sts	0x010D, r1
     37c:	08 95       	ret
     37e:	18 99       	sbic	0x03, 0	; 3
     380:	f0 cf       	rjmp	.-32     	; 0x362 <_Z5checkv+0x1e2>
     382:	08 95       	ret

00000384 <__vector_11>:
     384:	1f 92       	push	r1
     386:	0f 92       	push	r0
     388:	0f b6       	in	r0, 0x3f	; 63
     38a:	0f 92       	push	r0
     38c:	11 24       	eor	r1, r1
     38e:	8f 93       	push	r24
     390:	10 92 85 00 	sts	0x0085, r1
     394:	10 92 84 00 	sts	0x0084, r1
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	80 93 2e 01 	sts	0x012E, r24
     39e:	8f 91       	pop	r24
     3a0:	0f 90       	pop	r0
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	0f 90       	pop	r0
     3a6:	1f 90       	pop	r1
     3a8:	18 95       	reti

000003aa <_Z13sendToDisplayfff>:
     3aa:	4f 92       	push	r4
     3ac:	5f 92       	push	r5
     3ae:	6f 92       	push	r6
     3b0:	7f 92       	push	r7
     3b2:	8f 92       	push	r8
     3b4:	9f 92       	push	r9
     3b6:	af 92       	push	r10
     3b8:	bf 92       	push	r11
     3ba:	cf 92       	push	r12
     3bc:	df 92       	push	r13
     3be:	ef 92       	push	r14
     3c0:	ff 92       	push	r15
     3c2:	0f 93       	push	r16
     3c4:	1f 93       	push	r17
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	2b 01       	movw	r4, r22
     3cc:	3c 01       	movw	r6, r24
     3ce:	49 01       	movw	r8, r18
     3d0:	5a 01       	movw	r10, r20
     3d2:	67 01       	movw	r12, r14
     3d4:	78 01       	movw	r14, r16
     3d6:	4f ef       	ldi	r20, 0xFF	; 255
     3d8:	69 e0       	ldi	r22, 0x09	; 9
     3da:	86 e1       	ldi	r24, 0x16	; 22
     3dc:	91 e0       	ldi	r25, 0x01	; 1
     3de:	0e d5       	rcall	.+2588   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     3e0:	4f ef       	ldi	r20, 0xFF	; 255
     3e2:	69 e0       	ldi	r22, 0x09	; 9
     3e4:	80 e1       	ldi	r24, 0x10	; 16
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	09 d5       	rcall	.+2578   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     3ea:	40 e0       	ldi	r20, 0x00	; 0
     3ec:	64 e0       	ldi	r22, 0x04	; 4
     3ee:	86 e1       	ldi	r24, 0x16	; 22
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	04 d5       	rcall	.+2568   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     3f4:	20 e0       	ldi	r18, 0x00	; 0
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	40 e2       	ldi	r20, 0x20	; 32
     3fa:	51 e4       	ldi	r21, 0x41	; 65
     3fc:	c3 01       	movw	r24, r6
     3fe:	b2 01       	movw	r22, r4
     400:	ec d5       	rcall	.+3032   	; 0xfda <__divsf3>
     402:	58 d6       	rcall	.+3248   	; 0x10b4 <__fixunssfsi>
     404:	46 2f       	mov	r20, r22
     406:	68 e0       	ldi	r22, 0x08	; 8
     408:	86 e1       	ldi	r24, 0x16	; 22
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	f7 d4       	rcall	.+2542   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     40e:	c3 01       	movw	r24, r6
     410:	b2 01       	movw	r22, r4
     412:	4b d6       	rcall	.+3222   	; 0x10aa <__fixsfsi>
     414:	ca e0       	ldi	r28, 0x0A	; 10
     416:	d0 e0       	ldi	r29, 0x00	; 0
     418:	cb 01       	movw	r24, r22
     41a:	be 01       	movw	r22, r28
     41c:	e7 d7       	rcall	.+4046   	; 0x13ec <__divmodhi4>
     41e:	48 2f       	mov	r20, r24
     420:	40 68       	ori	r20, 0x80	; 128
     422:	66 e0       	ldi	r22, 0x06	; 6
     424:	86 e1       	ldi	r24, 0x16	; 22
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	e9 d4       	rcall	.+2514   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     42a:	20 e0       	ldi	r18, 0x00	; 0
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	40 e2       	ldi	r20, 0x20	; 32
     430:	51 e4       	ldi	r21, 0x41	; 65
     432:	c3 01       	movw	r24, r6
     434:	b2 01       	movw	r22, r4
     436:	20 d7       	rcall	.+3648   	; 0x1278 <__mulsf3>
     438:	38 d6       	rcall	.+3184   	; 0x10aa <__fixsfsi>
     43a:	cb 01       	movw	r24, r22
     43c:	be 01       	movw	r22, r28
     43e:	d6 d7       	rcall	.+4012   	; 0x13ec <__divmodhi4>
     440:	48 2f       	mov	r20, r24
     442:	62 e0       	ldi	r22, 0x02	; 2
     444:	86 e1       	ldi	r24, 0x16	; 22
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	d9 d4       	rcall	.+2482   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     44a:	40 e0       	ldi	r20, 0x00	; 0
     44c:	63 e0       	ldi	r22, 0x03	; 3
     44e:	86 e1       	ldi	r24, 0x16	; 22
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	d4 d4       	rcall	.+2472   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     454:	20 e0       	ldi	r18, 0x00	; 0
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	40 e2       	ldi	r20, 0x20	; 32
     45a:	51 e4       	ldi	r21, 0x41	; 65
     45c:	c5 01       	movw	r24, r10
     45e:	b4 01       	movw	r22, r8
     460:	bc d5       	rcall	.+2936   	; 0xfda <__divsf3>
     462:	28 d6       	rcall	.+3152   	; 0x10b4 <__fixunssfsi>
     464:	46 2f       	mov	r20, r22
     466:	67 e0       	ldi	r22, 0x07	; 7
     468:	86 e1       	ldi	r24, 0x16	; 22
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	c7 d4       	rcall	.+2446   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     46e:	c5 01       	movw	r24, r10
     470:	b4 01       	movw	r22, r8
     472:	1b d6       	rcall	.+3126   	; 0x10aa <__fixsfsi>
     474:	cb 01       	movw	r24, r22
     476:	be 01       	movw	r22, r28
     478:	b9 d7       	rcall	.+3954   	; 0x13ec <__divmodhi4>
     47a:	48 2f       	mov	r20, r24
     47c:	40 68       	ori	r20, 0x80	; 128
     47e:	65 e0       	ldi	r22, 0x05	; 5
     480:	86 e1       	ldi	r24, 0x16	; 22
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	bb d4       	rcall	.+2422   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	40 e2       	ldi	r20, 0x20	; 32
     48c:	51 e4       	ldi	r21, 0x41	; 65
     48e:	c5 01       	movw	r24, r10
     490:	b4 01       	movw	r22, r8
     492:	f2 d6       	rcall	.+3556   	; 0x1278 <__mulsf3>
     494:	0a d6       	rcall	.+3092   	; 0x10aa <__fixsfsi>
     496:	cb 01       	movw	r24, r22
     498:	be 01       	movw	r22, r28
     49a:	a8 d7       	rcall	.+3920   	; 0x13ec <__divmodhi4>
     49c:	48 2f       	mov	r20, r24
     49e:	61 e0       	ldi	r22, 0x01	; 1
     4a0:	86 e1       	ldi	r24, 0x16	; 22
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	ab d4       	rcall	.+2390   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	40 e2       	ldi	r20, 0x20	; 32
     4ac:	51 e4       	ldi	r21, 0x41	; 65
     4ae:	c7 01       	movw	r24, r14
     4b0:	b6 01       	movw	r22, r12
     4b2:	93 d5       	rcall	.+2854   	; 0xfda <__divsf3>
     4b4:	ff d5       	rcall	.+3070   	; 0x10b4 <__fixunssfsi>
     4b6:	46 2f       	mov	r20, r22
     4b8:	66 e0       	ldi	r22, 0x06	; 6
     4ba:	80 e1       	ldi	r24, 0x10	; 16
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	9e d4       	rcall	.+2364   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     4c0:	c7 01       	movw	r24, r14
     4c2:	b6 01       	movw	r22, r12
     4c4:	f2 d5       	rcall	.+3044   	; 0x10aa <__fixsfsi>
     4c6:	cb 01       	movw	r24, r22
     4c8:	be 01       	movw	r22, r28
     4ca:	90 d7       	rcall	.+3872   	; 0x13ec <__divmodhi4>
     4cc:	48 2f       	mov	r20, r24
     4ce:	40 68       	ori	r20, 0x80	; 128
     4d0:	68 e0       	ldi	r22, 0x08	; 8
     4d2:	80 e1       	ldi	r24, 0x10	; 16
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	92 d4       	rcall	.+2340   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     4d8:	20 e0       	ldi	r18, 0x00	; 0
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	40 e2       	ldi	r20, 0x20	; 32
     4de:	51 e4       	ldi	r21, 0x41	; 65
     4e0:	c7 01       	movw	r24, r14
     4e2:	b6 01       	movw	r22, r12
     4e4:	c9 d6       	rcall	.+3474   	; 0x1278 <__mulsf3>
     4e6:	e1 d5       	rcall	.+3010   	; 0x10aa <__fixsfsi>
     4e8:	cb 01       	movw	r24, r22
     4ea:	be 01       	movw	r22, r28
     4ec:	7f d7       	rcall	.+3838   	; 0x13ec <__divmodhi4>
     4ee:	48 2f       	mov	r20, r24
     4f0:	62 e0       	ldi	r22, 0x02	; 2
     4f2:	80 e1       	ldi	r24, 0x10	; 16
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	82 d4       	rcall	.+2308   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	ff 90       	pop	r15
     502:	ef 90       	pop	r14
     504:	df 90       	pop	r13
     506:	cf 90       	pop	r12
     508:	bf 90       	pop	r11
     50a:	af 90       	pop	r10
     50c:	9f 90       	pop	r9
     50e:	8f 90       	pop	r8
     510:	7f 90       	pop	r7
     512:	6f 90       	pop	r6
     514:	5f 90       	pop	r5
     516:	4f 90       	pop	r4
     518:	08 95       	ret

0000051a <_Z18sendToDisplayBelowf>:
     51a:	cf 92       	push	r12
     51c:	df 92       	push	r13
     51e:	ef 92       	push	r14
     520:	ff 92       	push	r15
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	6b 01       	movw	r12, r22
     528:	7c 01       	movw	r14, r24
     52a:	4f ef       	ldi	r20, 0xFF	; 255
     52c:	69 e0       	ldi	r22, 0x09	; 9
     52e:	80 e1       	ldi	r24, 0x10	; 16
     530:	91 e0       	ldi	r25, 0x01	; 1
     532:	64 d4       	rcall	.+2248   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	40 e2       	ldi	r20, 0x20	; 32
     53a:	51 e4       	ldi	r21, 0x41	; 65
     53c:	c7 01       	movw	r24, r14
     53e:	b6 01       	movw	r22, r12
     540:	4c d5       	rcall	.+2712   	; 0xfda <__divsf3>
     542:	b8 d5       	rcall	.+2928   	; 0x10b4 <__fixunssfsi>
     544:	46 2f       	mov	r20, r22
     546:	66 e0       	ldi	r22, 0x06	; 6
     548:	80 e1       	ldi	r24, 0x10	; 16
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	57 d4       	rcall	.+2222   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     54e:	c7 01       	movw	r24, r14
     550:	b6 01       	movw	r22, r12
     552:	ab d5       	rcall	.+2902   	; 0x10aa <__fixsfsi>
     554:	ca e0       	ldi	r28, 0x0A	; 10
     556:	d0 e0       	ldi	r29, 0x00	; 0
     558:	cb 01       	movw	r24, r22
     55a:	be 01       	movw	r22, r28
     55c:	47 d7       	rcall	.+3726   	; 0x13ec <__divmodhi4>
     55e:	48 2f       	mov	r20, r24
     560:	40 68       	ori	r20, 0x80	; 128
     562:	68 e0       	ldi	r22, 0x08	; 8
     564:	80 e1       	ldi	r24, 0x10	; 16
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	49 d4       	rcall	.+2194   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	40 e2       	ldi	r20, 0x20	; 32
     570:	51 e4       	ldi	r21, 0x41	; 65
     572:	c7 01       	movw	r24, r14
     574:	b6 01       	movw	r22, r12
     576:	80 d6       	rcall	.+3328   	; 0x1278 <__mulsf3>
     578:	98 d5       	rcall	.+2864   	; 0x10aa <__fixsfsi>
     57a:	cb 01       	movw	r24, r22
     57c:	be 01       	movw	r22, r28
     57e:	36 d7       	rcall	.+3692   	; 0x13ec <__divmodhi4>
     580:	48 2f       	mov	r20, r24
     582:	62 e0       	ldi	r22, 0x02	; 2
     584:	80 e1       	ldi	r24, 0x10	; 16
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	39 d4       	rcall	.+2162   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	ff 90       	pop	r15
     590:	ef 90       	pop	r14
     592:	df 90       	pop	r13
     594:	cf 90       	pop	r12
     596:	08 95       	ret

00000598 <_Z21displaySetTemperaturev>:
     598:	40 e0       	ldi	r20, 0x00	; 0
     59a:	69 e0       	ldi	r22, 0x09	; 9
     59c:	86 e1       	ldi	r24, 0x16	; 22
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	2d d4       	rcall	.+2138   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     5a2:	40 e0       	ldi	r20, 0x00	; 0
     5a4:	63 e0       	ldi	r22, 0x03	; 3
     5a6:	86 e1       	ldi	r24, 0x16	; 22
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	28 d4       	rcall	.+2128   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     5ac:	4b e5       	ldi	r20, 0x5B	; 91
     5ae:	67 e0       	ldi	r22, 0x07	; 7
     5b0:	86 e1       	ldi	r24, 0x16	; 22
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	23 d4       	rcall	.+2118   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     5b6:	4f e4       	ldi	r20, 0x4F	; 79
     5b8:	65 e0       	ldi	r22, 0x05	; 5
     5ba:	86 e1       	ldi	r24, 0x16	; 22
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	1e d4       	rcall	.+2108   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     5c0:	4f e0       	ldi	r20, 0x0F	; 15
     5c2:	61 e0       	ldi	r22, 0x01	; 1
     5c4:	86 e1       	ldi	r24, 0x16	; 22
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	19 d4       	rcall	.+2098   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     5ca:	4f e0       	ldi	r20, 0x0F	; 15
     5cc:	64 e0       	ldi	r22, 0x04	; 4
     5ce:	86 e1       	ldi	r24, 0x16	; 22
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	14 d4       	rcall	.+2088   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     5d4:	47 e6       	ldi	r20, 0x67	; 103
     5d6:	68 e0       	ldi	r22, 0x08	; 8
     5d8:	86 e1       	ldi	r24, 0x16	; 22
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	0f d4       	rcall	.+2078   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     5de:	40 e0       	ldi	r20, 0x00	; 0
     5e0:	66 e0       	ldi	r22, 0x06	; 6
     5e2:	86 e1       	ldi	r24, 0x16	; 22
     5e4:	91 e0       	ldi	r25, 0x01	; 1
     5e6:	0a d4       	rcall	.+2068   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     5e8:	40 e0       	ldi	r20, 0x00	; 0
     5ea:	62 e0       	ldi	r22, 0x02	; 2
     5ec:	86 e1       	ldi	r24, 0x16	; 22
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	05 c4       	rjmp	.+2058   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     5f2:	08 95       	ret

000005f4 <_Z14displayPreHeatv>:
     5f4:	40 e0       	ldi	r20, 0x00	; 0
     5f6:	69 e0       	ldi	r22, 0x09	; 9
     5f8:	86 e1       	ldi	r24, 0x16	; 22
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	ff d3       	rcall	.+2046   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	63 e0       	ldi	r22, 0x03	; 3
     602:	86 e1       	ldi	r24, 0x16	; 22
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	fa d3       	rcall	.+2036   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     608:	47 e6       	ldi	r20, 0x67	; 103
     60a:	67 e0       	ldi	r22, 0x07	; 7
     60c:	86 e1       	ldi	r24, 0x16	; 22
     60e:	91 e0       	ldi	r25, 0x01	; 1
     610:	f5 d3       	rcall	.+2026   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     612:	45 e0       	ldi	r20, 0x05	; 5
     614:	65 e0       	ldi	r22, 0x05	; 5
     616:	86 e1       	ldi	r24, 0x16	; 22
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	f0 d3       	rcall	.+2016   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     61c:	4f e4       	ldi	r20, 0x4F	; 79
     61e:	61 e0       	ldi	r22, 0x01	; 1
     620:	86 e1       	ldi	r24, 0x16	; 22
     622:	91 e0       	ldi	r25, 0x01	; 1
     624:	eb d3       	rcall	.+2006   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     626:	47 e3       	ldi	r20, 0x37	; 55
     628:	64 e0       	ldi	r22, 0x04	; 4
     62a:	86 e1       	ldi	r24, 0x16	; 22
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	e6 d3       	rcall	.+1996   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     630:	4f e4       	ldi	r20, 0x4F	; 79
     632:	68 e0       	ldi	r22, 0x08	; 8
     634:	86 e1       	ldi	r24, 0x16	; 22
     636:	91 e0       	ldi	r25, 0x01	; 1
     638:	e1 d3       	rcall	.+1986   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     63a:	47 e7       	ldi	r20, 0x77	; 119
     63c:	66 e0       	ldi	r22, 0x06	; 6
     63e:	86 e1       	ldi	r24, 0x16	; 22
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	dc d3       	rcall	.+1976   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     644:	4f e0       	ldi	r20, 0x0F	; 15
     646:	62 e0       	ldi	r22, 0x02	; 2
     648:	86 e1       	ldi	r24, 0x16	; 22
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	d7 c3       	rjmp	.+1966   	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
     64e:	08 95       	ret

00000650 <_Z8titititiv>:
// Order of right and left 4-7 segment matrix registers.
// 3 7 5 1      4 8 6 2


void titititi(){
	controls.startBuzzer();
     650:	8d e2       	ldi	r24, 0x2D	; 45
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	9e d1       	rcall	.+828    	; 0x992 <_ZN8Controls11startBuzzerEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     656:	2f ef       	ldi	r18, 0xFF	; 255
     658:	81 ee       	ldi	r24, 0xE1	; 225
     65a:	94 e0       	ldi	r25, 0x04	; 4
     65c:	21 50       	subi	r18, 0x01	; 1
     65e:	80 40       	sbci	r24, 0x00	; 0
     660:	90 40       	sbci	r25, 0x00	; 0
     662:	e1 f7       	brne	.-8      	; 0x65c <_Z8titititiv+0xc>
     664:	00 c0       	rjmp	.+0      	; 0x666 <_Z8titititiv+0x16>
     666:	00 00       	nop
	_delay_ms(100);
	controls.stopBuzzer();
     668:	8d e2       	ldi	r24, 0x2D	; 45
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	94 d1       	rcall	.+808    	; 0x996 <_ZN8Controls10stopBuzzerEv>
     66e:	2f ef       	ldi	r18, 0xFF	; 255
     670:	81 ee       	ldi	r24, 0xE1	; 225
     672:	94 e0       	ldi	r25, 0x04	; 4
     674:	21 50       	subi	r18, 0x01	; 1
     676:	80 40       	sbci	r24, 0x00	; 0
     678:	90 40       	sbci	r25, 0x00	; 0
     67a:	e1 f7       	brne	.-8      	; 0x674 <_Z8titititiv+0x24>
     67c:	00 c0       	rjmp	.+0      	; 0x67e <_Z8titititiv+0x2e>
     67e:	00 00       	nop
	_delay_ms(100);
	controls.startBuzzer();
     680:	8d e2       	ldi	r24, 0x2D	; 45
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	86 d1       	rcall	.+780    	; 0x992 <_ZN8Controls11startBuzzerEv>
     686:	2f ef       	ldi	r18, 0xFF	; 255
     688:	81 ee       	ldi	r24, 0xE1	; 225
     68a:	94 e0       	ldi	r25, 0x04	; 4
     68c:	21 50       	subi	r18, 0x01	; 1
     68e:	80 40       	sbci	r24, 0x00	; 0
     690:	90 40       	sbci	r25, 0x00	; 0
     692:	e1 f7       	brne	.-8      	; 0x68c <_Z8titititiv+0x3c>
     694:	00 c0       	rjmp	.+0      	; 0x696 <_Z8titititiv+0x46>
     696:	00 00       	nop
	_delay_ms(100);
	controls.stopBuzzer();
     698:	8d e2       	ldi	r24, 0x2D	; 45
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	7c d1       	rcall	.+760    	; 0x996 <_ZN8Controls10stopBuzzerEv>
     69e:	2f ef       	ldi	r18, 0xFF	; 255
     6a0:	85 ea       	ldi	r24, 0xA5	; 165
     6a2:	9e e0       	ldi	r25, 0x0E	; 14
     6a4:	21 50       	subi	r18, 0x01	; 1
     6a6:	80 40       	sbci	r24, 0x00	; 0
     6a8:	90 40       	sbci	r25, 0x00	; 0
     6aa:	e1 f7       	brne	.-8      	; 0x6a4 <_Z8titititiv+0x54>
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <_Z8titititiv+0x5e>
     6ae:	00 00       	nop
	_delay_ms(300);
	controls.startBuzzer();
     6b0:	8d e2       	ldi	r24, 0x2D	; 45
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	6e d1       	rcall	.+732    	; 0x992 <_ZN8Controls11startBuzzerEv>
     6b6:	2f ef       	ldi	r18, 0xFF	; 255
     6b8:	81 ee       	ldi	r24, 0xE1	; 225
     6ba:	94 e0       	ldi	r25, 0x04	; 4
     6bc:	21 50       	subi	r18, 0x01	; 1
     6be:	80 40       	sbci	r24, 0x00	; 0
     6c0:	90 40       	sbci	r25, 0x00	; 0
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <_Z8titititiv+0x6c>
     6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <_Z8titititiv+0x76>
     6c6:	00 00       	nop
	_delay_ms(100);
	controls.stopBuzzer();
     6c8:	8d e2       	ldi	r24, 0x2D	; 45
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	64 d1       	rcall	.+712    	; 0x996 <_ZN8Controls10stopBuzzerEv>
     6ce:	2f ef       	ldi	r18, 0xFF	; 255
     6d0:	81 ee       	ldi	r24, 0xE1	; 225
     6d2:	94 e0       	ldi	r25, 0x04	; 4
     6d4:	21 50       	subi	r18, 0x01	; 1
     6d6:	80 40       	sbci	r24, 0x00	; 0
     6d8:	90 40       	sbci	r25, 0x00	; 0
     6da:	e1 f7       	brne	.-8      	; 0x6d4 <_Z8titititiv+0x84>
     6dc:	00 c0       	rjmp	.+0      	; 0x6de <_Z8titititiv+0x8e>
     6de:	00 00       	nop
	_delay_ms(100);
	controls.startBuzzer();
     6e0:	8d e2       	ldi	r24, 0x2D	; 45
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	56 d1       	rcall	.+684    	; 0x992 <_ZN8Controls11startBuzzerEv>
     6e6:	2f ef       	ldi	r18, 0xFF	; 255
     6e8:	81 ee       	ldi	r24, 0xE1	; 225
     6ea:	94 e0       	ldi	r25, 0x04	; 4
     6ec:	21 50       	subi	r18, 0x01	; 1
     6ee:	80 40       	sbci	r24, 0x00	; 0
     6f0:	90 40       	sbci	r25, 0x00	; 0
     6f2:	e1 f7       	brne	.-8      	; 0x6ec <_Z8titititiv+0x9c>
     6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <_Z8titititiv+0xa6>
     6f6:	00 00       	nop
     6f8:	08 95       	ret

000006fa <_Z4titiv>:
	_delay_ms(100);
}

void titi(){
	controls.startBuzzer();
     6fa:	8d e2       	ldi	r24, 0x2D	; 45
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	49 d1       	rcall	.+658    	; 0x992 <_ZN8Controls11startBuzzerEv>
     700:	2f ef       	ldi	r18, 0xFF	; 255
     702:	81 ee       	ldi	r24, 0xE1	; 225
     704:	94 e0       	ldi	r25, 0x04	; 4
     706:	21 50       	subi	r18, 0x01	; 1
     708:	80 40       	sbci	r24, 0x00	; 0
     70a:	90 40       	sbci	r25, 0x00	; 0
     70c:	e1 f7       	brne	.-8      	; 0x706 <_Z4titiv+0xc>
     70e:	00 c0       	rjmp	.+0      	; 0x710 <_Z4titiv+0x16>
     710:	00 00       	nop
	_delay_ms(100);
	controls.stopBuzzer();
     712:	8d e2       	ldi	r24, 0x2D	; 45
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	3f d1       	rcall	.+638    	; 0x996 <_ZN8Controls10stopBuzzerEv>
     718:	2f ef       	ldi	r18, 0xFF	; 255
     71a:	81 ee       	ldi	r24, 0xE1	; 225
     71c:	94 e0       	ldi	r25, 0x04	; 4
     71e:	21 50       	subi	r18, 0x01	; 1
     720:	80 40       	sbci	r24, 0x00	; 0
     722:	90 40       	sbci	r25, 0x00	; 0
     724:	e1 f7       	brne	.-8      	; 0x71e <_Z4titiv+0x24>
     726:	00 c0       	rjmp	.+0      	; 0x728 <_Z4titiv+0x2e>
     728:	00 00       	nop
	_delay_ms(100);
	controls.startBuzzer();
     72a:	8d e2       	ldi	r24, 0x2D	; 45
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	31 d1       	rcall	.+610    	; 0x992 <_ZN8Controls11startBuzzerEv>
     730:	2f ef       	ldi	r18, 0xFF	; 255
     732:	81 ee       	ldi	r24, 0xE1	; 225
     734:	94 e0       	ldi	r25, 0x04	; 4
     736:	21 50       	subi	r18, 0x01	; 1
     738:	80 40       	sbci	r24, 0x00	; 0
     73a:	90 40       	sbci	r25, 0x00	; 0
     73c:	e1 f7       	brne	.-8      	; 0x736 <_Z4titiv+0x3c>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <_Z4titiv+0x46>
     740:	00 00       	nop
	_delay_ms(100);
	controls.stopBuzzer();
     742:	8d e2       	ldi	r24, 0x2D	; 45
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	27 d1       	rcall	.+590    	; 0x996 <_ZN8Controls10stopBuzzerEv>
     748:	2f ef       	ldi	r18, 0xFF	; 255
     74a:	81 ee       	ldi	r24, 0xE1	; 225
     74c:	94 e0       	ldi	r25, 0x04	; 4
     74e:	21 50       	subi	r18, 0x01	; 1
     750:	80 40       	sbci	r24, 0x00	; 0
     752:	90 40       	sbci	r25, 0x00	; 0
     754:	e1 f7       	brne	.-8      	; 0x74e <_Z4titiv+0x54>
     756:	00 c0       	rjmp	.+0      	; 0x758 <_Z4titiv+0x5e>
     758:	00 00       	nop
     75a:	08 95       	ret

0000075c <main>:
uint32_t countpreheat = 0;


int main(void)
{	
	initUART0();
     75c:	c9 d3       	rcall	.+1938   	; 0xef0 <_Z9initUART0v>
	init_devices();
     75e:	ad dc       	rcall	.-1702   	; 0xba <_Z12init_devicesv>
// 		}
// 		
// 	}
// 	//
	// ti ti ti ti
	titi();
     760:	cc df       	rcall	.-104    	; 0x6fa <_Z4titiv>

// 	controls.stopBuzzer();
	////////////////////
	
	//wait while preheat condition is meet.
  	while(!preHeat){
     762:	55 c0       	rjmp	.+170    	; 0x80e <main+0xb2>
 		 if(displayUpdate){
     764:	80 91 2e 01 	lds	r24, 0x012E
     768:	88 23       	and	r24, r24
     76a:	09 f4       	brne	.+2      	; 0x76e <main+0x12>
     76c:	4f c0       	rjmp	.+158    	; 0x80c <main+0xb0>
			displayUpdate = false;
     76e:	10 92 2e 01 	sts	0x012E, r1
  			maxSkin.begin(1);
     772:	61 e0       	ldi	r22, 0x01	; 1
     774:	88 e2       	ldi	r24, 0x28	; 40
     776:	91 e0       	ldi	r25, 0x01	; 1
     778:	24 d2       	rcall	.+1096   	; 0xbc2 <_ZN17Adafruit_MAX318655beginEh>
  			skin_temperature = maxSkin.temperature(100.0,430.0);
     77a:	00 e0       	ldi	r16, 0x00	; 0
     77c:	10 e0       	ldi	r17, 0x00	; 0
     77e:	27 ed       	ldi	r18, 0xD7	; 215
     780:	33 e4       	ldi	r19, 0x43	; 67
     782:	40 e0       	ldi	r20, 0x00	; 0
     784:	50 e0       	ldi	r21, 0x00	; 0
     786:	68 ec       	ldi	r22, 0xC8	; 200
     788:	72 e4       	ldi	r23, 0x42	; 66
     78a:	88 e2       	ldi	r24, 0x28	; 40
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	58 d2       	rcall	.+1200   	; 0xc40 <_ZN17Adafruit_MAX3186511temperatureEff>
     790:	60 93 24 01 	sts	0x0124, r22
     794:	70 93 25 01 	sts	0x0125, r23
     798:	80 93 26 01 	sts	0x0126, r24
     79c:	90 93 27 01 	sts	0x0127, r25
  				
    		max1.MAX7219_init();
     7a0:	86 e1       	ldi	r24, 0x16	; 22
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	4e d3       	rcall	.+1692   	; 0xe42 <_ZN7max721912MAX7219_initEv>
    		max2.MAX7219_init();
     7a6:	80 e1       	ldi	r24, 0x10	; 16
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	4b d3       	rcall	.+1686   	; 0xe42 <_ZN7max721912MAX7219_initEv>
			//these above init should be done to initialize spi 
   			//sendToDisplay(air_temperature,skin_temperature,set_temperature);
			displayPreHeat();
     7ac:	23 df       	rcall	.-442    	; 0x5f4 <_Z14displayPreHeatv>
 			sendToDisplayBelow(skin_temperature);
     7ae:	60 91 24 01 	lds	r22, 0x0124
     7b2:	70 91 25 01 	lds	r23, 0x0125
     7b6:	80 91 26 01 	lds	r24, 0x0126
     7ba:	90 91 27 01 	lds	r25, 0x0127
     7be:	ad de       	rcall	.-678    	; 0x51a <_Z18sendToDisplayBelowf>
			 if(skin_temperature > 35) {
     7c0:	c0 90 24 01 	lds	r12, 0x0124
     7c4:	d0 90 25 01 	lds	r13, 0x0125
     7c8:	e0 90 26 01 	lds	r14, 0x0126
     7cc:	f0 90 27 01 	lds	r15, 0x0127
     7d0:	20 e0       	ldi	r18, 0x00	; 0
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	4c e0       	ldi	r20, 0x0C	; 12
     7d6:	52 e4       	ldi	r21, 0x42	; 66
     7d8:	c7 01       	movw	r24, r14
     7da:	b6 01       	movw	r22, r12
     7dc:	49 d5       	rcall	.+2706   	; 0x1270 <__gesf2>
     7de:	18 16       	cp	r1, r24
     7e0:	44 f4       	brge	.+16     	; 0x7f2 <main+0x96>
				controls.stopHeater();
     7e2:	8d e2       	ldi	r24, 0x2D	; 45
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	d3 d0       	rcall	.+422    	; 0x98e <_ZN8Controls10stopHeaterEv>
				preHeat = true;
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	80 93 08 01 	sts	0x0108, r24
				titititi();
     7ee:	30 df       	rcall	.-416    	; 0x650 <_Z8titititiv>
     7f0:	0e c0       	rjmp	.+28     	; 0x80e <main+0xb2>
				}
			else if(skin_temperature <35) {
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	4c e0       	ldi	r20, 0x0C	; 12
     7f8:	52 e4       	ldi	r21, 0x42	; 66
     7fa:	c7 01       	movw	r24, r14
     7fc:	b6 01       	movw	r22, r12
     7fe:	e9 d3       	rcall	.+2002   	; 0xfd2 <__cmpsf2>
     800:	88 23       	and	r24, r24
     802:	2c f4       	brge	.+10     	; 0x80e <main+0xb2>
				controls.startHeater();
     804:	8d e2       	ldi	r24, 0x2D	; 45
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	c0 d0       	rcall	.+384    	; 0x98a <_ZN8Controls11startHeaterEv>
     80a:	01 c0       	rjmp	.+2      	; 0x80e <main+0xb2>
				}
 		 }
 		  
 		  else{
			   asm volatile ("nop");
     80c:	00 00       	nop

// 	controls.stopBuzzer();
	////////////////////
	
	//wait while preheat condition is meet.
  	while(!preHeat){
     80e:	80 91 08 01 	lds	r24, 0x0108
     812:	88 23       	and	r24, r24
     814:	09 f4       	brne	.+2      	; 0x818 <main+0xbc>
     816:	a6 cf       	rjmp	.-180    	; 0x764 <main+0x8>
  	}
	while(1)
	
	{
		
 		check();
     818:	b3 dc       	rcall	.-1690   	; 0x180 <_Z5checkv>
 		if(displayUpdate) {
     81a:	80 91 2e 01 	lds	r24, 0x012E
     81e:	88 23       	and	r24, r24
     820:	d9 f3       	breq	.-10     	; 0x818 <main+0xbc>
 			//spi for max7219 for display
 			max1.MAX7219_init(); // these are init
     822:	86 e1       	ldi	r24, 0x16	; 22
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	0d d3       	rcall	.+1562   	; 0xe42 <_ZN7max721912MAX7219_initEv>
 			max2.MAX7219_init();
     828:	80 e1       	ldi	r24, 0x10	; 16
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	0a d3       	rcall	.+1556   	; 0xe42 <_ZN7max721912MAX7219_initEv>
			 // sending this
			 if(button_change){
     82e:	80 91 0a 01 	lds	r24, 0x010A
     832:	88 23       	and	r24, r24
     834:	59 f0       	breq	.+22     	; 0x84c <main+0xf0>
				 sendToDisplayBelow(set_temperature_copy);
     836:	60 91 1c 01 	lds	r22, 0x011C
     83a:	70 91 1d 01 	lds	r23, 0x011D
     83e:	80 91 1e 01 	lds	r24, 0x011E
     842:	90 91 1f 01 	lds	r25, 0x011F
     846:	69 de       	rcall	.-814    	; 0x51a <_Z18sendToDisplayBelowf>
				 displaySetTemperature();
     848:	a7 de       	rcall	.-690    	; 0x598 <_Z21displaySetTemperaturev>
     84a:	19 c0       	rjmp	.+50     	; 0x87e <main+0x122>
			 }
			 
			 else{
				 sendToDisplay(air_temperature, skin_temperature, set_temperature);
     84c:	e0 90 00 01 	lds	r14, 0x0100
     850:	f0 90 01 01 	lds	r15, 0x0101
     854:	00 91 02 01 	lds	r16, 0x0102
     858:	10 91 03 01 	lds	r17, 0x0103
     85c:	20 91 24 01 	lds	r18, 0x0124
     860:	30 91 25 01 	lds	r19, 0x0125
     864:	40 91 26 01 	lds	r20, 0x0126
     868:	50 91 27 01 	lds	r21, 0x0127
     86c:	60 91 20 01 	lds	r22, 0x0120
     870:	70 91 21 01 	lds	r23, 0x0121
     874:	80 91 22 01 	lds	r24, 0x0122
     878:	90 91 23 01 	lds	r25, 0x0123
     87c:	96 dd       	rcall	.-1236   	; 0x3aa <_Z13sendToDisplayfff>
			 }
			 	
 			//spi for temperature pt100
 			////maxAir.begin(0); //these are init 
 			maxSkin.begin(1);
     87e:	61 e0       	ldi	r22, 0x01	; 1
     880:	88 e2       	ldi	r24, 0x28	; 40
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	9e d1       	rcall	.+828    	; 0xbc2 <_ZN17Adafruit_MAX318655beginEh>
 			skin_temperature = maxSkin.temperature(100.0, 430.0);
     886:	00 e0       	ldi	r16, 0x00	; 0
     888:	10 e0       	ldi	r17, 0x00	; 0
     88a:	27 ed       	ldi	r18, 0xD7	; 215
     88c:	33 e4       	ldi	r19, 0x43	; 67
     88e:	40 e0       	ldi	r20, 0x00	; 0
     890:	50 e0       	ldi	r21, 0x00	; 0
     892:	68 ec       	ldi	r22, 0xC8	; 200
     894:	72 e4       	ldi	r23, 0x42	; 66
     896:	88 e2       	ldi	r24, 0x28	; 40
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	d2 d1       	rcall	.+932    	; 0xc40 <_ZN17Adafruit_MAX3186511temperatureEff>
     89c:	6b 01       	movw	r12, r22
     89e:	7c 01       	movw	r14, r24
     8a0:	60 93 24 01 	sts	0x0124, r22
     8a4:	70 93 25 01 	sts	0x0125, r23
     8a8:	80 93 26 01 	sts	0x0126, r24
     8ac:	90 93 27 01 	sts	0x0127, r25
			 
			 //checking for emergency conditions and acting according to it.
			 // if not emergency, act according to setpoint temperature of skin
			 // if at emergency, no matter what stop or start heater according to critical high or low temperature respectively. 
			 if(skin_temperature > HYPERTHERMIAHIGHTEMPERATURE){
     8b0:	2d ec       	ldi	r18, 0xCD	; 205
     8b2:	3c ec       	ldi	r19, 0xCC	; 204
     8b4:	44 e1       	ldi	r20, 0x14	; 20
     8b6:	52 e4       	ldi	r21, 0x42	; 66
     8b8:	db d4       	rcall	.+2486   	; 0x1270 <__gesf2>
     8ba:	18 16       	cp	r1, r24
     8bc:	54 f4       	brge	.+20     	; 0x8d2 <main+0x176>
				 emergencyAlert = true;
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	80 93 09 01 	sts	0x0109, r24
				 controls.startBuzzer();
     8c4:	8d e2       	ldi	r24, 0x2D	; 45
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	64 d0       	rcall	.+200    	; 0x992 <_ZN8Controls11startBuzzerEv>
				 controls.stopHeater();
     8ca:	8d e2       	ldi	r24, 0x2D	; 45
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	5f d0       	rcall	.+190    	; 0x98e <_ZN8Controls10stopHeaterEv>
     8d0:	44 c0       	rjmp	.+136    	; 0x95a <__stack+0x5b>
			 }
			 else if(skin_temperature < HYPOTHERMIALOWTEMPERATURE){
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	42 e1       	ldi	r20, 0x12	; 18
     8d8:	52 e4       	ldi	r21, 0x42	; 66
     8da:	c7 01       	movw	r24, r14
     8dc:	b6 01       	movw	r22, r12
     8de:	79 d3       	rcall	.+1778   	; 0xfd2 <__cmpsf2>
     8e0:	88 23       	and	r24, r24
     8e2:	54 f4       	brge	.+20     	; 0x8f8 <main+0x19c>
				emergencyAlert = true;
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	80 93 09 01 	sts	0x0109, r24
				controls.startBuzzer();
     8ea:	8d e2       	ldi	r24, 0x2D	; 45
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	51 d0       	rcall	.+162    	; 0x992 <_ZN8Controls11startBuzzerEv>
				controls.startHeater();
     8f0:	8d e2       	ldi	r24, 0x2D	; 45
     8f2:	91 e0       	ldi	r25, 0x01	; 1
     8f4:	4a d0       	rcall	.+148    	; 0x98a <_ZN8Controls11startHeaterEv>
     8f6:	31 c0       	rjmp	.+98     	; 0x95a <__stack+0x5b>
			 }
			 else{
				 emergencyAlert = false;
     8f8:	10 92 09 01 	sts	0x0109, r1
				 controls.stopBuzzer();
     8fc:	8d e2       	ldi	r24, 0x2D	; 45
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	4a d0       	rcall	.+148    	; 0x996 <_ZN8Controls10stopBuzzerEv>
				 if(skin_temperature > set_temperature) {
     902:	c0 90 24 01 	lds	r12, 0x0124
     906:	d0 90 25 01 	lds	r13, 0x0125
     90a:	e0 90 26 01 	lds	r14, 0x0126
     90e:	f0 90 27 01 	lds	r15, 0x0127
     912:	80 90 00 01 	lds	r8, 0x0100
     916:	90 90 01 01 	lds	r9, 0x0101
     91a:	a0 90 02 01 	lds	r10, 0x0102
     91e:	b0 90 03 01 	lds	r11, 0x0103
     922:	a5 01       	movw	r20, r10
     924:	94 01       	movw	r18, r8
     926:	c7 01       	movw	r24, r14
     928:	b6 01       	movw	r22, r12
     92a:	a2 d4       	rcall	.+2372   	; 0x1270 <__gesf2>
     92c:	18 16       	cp	r1, r24
     92e:	24 f4       	brge	.+8      	; 0x938 <__stack+0x39>
					 controls.stopHeater();
     930:	8d e2       	ldi	r24, 0x2D	; 45
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	2c d0       	rcall	.+88     	; 0x98e <_ZN8Controls10stopHeaterEv>
     936:	11 c0       	rjmp	.+34     	; 0x95a <__stack+0x5b>
					 }else if(skin_temperature < (set_temperature - 0.2)) {
     938:	2d ec       	ldi	r18, 0xCD	; 205
     93a:	3c ec       	ldi	r19, 0xCC	; 204
     93c:	4c e4       	ldi	r20, 0x4C	; 76
     93e:	5e e3       	ldi	r21, 0x3E	; 62
     940:	c5 01       	movw	r24, r10
     942:	b4 01       	movw	r22, r8
     944:	e1 d2       	rcall	.+1474   	; 0xf08 <__subsf3>
     946:	9b 01       	movw	r18, r22
     948:	ac 01       	movw	r20, r24
     94a:	c7 01       	movw	r24, r14
     94c:	b6 01       	movw	r22, r12
     94e:	41 d3       	rcall	.+1666   	; 0xfd2 <__cmpsf2>
     950:	88 23       	and	r24, r24
     952:	1c f4       	brge	.+6      	; 0x95a <__stack+0x5b>
					 controls.startHeater();
     954:	8d e2       	ldi	r24, 0x2D	; 45
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	18 d0       	rcall	.+48     	; 0x98a <_ZN8Controls11startHeaterEv>
				 }
			 }
				 
 			////air_temperature = maxAir.temperature(100.0, 430.0);
 			                                                                                                                                                                                                                               
 			displayUpdate = false;
     95a:	10 92 2e 01 	sts	0x012E, r1
     95e:	5c cf       	rjmp	.-328    	; 0x818 <main+0xbc>

00000960 <_GLOBAL__sub_I_timerr>:
Adafruit_MAX31865 maxSkin;

float skin_temperature = 0.0;
float air_temperature = 0.0;
float set_temperature = 36.50;
float set_temperature_copy = set_temperature;
     960:	80 91 00 01 	lds	r24, 0x0100
     964:	90 91 01 01 	lds	r25, 0x0101
     968:	a0 91 02 01 	lds	r26, 0x0102
     96c:	b0 91 03 01 	lds	r27, 0x0103
     970:	80 93 1c 01 	sts	0x011C, r24
     974:	90 93 1d 01 	sts	0x011D, r25
     978:	a0 93 1e 01 	sts	0x011E, r26
     97c:	b0 93 1f 01 	sts	0x011F, r27
     980:	08 95       	ret

00000982 <_ZN8Controls12initControlsEv>:

void Controls::startHeater() {
	HEATER_PORT |= (1 << HEATER_PIN);
}

void Controls::stopFan() {
     982:	53 9a       	sbi	0x0a, 3	; 10
     984:	3d 9a       	sbi	0x07, 5	; 7
     986:	5b 98       	cbi	0x0b, 3	; 11
     988:	08 95       	ret

0000098a <_ZN8Controls11startHeaterEv>:
     98a:	5b 9a       	sbi	0x0b, 3	; 11
     98c:	08 95       	ret

0000098e <_ZN8Controls10stopHeaterEv>:
	//FAN_PORT &=~ (1 << FAN_PIN);
	//PORTB &=~ ((1 << PINB7) | (1 << PINB4));
}

void Controls::stopHeater() {
	HEATER_PORT &=~ (1 << HEATER_PIN);
     98e:	5b 98       	cbi	0x0b, 3	; 11
     990:	08 95       	ret

00000992 <_ZN8Controls11startBuzzerEv>:
}

void Controls::startBuzzer() {
	BUZZER_PORT |= (1 << BUZZER_PIN);
     992:	45 9a       	sbi	0x08, 5	; 8
     994:	08 95       	ret

00000996 <_ZN8Controls10stopBuzzerEv>:
}

void Controls::stopBuzzer() {
	BUZZER_PORT &=~ (1 << BUZZER_PIN);
     996:	45 98       	cbi	0x08, 5	; 8
     998:	08 95       	ret

0000099a <_ZN3led8led_initEv>:
#include <avr/io.h>

#define DDR(x) (*(&x - 1))      /* address of data direction register of port x */

void led::led_init() {
	DDR(TS_HIGH_PORT) |= (1 << TS_HIGH_PIN);
     99a:	56 9a       	sbi	0x0a, 6	; 10
	DDR(TA_HIGH_PORT) |= (1 << TA_HIGH_PIN);
     99c:	50 9a       	sbi	0x0a, 0	; 10
	DDR(SET_TEMP_PORT) |= (1 << SET_TEMP_PIN);
     99e:	51 9a       	sbi	0x0a, 1	; 10
	DDR(SENSOR_FAIL_PORT) |= (1 << SENSOR_FAIL_PIN);
     9a0:	51 9a       	sbi	0x0a, 1	; 10
	DDR(HEATER_FAIL_PORT) |= (1 << HEATER_FAIL_PIN);
     9a2:	57 9a       	sbi	0x0a, 7	; 10
	DDR(POWER_PORT) |= (1 << POWER_PIN);
     9a4:	50 9a       	sbi	0x0a, 0	; 10
     9a6:	08 95       	ret

000009a8 <_ZN3led6led_doEii>:
	
}


void led::led_do(int led_num, int state) {
	switch(led_num) {
     9a8:	62 30       	cpi	r22, 0x02	; 2
     9aa:	71 05       	cpc	r23, r1
     9ac:	41 f1       	breq	.+80     	; 0x9fe <_ZN3led6led_doEii+0x56>
     9ae:	3c f4       	brge	.+14     	; 0x9be <_ZN3led6led_doEii+0x16>
     9b0:	61 15       	cp	r22, r1
     9b2:	71 05       	cpc	r23, r1
     9b4:	61 f0       	breq	.+24     	; 0x9ce <_ZN3led6led_doEii+0x26>
     9b6:	61 30       	cpi	r22, 0x01	; 1
     9b8:	71 05       	cpc	r23, r1
     9ba:	79 f0       	breq	.+30     	; 0x9da <_ZN3led6led_doEii+0x32>
     9bc:	08 95       	ret
     9be:	64 30       	cpi	r22, 0x04	; 4
     9c0:	71 05       	cpc	r23, r1
     9c2:	b9 f0       	breq	.+46     	; 0x9f2 <_ZN3led6led_doEii+0x4a>
     9c4:	14 f1       	brlt	.+68     	; 0xa0a <_ZN3led6led_doEii+0x62>
     9c6:	65 30       	cpi	r22, 0x05	; 5
     9c8:	71 05       	cpc	r23, r1
     9ca:	69 f0       	breq	.+26     	; 0x9e6 <_ZN3led6led_doEii+0x3e>
     9cc:	08 95       	ret
		case TS_HIGH_LED:
		REGISTER_LED(TS_HIGH_PORT, TS_HIGH_PIN, state);
     9ce:	45 2b       	or	r20, r21
     9d0:	11 f0       	breq	.+4      	; 0x9d6 <_ZN3led6led_doEii+0x2e>
     9d2:	5e 9a       	sbi	0x0b, 6	; 11
     9d4:	08 95       	ret
     9d6:	5e 98       	cbi	0x0b, 6	; 11
     9d8:	08 95       	ret
		break;
	
		case TA_HIGH_LED:
		REGISTER_LED(TA_HIGH_PORT, TA_HIGH_PIN, state);
     9da:	45 2b       	or	r20, r21
     9dc:	11 f0       	breq	.+4      	; 0x9e2 <_ZN3led6led_doEii+0x3a>
     9de:	58 9a       	sbi	0x0b, 0	; 11
     9e0:	08 95       	ret
     9e2:	58 98       	cbi	0x0b, 0	; 11
     9e4:	08 95       	ret
		break;
		
		case SENSOR_FAIL_LED:
		REGISTER_LED(SENSOR_FAIL_PORT, SENSOR_FAIL_PIN, state);
     9e6:	45 2b       	or	r20, r21
     9e8:	11 f0       	breq	.+4      	; 0x9ee <_ZN3led6led_doEii+0x46>
     9ea:	59 9a       	sbi	0x0b, 1	; 11
     9ec:	08 95       	ret
     9ee:	59 98       	cbi	0x0b, 1	; 11
     9f0:	08 95       	ret
		break;
		
		case HEATER_FAIL_LED:
		REGISTER_LED(HEATER_FAIL_PORT, HEATER_FAIL_PIN, state);
     9f2:	45 2b       	or	r20, r21
     9f4:	11 f0       	breq	.+4      	; 0x9fa <_ZN3led6led_doEii+0x52>
     9f6:	5f 9a       	sbi	0x0b, 7	; 11
     9f8:	08 95       	ret
     9fa:	5f 98       	cbi	0x0b, 7	; 11
     9fc:	08 95       	ret
		break;
		
		case SET_TEMP_LED:
		REGISTER_LED(SET_TEMP_PORT, SET_TEMP_PIN, state);
     9fe:	45 2b       	or	r20, r21
     a00:	11 f0       	breq	.+4      	; 0xa06 <_ZN3led6led_doEii+0x5e>
     a02:	59 9a       	sbi	0x0b, 1	; 11
     a04:	08 95       	ret
     a06:	59 98       	cbi	0x0b, 1	; 11
     a08:	08 95       	ret
		break;
		
		case POWER_LED:
		REGISTER_LED(POWER_PORT, POWER_PIN, state);
     a0a:	45 2b       	or	r20, r21
     a0c:	11 f0       	breq	.+4      	; 0xa12 <_ZN3led6led_doEii+0x6a>
     a0e:	58 9a       	sbi	0x0b, 0	; 11
     a10:	08 95       	ret
     a12:	58 98       	cbi	0x0b, 0	; 11
     a14:	08 95       	ret

00000a16 <_ZN17Adafruit_MAX318657spixferEh>:
}


uint8_t Adafruit_MAX31865::readFault(void) {
	return readRegister8(MAX31856_FAULTSTAT_REG);
}
     a16:	6e bd       	out	0x2e, r22	; 46
     a18:	0d b4       	in	r0, 0x2d	; 45
     a1a:	07 fe       	sbrs	r0, 7
     a1c:	fd cf       	rjmp	.-6      	; 0xa18 <_ZN17Adafruit_MAX318657spixferEh+0x2>
     a1e:	8e b5       	in	r24, 0x2e	; 46
     a20:	08 95       	ret

00000a22 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>:
     a22:	ef 92       	push	r14
     a24:	ff 92       	push	r15
     a26:	0f 93       	push	r16
     a28:	1f 93       	push	r17
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	7c 01       	movw	r14, r24
     a30:	ea 01       	movw	r28, r20
     a32:	12 2f       	mov	r17, r18
     a34:	fc 01       	movw	r30, r24
     a36:	80 81       	ld	r24, Z
     a38:	88 23       	and	r24, r24
     a3a:	19 f0       	breq	.+6      	; 0xa42 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x20>
     a3c:	81 30       	cpi	r24, 0x01	; 1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x26>
     a40:	05 c0       	rjmp	.+10     	; 0xa4c <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x2a>
     a42:	29 98       	cbi	0x05, 1	; 5
     a44:	2a 9a       	sbi	0x05, 2	; 5
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x2a>
     a48:	2a 98       	cbi	0x05, 2	; 5
     a4a:	29 9a       	sbi	0x05, 1	; 5
     a4c:	6f 77       	andi	r22, 0x7F	; 127
     a4e:	c7 01       	movw	r24, r14
     a50:	e2 df       	rcall	.-60     	; 0xa16 <_ZN17Adafruit_MAX318657spixferEh>
     a52:	0f ef       	ldi	r16, 0xFF	; 255
     a54:	01 0f       	add	r16, r17
     a56:	11 23       	and	r17, r17
     a58:	61 f0       	breq	.+24     	; 0xa72 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x50>
     a5a:	10 e0       	ldi	r17, 0x00	; 0
     a5c:	0f 5f       	subi	r16, 0xFF	; 255
     a5e:	1f 4f       	sbci	r17, 0xFF	; 255
     a60:	0c 0f       	add	r16, r28
     a62:	1d 1f       	adc	r17, r29
     a64:	6f ef       	ldi	r22, 0xFF	; 255
     a66:	c7 01       	movw	r24, r14
     a68:	d6 df       	rcall	.-84     	; 0xa16 <_ZN17Adafruit_MAX318657spixferEh>
     a6a:	89 93       	st	Y+, r24
     a6c:	c0 17       	cp	r28, r16
     a6e:	d1 07       	cpc	r29, r17
     a70:	c9 f7       	brne	.-14     	; 0xa64 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x42>
     a72:	f7 01       	movw	r30, r14
     a74:	80 81       	ld	r24, Z
     a76:	88 23       	and	r24, r24
     a78:	19 f0       	breq	.+6      	; 0xa80 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x5e>
     a7a:	81 30       	cpi	r24, 0x01	; 1
     a7c:	19 f0       	breq	.+6      	; 0xa84 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x62>
     a7e:	03 c0       	rjmp	.+6      	; 0xa86 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x64>
     a80:	29 9a       	sbi	0x05, 1	; 5
     a82:	01 c0       	rjmp	.+2      	; 0xa86 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x64>
     a84:	2a 9a       	sbi	0x05, 2	; 5
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	ff 90       	pop	r15
     a90:	ef 90       	pop	r14
     a92:	08 95       	ret

00000a94 <_ZN17Adafruit_MAX3186513readRegister8Eh>:
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	1f 92       	push	r1
     a9a:	cd b7       	in	r28, 0x3d	; 61
     a9c:	de b7       	in	r29, 0x3e	; 62
     a9e:	19 82       	std	Y+1, r1	; 0x01
     aa0:	21 e0       	ldi	r18, 0x01	; 1
     aa2:	ae 01       	movw	r20, r28
     aa4:	4f 5f       	subi	r20, 0xFF	; 255
     aa6:	5f 4f       	sbci	r21, 0xFF	; 255
     aa8:	bc df       	rcall	.-136    	; 0xa22 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>
     aaa:	89 81       	ldd	r24, Y+1	; 0x01
     aac:	0f 90       	pop	r0
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	08 95       	ret

00000ab4 <_ZN17Adafruit_MAX3186514readRegister16Eh>:
	readRegisterN(addr, &ret, 1);
	
	return ret;
}

uint16_t Adafruit_MAX31865::readRegister16(uint8_t addr) {
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	00 d0       	rcall	.+0      	; 0xaba <_ZN17Adafruit_MAX3186514readRegister16Eh+0x6>
     aba:	cd b7       	in	r28, 0x3d	; 61
     abc:	de b7       	in	r29, 0x3e	; 62
uint8_t buffer[2] = {0, 0};
     abe:	19 82       	std	Y+1, r1	; 0x01
     ac0:	1a 82       	std	Y+2, r1	; 0x02
readRegisterN(addr, buffer, 2);
     ac2:	22 e0       	ldi	r18, 0x02	; 2
     ac4:	ae 01       	movw	r20, r28
     ac6:	4f 5f       	subi	r20, 0xFF	; 255
     ac8:	5f 4f       	sbci	r21, 0xFF	; 255
     aca:	ab df       	rcall	.-170    	; 0xa22 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>

uint16_t ret = buffer[0];
     acc:	89 81       	ldd	r24, Y+1	; 0x01
     ace:	90 e0       	ldi	r25, 0x00	; 0
ret <<= 8;
     ad0:	98 2f       	mov	r25, r24
     ad2:	88 27       	eor	r24, r24
ret |=  buffer[1];
     ad4:	2a 81       	ldd	r18, Y+2	; 0x02

return ret;
}
     ad6:	82 2b       	or	r24, r18
     ad8:	0f 90       	pop	r0
     ada:	0f 90       	pop	r0
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	08 95       	ret

00000ae2 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>:

 
}


void Adafruit_MAX31865::writeRegister8(uint8_t addr, uint8_t data) {
     ae2:	1f 93       	push	r17
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	ec 01       	movw	r28, r24
     aea:	14 2f       	mov	r17, r20
 
  switch(choose) {
     aec:	88 81       	ld	r24, Y
     aee:	88 23       	and	r24, r24
     af0:	19 f0       	breq	.+6      	; 0xaf8 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x16>
     af2:	81 30       	cpi	r24, 0x01	; 1
     af4:	21 f0       	breq	.+8      	; 0xafe <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x1c>
     af6:	05 c0       	rjmp	.+10     	; 0xb02 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x20>
	  case 0:
		TEMP_I_PORT &=~ (1 << PINB1);
     af8:	29 98       	cbi	0x05, 1	; 5
		TEMP_II_PORT |= (1 << PINB2);
     afa:	2a 9a       	sbi	0x05, 2	; 5
		break;
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x20>
	  case 1:
		TEMP_II_PORT &=~ (1 << PINB2);
     afe:	2a 98       	cbi	0x05, 2	; 5
		TEMP_I_PORT |= (1 << PINB1);
     b00:	29 9a       	sbi	0x05, 1	; 5
		break;
  }
  spixfer(addr | 0x80);   // make sure top bit is set
     b02:	60 68       	ori	r22, 0x80	; 128
     b04:	ce 01       	movw	r24, r28
     b06:	87 df       	rcall	.-242    	; 0xa16 <_ZN17Adafruit_MAX318657spixferEh>
  spixfer(data);
     b08:	61 2f       	mov	r22, r17
     b0a:	ce 01       	movw	r24, r28
     b0c:	84 df       	rcall	.-248    	; 0xa16 <_ZN17Adafruit_MAX318657spixferEh>

  //Serial.print("$"); Serial.print(addr, HEX); Serial.print(" = 0x"); Serial.println(data, HEX);

switch(choose) {
     b0e:	88 81       	ld	r24, Y
     b10:	88 23       	and	r24, r24
     b12:	19 f0       	breq	.+6      	; 0xb1a <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x38>
     b14:	81 30       	cpi	r24, 0x01	; 1
     b16:	19 f0       	breq	.+6      	; 0xb1e <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x3c>
     b18:	03 c0       	rjmp	.+6      	; 0xb20 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x3e>
   case 0:
	TEMP_I_PORT |= (1 << PINB1);
     b1a:	29 9a       	sbi	0x05, 1	; 5
	break;
     b1c:	01 c0       	rjmp	.+2      	; 0xb20 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x3e>
  case 1:
	TEMP_II_PORT |= (1 << PINB2);
     b1e:	2a 9a       	sbi	0x05, 2	; 5
	break;
}
}
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	08 95       	ret

00000b28 <_ZN17Adafruit_MAX3186510clearFaultEv>:

uint8_t Adafruit_MAX31865::readFault(void) {
	return readRegister8(MAX31856_FAULTSTAT_REG);
}

void Adafruit_MAX31865::clearFault(void) {
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	ec 01       	movw	r28, r24
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	b1 df       	rcall	.-158    	; 0xa94 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	t &= ~0x2C;
     b32:	83 7d       	andi	r24, 0xD3	; 211
	t |= MAX31856_CONFIG_FAULTSTAT;
     b34:	48 2f       	mov	r20, r24
     b36:	42 60       	ori	r20, 0x02	; 2
	writeRegister8(MAX31856_CONFIG_REG, t);
     b38:	60 e0       	ldi	r22, 0x00	; 0
     b3a:	ce 01       	movw	r24, r28
     b3c:	d2 df       	rcall	.-92     	; 0xae2 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	08 95       	ret

00000b44 <_ZN17Adafruit_MAX3186510enableBiasEb>:

void Adafruit_MAX31865::enableBias(bool b) {
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	ec 01       	movw	r28, r24
     b4c:	16 2f       	mov	r17, r22
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	a1 df       	rcall	.-190    	; 0xa94 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	if (b) {
     b52:	11 23       	and	r17, r17
     b54:	19 f0       	breq	.+6      	; 0xb5c <_ZN17Adafruit_MAX3186510enableBiasEb+0x18>
		t |= MAX31856_CONFIG_BIAS;       // enable bias
     b56:	48 2f       	mov	r20, r24
     b58:	40 68       	ori	r20, 0x80	; 128
     b5a:	02 c0       	rjmp	.+4      	; 0xb60 <_ZN17Adafruit_MAX3186510enableBiasEb+0x1c>
	} else {
		t &= ~MAX31856_CONFIG_BIAS;       // disable bias
     b5c:	48 2f       	mov	r20, r24
     b5e:	4f 77       	andi	r20, 0x7F	; 127
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	ce 01       	movw	r24, r28
     b64:	be df       	rcall	.-132    	; 0xae2 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	1f 91       	pop	r17
     b6c:	08 95       	ret

00000b6e <_ZN17Adafruit_MAX3186511autoConvertEb>:

void Adafruit_MAX31865::autoConvert(bool b) {
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	ec 01       	movw	r28, r24
     b76:	16 2f       	mov	r17, r22
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	8c df       	rcall	.-232    	; 0xa94 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	if (b) {
     b7c:	11 23       	and	r17, r17
     b7e:	19 f0       	breq	.+6      	; 0xb86 <_ZN17Adafruit_MAX3186511autoConvertEb+0x18>
		t |= MAX31856_CONFIG_MODEAUTO;       // enable autoconvert
     b80:	48 2f       	mov	r20, r24
     b82:	40 64       	ori	r20, 0x40	; 64
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <_ZN17Adafruit_MAX3186511autoConvertEb+0x1c>
	} else {
		t &= ~MAX31856_CONFIG_MODEAUTO;       // disable autoconvert
     b86:	48 2f       	mov	r20, r24
     b88:	4f 7b       	andi	r20, 0xBF	; 191
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	ce 01       	movw	r24, r28
     b8e:	a9 df       	rcall	.-174    	; 0xae2 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	1f 91       	pop	r17
     b96:	08 95       	ret

00000b98 <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires>:

void Adafruit_MAX31865::setWires(max31865_numwires_t wires ) {
     b98:	1f 93       	push	r17
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	ec 01       	movw	r28, r24
     ba0:	16 2f       	mov	r17, r22
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	77 df       	rcall	.-274    	; 0xa94 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	if (wires == MAX31865_3WIRE) {
     ba6:	11 30       	cpi	r17, 0x01	; 1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires+0x18>
		t |= MAX31856_CONFIG_3WIRE;
     baa:	48 2f       	mov	r20, r24
     bac:	40 61       	ori	r20, 0x10	; 16
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires+0x1c>
	} else {
		// 2 or 4 wire
		t &= ~MAX31856_CONFIG_3WIRE;
     bb0:	48 2f       	mov	r20, r24
     bb2:	4f 7e       	andi	r20, 0xEF	; 239
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	ce 01       	movw	r24, r28
     bb8:	94 df       	rcall	.-216    	; 0xae2 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	1f 91       	pop	r17
     bc0:	08 95       	ret

00000bc2 <_ZN17Adafruit_MAX318655beginEh>:
#include <stdlib.h>
#include "header.h"
#include <util/delay.h>


bool Adafruit_MAX31865::begin(uint8_t choose1) {
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	ec 01       	movw	r28, r24
     bca:	16 2f       	mov	r17, r22
	
	DISPLAY_I_PORT |= (1 << DISPLAY_I_PIN) | (1 << DISPLAY_II_PIN);
     bcc:	8b b1       	in	r24, 0x0b	; 11
     bce:	80 63       	ori	r24, 0x30	; 48
     bd0:	8b b9       	out	0x0b, r24	; 11
	SPI.begin();
     bd2:	60 d1       	rcall	.+704    	; 0xe94 <_ZN8SPIClass5beginEv>
  static void begin();
  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    SPCR = settings.spcr;
     bd4:	85 e5       	ldi	r24, 0x55	; 85
     bd6:	8c bd       	out	0x2c, r24	; 44
	SPI.beginTransaction(SPISettings(1000000,MSBFIRST,SPI_MODE1));
	for (uint8_t i=0; i<16; i++) {
		// readRegister8(i);
	}
	choose = choose1;
     bd8:	18 83       	st	Y, r17
	setWires(MAX31865_3WIRE);
     bda:	61 e0       	ldi	r22, 0x01	; 1
     bdc:	ce 01       	movw	r24, r28
     bde:	dc df       	rcall	.-72     	; 0xb98 <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires>
	enableBias(false);
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	ce 01       	movw	r24, r28
     be4:	af df       	rcall	.-162    	; 0xb44 <_ZN17Adafruit_MAX3186510enableBiasEb>
	autoConvert(false);
     be6:	60 e0       	ldi	r22, 0x00	; 0
     be8:	ce 01       	movw	r24, r28
     bea:	c1 df       	rcall	.-126    	; 0xb6e <_ZN17Adafruit_MAX3186511autoConvertEb>
	clearFault();
     bec:	ce 01       	movw	r24, r28
     bee:	9c df       	rcall	.-200    	; 0xb28 <_ZN17Adafruit_MAX3186510clearFaultEv>
	
	//Serial.print("config: "); Serial.println(readRegister8(MAX31856_CONFIG_REG), HEX);
	return true;
}
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	08 95       	ret

00000bfa <_ZN17Adafruit_MAX318657readRTDEv>:
	temp += 1.5243e-10 * rpoly;

	return temp;
}

uint16_t Adafruit_MAX31865::readRTD (void) {
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	ec 01       	movw	r28, r24
	clearFault();
     c00:	93 df       	rcall	.-218    	; 0xb28 <_ZN17Adafruit_MAX3186510clearFaultEv>
	enableBias(true);
     c02:	61 e0       	ldi	r22, 0x01	; 1
     c04:	ce 01       	movw	r24, r28
     c06:	9e df       	rcall	.-196    	; 0xb44 <_ZN17Adafruit_MAX3186510enableBiasEb>
     c08:	83 ec       	ldi	r24, 0xC3	; 195
     c0a:	99 e0       	ldi	r25, 0x09	; 9
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	f1 f7       	brne	.-4      	; 0xc0c <_ZN17Adafruit_MAX318657readRTDEv+0x12>
     c10:	00 c0       	rjmp	.+0      	; 0xc12 <_ZN17Adafruit_MAX318657readRTDEv+0x18>
     c12:	00 00       	nop
	_delay_ms(10);
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	ce 01       	movw	r24, r28
     c18:	3d df       	rcall	.-390    	; 0xa94 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	t |= MAX31856_CONFIG_1SHOT;
     c1a:	48 2f       	mov	r20, r24
     c1c:	40 62       	ori	r20, 0x20	; 32
	writeRegister8(MAX31856_CONFIG_REG, t);
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	ce 01       	movw	r24, r28
     c22:	5f df       	rcall	.-322    	; 0xae2 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
     c24:	89 e7       	ldi	r24, 0x79	; 121
     c26:	9f e3       	ldi	r25, 0x3F	; 63
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	f1 f7       	brne	.-4      	; 0xc28 <_ZN17Adafruit_MAX318657readRTDEv+0x2e>
     c2c:	00 c0       	rjmp	.+0      	; 0xc2e <_ZN17Adafruit_MAX318657readRTDEv+0x34>
     c2e:	00 00       	nop
	_delay_ms(65);

	uint16_t rtd = readRegister16(MAX31856_RTDMSB_REG);
     c30:	61 e0       	ldi	r22, 0x01	; 1
     c32:	ce 01       	movw	r24, r28
     c34:	3f df       	rcall	.-386    	; 0xab4 <_ZN17Adafruit_MAX3186514readRegister16Eh>

	// remove fault
	rtd >>= 1;

	return rtd;
}
     c36:	96 95       	lsr	r25
     c38:	87 95       	ror	r24
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	08 95       	ret

00000c40 <_ZN17Adafruit_MAX3186511temperatureEff>:
		t &= ~MAX31856_CONFIG_3WIRE;
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
}

float  Adafruit_MAX31865::temperature(float RTDnominal, float refResistor) {
     c40:	4f 92       	push	r4
     c42:	5f 92       	push	r5
     c44:	6f 92       	push	r6
     c46:	7f 92       	push	r7
     c48:	8f 92       	push	r8
     c4a:	9f 92       	push	r9
     c4c:	af 92       	push	r10
     c4e:	bf 92       	push	r11
     c50:	cf 92       	push	r12
     c52:	df 92       	push	r13
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	4a 01       	movw	r8, r20
     c62:	5b 01       	movw	r10, r22
     c64:	68 01       	movw	r12, r16
     c66:	79 01       	movw	r14, r18
	// http://www.analog.com/media/en/technical-documentation/application-notes/AN709_0.pdf

	float Z1, Z2, Z3, Z4, Rt, temp;

	Rt = readRTD();
     c68:	c8 df       	rcall	.-112    	; 0xbfa <_ZN17Adafruit_MAX318657readRTDEv>
     c6a:	bc 01       	movw	r22, r24
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	4d d2       	rcall	.+1178   	; 0x110c <__floatunsisf>
	Rt /= 32768;
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	58 e3       	ldi	r21, 0x38	; 56
     c7a:	fe d2       	rcall	.+1532   	; 0x1278 <__mulsf3>
	Rt *= refResistor;
     c7c:	a7 01       	movw	r20, r14
     c7e:	96 01       	movw	r18, r12
     c80:	fb d2       	rcall	.+1526   	; 0x1278 <__mulsf3>
     c82:	2b 01       	movw	r4, r22
     c84:	3c 01       	movw	r6, r24
	
	// Serial.print("\nResistance: "); Serial.println(Rt, 8);

	Z1 = -RTD_A;
	Z2 = RTD_A * RTD_A - (4 * RTD_B);
	Z3 = (4 * RTD_B) / RTDnominal;
     c86:	a5 01       	movw	r20, r10
     c88:	94 01       	movw	r18, r8
     c8a:	6f e7       	ldi	r22, 0x7F	; 127
     c8c:	75 e0       	ldi	r23, 0x05	; 5
     c8e:	8b e1       	ldi	r24, 0x1B	; 27
     c90:	96 eb       	ldi	r25, 0xB6	; 182
     c92:	a3 d1       	rcall	.+838    	; 0xfda <__divsf3>
     c94:	6b 01       	movw	r12, r22
     c96:	7c 01       	movw	r14, r24
	Z4 = 2 * RTD_B;

	temp = Z2 + (Z3 * Rt);
     c98:	a3 01       	movw	r20, r6
     c9a:	92 01       	movw	r18, r4
     c9c:	c7 01       	movw	r24, r14
     c9e:	b6 01       	movw	r22, r12
     ca0:	eb d2       	rcall	.+1494   	; 0x1278 <__mulsf3>
     ca2:	26 e1       	ldi	r18, 0x16	; 22
     ca4:	33 e8       	ldi	r19, 0x83	; 131
     ca6:	43 e9       	ldi	r20, 0x93	; 147
     ca8:	57 e3       	ldi	r21, 0x37	; 55
     caa:	2f d1       	rcall	.+606    	; 0xf0a <__addsf3>
	temp = (sqrt(temp) + Z1) / Z4;
     cac:	4c d3       	rcall	.+1688   	; 0x1346 <sqrt>
     cae:	22 e3       	ldi	r18, 0x32	; 50
     cb0:	31 e1       	ldi	r19, 0x11	; 17
     cb2:	40 e8       	ldi	r20, 0x80	; 128
     cb4:	5b e3       	ldi	r21, 0x3B	; 59
     cb6:	28 d1       	rcall	.+592    	; 0xf08 <__subsf3>
     cb8:	2f e7       	ldi	r18, 0x7F	; 127
     cba:	35 e0       	ldi	r19, 0x05	; 5
     cbc:	4b e9       	ldi	r20, 0x9B	; 155
     cbe:	55 eb       	ldi	r21, 0xB5	; 181
     cc0:	8c d1       	rcall	.+792    	; 0xfda <__divsf3>
     cc2:	06 2f       	mov	r16, r22
     cc4:	17 2f       	mov	r17, r23
     cc6:	d8 2f       	mov	r29, r24
     cc8:	c9 2f       	mov	r28, r25
	
	if (temp >= 0) return temp;
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	a9 01       	movw	r20, r18
     cd0:	cf d2       	rcall	.+1438   	; 0x1270 <__gesf2>
     cd2:	88 23       	and	r24, r24
     cd4:	0c f0       	brlt	.+2      	; 0xcd8 <_ZN17Adafruit_MAX3186511temperatureEff+0x98>
     cd6:	60 c0       	rjmp	.+192    	; 0xd98 <_ZN17Adafruit_MAX3186511temperatureEff+0x158>

	// ugh.
	Rt /= RTDnominal;
     cd8:	a5 01       	movw	r20, r10
     cda:	94 01       	movw	r18, r8
     cdc:	c3 01       	movw	r24, r6
     cde:	b2 01       	movw	r22, r4
     ce0:	7c d1       	rcall	.+760    	; 0xfda <__divsf3>
	Rt *= 100;      // normalize to 100 ohm
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	48 ec       	ldi	r20, 0xC8	; 200
     ce8:	52 e4       	ldi	r21, 0x42	; 66
     cea:	c6 d2       	rcall	.+1420   	; 0x1278 <__mulsf3>
     cec:	6b 01       	movw	r12, r22
     cee:	7c 01       	movw	r14, r24

	float rpoly = Rt;

	temp = -242.02;
	temp += 2.2228 * rpoly;
     cf0:	2b e5       	ldi	r18, 0x5B	; 91
     cf2:	32 e4       	ldi	r19, 0x42	; 66
     cf4:	4e e0       	ldi	r20, 0x0E	; 14
     cf6:	50 e4       	ldi	r21, 0x40	; 64
     cf8:	bf d2       	rcall	.+1406   	; 0x1278 <__mulsf3>
     cfa:	2f e1       	ldi	r18, 0x1F	; 31
     cfc:	35 e0       	ldi	r19, 0x05	; 5
     cfe:	42 e7       	ldi	r20, 0x72	; 114
     d00:	53 ec       	ldi	r21, 0xC3	; 195
     d02:	03 d1       	rcall	.+518    	; 0xf0a <__addsf3>
     d04:	2b 01       	movw	r4, r22
     d06:	3c 01       	movw	r6, r24
	rpoly *= Rt;  // square
     d08:	a7 01       	movw	r20, r14
     d0a:	96 01       	movw	r18, r12
     d0c:	c7 01       	movw	r24, r14
     d0e:	b6 01       	movw	r22, r12
     d10:	b3 d2       	rcall	.+1382   	; 0x1278 <__mulsf3>
     d12:	4b 01       	movw	r8, r22
     d14:	5c 01       	movw	r10, r24
	temp += 2.5859e-3 * rpoly;
     d16:	24 e3       	ldi	r18, 0x34	; 52
     d18:	38 e7       	ldi	r19, 0x78	; 120
     d1a:	49 e2       	ldi	r20, 0x29	; 41
     d1c:	5b e3       	ldi	r21, 0x3B	; 59
     d1e:	ac d2       	rcall	.+1368   	; 0x1278 <__mulsf3>
     d20:	a3 01       	movw	r20, r6
     d22:	92 01       	movw	r18, r4
     d24:	f2 d0       	rcall	.+484    	; 0xf0a <__addsf3>
     d26:	2b 01       	movw	r4, r22
     d28:	3c 01       	movw	r6, r24
	rpoly *= Rt;  // ^3
     d2a:	a7 01       	movw	r20, r14
     d2c:	96 01       	movw	r18, r12
     d2e:	c5 01       	movw	r24, r10
     d30:	b4 01       	movw	r22, r8
     d32:	a2 d2       	rcall	.+1348   	; 0x1278 <__mulsf3>
     d34:	4b 01       	movw	r8, r22
     d36:	5c 01       	movw	r10, r24
	temp -= 4.8260e-6 * rpoly;
     d38:	26 e0       	ldi	r18, 0x06	; 6
     d3a:	3f ee       	ldi	r19, 0xEF	; 239
     d3c:	41 ea       	ldi	r20, 0xA1	; 161
     d3e:	56 e3       	ldi	r21, 0x36	; 54
     d40:	9b d2       	rcall	.+1334   	; 0x1278 <__mulsf3>
     d42:	9b 01       	movw	r18, r22
     d44:	ac 01       	movw	r20, r24
     d46:	c3 01       	movw	r24, r6
     d48:	b2 01       	movw	r22, r4
     d4a:	de d0       	rcall	.+444    	; 0xf08 <__subsf3>
     d4c:	2b 01       	movw	r4, r22
     d4e:	3c 01       	movw	r6, r24
	rpoly *= Rt;  // ^4
     d50:	a7 01       	movw	r20, r14
     d52:	96 01       	movw	r18, r12
     d54:	c5 01       	movw	r24, r10
     d56:	b4 01       	movw	r22, r8
     d58:	8f d2       	rcall	.+1310   	; 0x1278 <__mulsf3>
     d5a:	4b 01       	movw	r8, r22
     d5c:	5c 01       	movw	r10, r24
	temp -= 2.8183e-8 * rpoly;
     d5e:	23 e1       	ldi	r18, 0x13	; 19
     d60:	37 e1       	ldi	r19, 0x17	; 23
     d62:	42 ef       	ldi	r20, 0xF2	; 242
     d64:	52 e3       	ldi	r21, 0x32	; 50
     d66:	88 d2       	rcall	.+1296   	; 0x1278 <__mulsf3>
     d68:	9b 01       	movw	r18, r22
     d6a:	ac 01       	movw	r20, r24
     d6c:	c3 01       	movw	r24, r6
     d6e:	b2 01       	movw	r22, r4
     d70:	cb d0       	rcall	.+406    	; 0xf08 <__subsf3>
     d72:	2b 01       	movw	r4, r22
     d74:	3c 01       	movw	r6, r24
	rpoly *= Rt;  // ^5
     d76:	a7 01       	movw	r20, r14
     d78:	96 01       	movw	r18, r12
     d7a:	c5 01       	movw	r24, r10
     d7c:	b4 01       	movw	r22, r8
     d7e:	7c d2       	rcall	.+1272   	; 0x1278 <__mulsf3>
	temp += 1.5243e-10 * rpoly;
     d80:	2b e3       	ldi	r18, 0x3B	; 59
     d82:	39 e9       	ldi	r19, 0x99	; 153
     d84:	47 e2       	ldi	r20, 0x27	; 39
     d86:	5f e2       	ldi	r21, 0x2F	; 47
     d88:	77 d2       	rcall	.+1262   	; 0x1278 <__mulsf3>
     d8a:	a3 01       	movw	r20, r6
     d8c:	92 01       	movw	r18, r4
     d8e:	bd d0       	rcall	.+378    	; 0xf0a <__addsf3>

	return temp;
     d90:	06 2f       	mov	r16, r22
     d92:	17 2f       	mov	r17, r23
     d94:	d8 2f       	mov	r29, r24
     d96:	c9 2f       	mov	r28, r25
}
     d98:	60 2f       	mov	r22, r16
     d9a:	71 2f       	mov	r23, r17
     d9c:	8d 2f       	mov	r24, r29
     d9e:	9c 2f       	mov	r25, r28
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	1f 91       	pop	r17
     da6:	0f 91       	pop	r16
     da8:	ff 90       	pop	r15
     daa:	ef 90       	pop	r14
     dac:	df 90       	pop	r13
     dae:	cf 90       	pop	r12
     db0:	bf 90       	pop	r11
     db2:	af 90       	pop	r10
     db4:	9f 90       	pop	r9
     db6:	8f 90       	pop	r8
     db8:	7f 90       	pop	r7
     dba:	6f 90       	pop	r6
     dbc:	5f 90       	pop	r5
     dbe:	4f 90       	pop	r4
     dc0:	08 95       	ret

00000dc2 <_Z8spi_initv>:

#include <avr/io.h>

void spi_init() {
	// SPI Enable, Master mode
	SPCR |= (1 << SPE) | (1 << MSTR)| (1<<SPR1);
     dc2:	8c b5       	in	r24, 0x2c	; 44
     dc4:	82 65       	ori	r24, 0x52	; 82
     dc6:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ ((1 << SPR0) | (1<< CPHA));
     dc8:	8c b5       	in	r24, 0x2c	; 44
     dca:	8a 7f       	andi	r24, 0xFA	; 250
     dcc:	8c bd       	out	0x2c, r24	; 44
	
	// SCK MOSI CS/LOAD/SS
	DDRB |= (1 << PIN_SCK) | (1 << PIN_MOSI) ;
     dce:	84 b1       	in	r24, 0x04	; 4
     dd0:	88 62       	ori	r24, 0x28	; 40
     dd2:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1  << PIN_SS);
     dd4:	22 9a       	sbi	0x04, 2	; 4
	
	//slave pins
	DDR(DISPLAY_I_PORT) |= (1 << DISPLAY_I_PIN) | (1 << DISPLAY_II_PIN);
     dd6:	8a b1       	in	r24, 0x0a	; 10
     dd8:	80 63       	ori	r24, 0x30	; 48
     dda:	8a b9       	out	0x0a, r24	; 10
	
	DISPLAY_I_PORT |= (1 << DISPLAY_I_PIN); 
     ddc:	5d 9a       	sbi	0x0b, 5	; 11
	DISPLAY_II_PORT |= (1 << DISPLAY_II_PIN);
     dde:	5c 9a       	sbi	0x0b, 4	; 11
     de0:	08 95       	ret

00000de2 <_Z11spiSendBytec>:
}

void spiSendByte (char databyte)
{
	// Copy data into the SPI data register
	SPDR = databyte;
     de2:	8e bd       	out	0x2e, r24	; 46
	// Wait until transfer is complete
	while (!(SPSR & (1 << SPIF)));
     de4:	0d b4       	in	r0, 0x2d	; 45
     de6:	07 fe       	sbrs	r0, 7
     de8:	fd cf       	rjmp	.-6      	; 0xde4 <_Z11spiSendBytec+0x2>
}
     dea:	08 95       	ret

00000dec <_ZN7max721911MAX7219_setEiii>:
 *  Author: swain
 */ 
#include "max7219.h"
#include "spiD.h"

void max7219::MAX7219_set(int numm, int ii, int jj) {
     dec:	fc 01       	movw	r30, r24
	num = numm;
     dee:	71 83       	std	Z+1, r23	; 0x01
     df0:	60 83       	st	Z, r22
	digits1 = ii;
     df2:	53 83       	std	Z+3, r21	; 0x03
     df4:	42 83       	std	Z+2, r20	; 0x02
	digits2 = jj;
     df6:	35 83       	std	Z+5, r19	; 0x05
     df8:	24 83       	std	Z+4, r18	; 0x04
     dfa:	08 95       	ret

00000dfc <_ZN7max721917MAX7219_writeDataEcc>:
	max7219::MAX7219_writeData(MAX7219_MODE_INTENSITY, 1);
	max7219::MAX7219_writeData(MAX7219_MODE_POWER, ON);
}

void max7219::MAX7219_writeData(char data_register, char data)
{
     dfc:	1f 93       	push	r17
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	ec 01       	movw	r28, r24
     e04:	14 2f       	mov	r17, r20
	
	switch(max7219::num){
     e06:	28 81       	ld	r18, Y
     e08:	39 81       	ldd	r19, Y+1	; 0x01
     e0a:	21 15       	cp	r18, r1
     e0c:	31 05       	cpc	r19, r1
     e0e:	21 f0       	breq	.+8      	; 0xe18 <_ZN7max721917MAX7219_writeDataEcc+0x1c>
     e10:	21 30       	cpi	r18, 0x01	; 1
     e12:	31 05       	cpc	r19, r1
     e14:	19 f0       	breq	.+6      	; 0xe1c <_ZN7max721917MAX7219_writeDataEcc+0x20>
     e16:	03 c0       	rjmp	.+6      	; 0xe1e <_ZN7max721917MAX7219_writeDataEcc+0x22>
		case 0:
		MAX7219_LOAD_ON_1(0);
     e18:	5d 98       	cbi	0x0b, 5	; 11
		break;
     e1a:	01 c0       	rjmp	.+2      	; 0xe1e <_ZN7max721917MAX7219_writeDataEcc+0x22>
		case 1:
		MAX7219_LOAD_ON_2(1);
     e1c:	5c 98       	cbi	0x0b, 4	; 11
		break;
	}		
		
	// Send the register where the data will be stored
	spiSendByte(data_register);
     e1e:	86 2f       	mov	r24, r22
     e20:	e0 df       	rcall	.-64     	; 0xde2 <_Z11spiSendBytec>
	// Send the data to be stored
	spiSendByte(data);
     e22:	81 2f       	mov	r24, r17
     e24:	de df       	rcall	.-68     	; 0xde2 <_Z11spiSendBytec>
	
	switch(max7219::num){
     e26:	88 81       	ld	r24, Y
     e28:	99 81       	ldd	r25, Y+1	; 0x01
     e2a:	00 97       	sbiw	r24, 0x00	; 0
     e2c:	19 f0       	breq	.+6      	; 0xe34 <_ZN7max721917MAX7219_writeDataEcc+0x38>
     e2e:	01 97       	sbiw	r24, 0x01	; 1
     e30:	19 f0       	breq	.+6      	; 0xe38 <_ZN7max721917MAX7219_writeDataEcc+0x3c>
     e32:	03 c0       	rjmp	.+6      	; 0xe3a <_ZN7max721917MAX7219_writeDataEcc+0x3e>
		case 0:
		MAX7219_LOAD_OFF_1(0);
     e34:	5d 9a       	sbi	0x0b, 5	; 11
		break;
     e36:	01 c0       	rjmp	.+2      	; 0xe3a <_ZN7max721917MAX7219_writeDataEcc+0x3e>
		case 1:
		MAX7219_LOAD_OFF_2(1);
     e38:	5c 9a       	sbi	0x0b, 4	; 11
		break;
	}
	
}
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	1f 91       	pop	r17
     e40:	08 95       	ret

00000e42 <_ZN7max721912MAX7219_initEv>:
	num = numm;
	digits1 = ii;
	digits2 = jj;
}

void max7219::MAX7219_init() {
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
     e46:	ec 01       	movw	r28, r24
	spi_init();
     e48:	bc df       	rcall	.-136    	; 0xdc2 <_Z8spi_initv>
	// Decode mode to "Font Code-B"
	max7219::MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
     e4a:	4f ef       	ldi	r20, 0xFF	; 255
     e4c:	69 e0       	ldi	r22, 0x09	; 9
     e4e:	ce 01       	movw	r24, r28
     e50:	d5 df       	rcall	.-86     	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>

	// Scan limit runs from 0.
	max7219::MAX7219_writeData(MAX7219_MODE_SCAN_LIMIT, 7); //7 or 8?
     e52:	47 e0       	ldi	r20, 0x07	; 7
     e54:	6b e0       	ldi	r22, 0x0B	; 11
     e56:	ce 01       	movw	r24, r28
     e58:	d1 df       	rcall	.-94     	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(MAX7219_MODE_INTENSITY, 1);
     e5a:	41 e0       	ldi	r20, 0x01	; 1
     e5c:	6a e0       	ldi	r22, 0x0A	; 10
     e5e:	ce 01       	movw	r24, r28
     e60:	cd df       	rcall	.-102    	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(MAX7219_MODE_POWER, ON);
     e62:	41 e0       	ldi	r20, 0x01	; 1
     e64:	6c e0       	ldi	r22, 0x0C	; 12
     e66:	ce 01       	movw	r24, r28
     e68:	c9 df       	rcall	.-110    	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
}
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	08 95       	ret

00000e70 <_ZN7max721920MAX7219_clearDisplayEv>:
	}
	
}

void max7219::MAX7219_clearDisplay()
{
     e70:	0f 93       	push	r16
     e72:	1f 93       	push	r17
     e74:	cf 93       	push	r28
     e76:	8c 01       	movw	r16, r24
	//char i = digitsInUse;
	char i = max7219::digits1 + max7219::digits2 ;
     e78:	fc 01       	movw	r30, r24
     e7a:	c4 81       	ldd	r28, Z+4	; 0x04
     e7c:	92 81       	ldd	r25, Z+2	; 0x02
     e7e:	c9 0f       	add	r28, r25
	// Loop until 0, but don't run for zero
	do {
		// Set each display in use to blank
		max7219::MAX7219_writeData(i, MAX7219_CHAR_BLANK);
     e80:	4f e0       	ldi	r20, 0x0F	; 15
     e82:	6c 2f       	mov	r22, r28
     e84:	c8 01       	movw	r24, r16
     e86:	ba df       	rcall	.-140    	; 0xdfc <_ZN7max721917MAX7219_writeDataEcc>
void max7219::MAX7219_clearDisplay()
{
	//char i = digitsInUse;
	char i = max7219::digits1 + max7219::digits2 ;
	// Loop until 0, but don't run for zero
	do {
     e88:	c1 50       	subi	r28, 0x01	; 1
     e8a:	d1 f7       	brne	.-12     	; 0xe80 <_ZN7max721920MAX7219_clearDisplayEv+0x10>
		// Set each display in use to blank
		max7219::MAX7219_writeData(i, MAX7219_CHAR_BLANK);
	} while (--i);
}
     e8c:	cf 91       	pop	r28
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	08 95       	ret

00000e94 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
  
    //pinMode(SS, OUTPUT);
	DDRB |= (1 << PINB2);
     e94:	22 9a       	sbi	0x04, 2	; 4
    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
     e96:	8c b5       	in	r24, 0x2c	; 44
     e98:	80 61       	ori	r24, 0x10	; 16
     e9a:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
     e9c:	8c b5       	in	r24, 0x2c	; 44
     e9e:	80 64       	ori	r24, 0x40	; 64
     ea0:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ ((1 << SPR1) | (1 << SPR0));
     ea2:	8c b5       	in	r24, 0x2c	; 44
     ea4:	8c 7f       	andi	r24, 0xFC	; 252
     ea6:	8c bd       	out	0x2c, r24	; 44
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
	
    //pinMode(SCK, OUTPUT);
	DDRB |= (1 << PINB5);
     ea8:	25 9a       	sbi	0x04, 5	; 4
    //pinMode(MOSI, OUTPUT);
	DDRB |= (1 << PINB3);
     eaa:	23 9a       	sbi	0x04, 3	; 4
	
	DDR(TEMP_I_PORT ) |= (1 << TEMP_I_PIN ) | (1 << TEMP_I_PIN );
     eac:	21 9a       	sbi	0x04, 1	; 4
	TEMP_I_PORT  |= (1 << TEMP_I_PIN ) | (1 << TEMP_I_PIN );
     eae:	29 9a       	sbi	0x05, 1	; 5
     eb0:	08 95       	ret

00000eb2 <_ZN6Timerr11setTimerNumEi>:
	SET_COMPARE(1, A);
}

void Timerr::resetTimer() {
	
	TCNT1 = 0;
     eb2:	fc 01       	movw	r30, r24
     eb4:	71 83       	std	Z+1, r23	; 0x01
     eb6:	60 83       	st	Z, r22
     eb8:	08 95       	ret

00000eba <_ZN6Timerr19setCompareInterruptEv>:
     eba:	ef e6       	ldi	r30, 0x6F	; 111
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	82 60       	ori	r24, 0x02	; 2
     ec2:	80 83       	st	Z, r24
     ec4:	08 95       	ret

00000ec6 <_ZN6Timerr16startCustomTimerEi>:
	
}
void Timerr::startCustomTimer(int milli_sec) {
	
		int ocr = (15.625 * milli_sec);
     ec6:	07 2e       	mov	r0, r23
     ec8:	00 0c       	add	r0, r0
     eca:	88 0b       	sbc	r24, r24
     ecc:	99 0b       	sbc	r25, r25
     ece:	20 d1       	rcall	.+576    	; 0x1110 <__floatsisf>
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	4a e7       	ldi	r20, 0x7A	; 122
     ed6:	51 e4       	ldi	r21, 0x41	; 65
     ed8:	cf d1       	rcall	.+926    	; 0x1278 <__mulsf3>
     eda:	e7 d0       	rcall	.+462    	; 0x10aa <__fixsfsi>
		OCR1A = ocr;
     edc:	70 93 89 00 	sts	0x0089, r23
     ee0:	60 93 88 00 	sts	0x0088, r22
		START_TIMERR(1,0,2); //for proteus use 5,0,1 and for real life use 5,0,2
     ee4:	e1 e8       	ldi	r30, 0x81	; 129
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	85 60       	ori	r24, 0x05	; 5
     eec:	80 83       	st	Z, r24
     eee:	08 95       	ret

00000ef0 <_Z9initUART0v>:
char buffer=0,buffer1=0,buffer2=0;

void initUART0(void)
{
	//set baud rate
	UBRR0H=(MYUBRR0)>>8;
     ef0:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L=MYUBRR0;
     ef4:	87 e6       	ldi	r24, 0x67	; 103
     ef6:	80 93 c4 00 	sts	0x00C4, r24

	//Enable Receiver and Transmitter
	UCSR0B = ((1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0));
     efa:	88 e9       	ldi	r24, 0x98	; 152
     efc:	80 93 c1 00 	sts	0x00C1, r24
	
	//set frame format
	UCSR0C=((1<<UCSZ00)|(1<<UCSZ01));
     f00:	86 e0       	ldi	r24, 0x06	; 6
     f02:	80 93 c2 00 	sts	0x00C2, r24
     f06:	08 95       	ret

00000f08 <__subsf3>:
     f08:	50 58       	subi	r21, 0x80	; 128

00000f0a <__addsf3>:
     f0a:	bb 27       	eor	r27, r27
     f0c:	aa 27       	eor	r26, r26
     f0e:	0e d0       	rcall	.+28     	; 0xf2c <__addsf3x>
     f10:	75 c1       	rjmp	.+746    	; 0x11fc <__fp_round>
     f12:	66 d1       	rcall	.+716    	; 0x11e0 <__fp_pscA>
     f14:	30 f0       	brcs	.+12     	; 0xf22 <__addsf3+0x18>
     f16:	6b d1       	rcall	.+726    	; 0x11ee <__fp_pscB>
     f18:	20 f0       	brcs	.+8      	; 0xf22 <__addsf3+0x18>
     f1a:	31 f4       	brne	.+12     	; 0xf28 <__addsf3+0x1e>
     f1c:	9f 3f       	cpi	r25, 0xFF	; 255
     f1e:	11 f4       	brne	.+4      	; 0xf24 <__addsf3+0x1a>
     f20:	1e f4       	brtc	.+6      	; 0xf28 <__addsf3+0x1e>
     f22:	5b c1       	rjmp	.+694    	; 0x11da <__fp_nan>
     f24:	0e f4       	brtc	.+2      	; 0xf28 <__addsf3+0x1e>
     f26:	e0 95       	com	r30
     f28:	e7 fb       	bst	r30, 7
     f2a:	51 c1       	rjmp	.+674    	; 0x11ce <__fp_inf>

00000f2c <__addsf3x>:
     f2c:	e9 2f       	mov	r30, r25
     f2e:	77 d1       	rcall	.+750    	; 0x121e <__fp_split3>
     f30:	80 f3       	brcs	.-32     	; 0xf12 <__addsf3+0x8>
     f32:	ba 17       	cp	r27, r26
     f34:	62 07       	cpc	r22, r18
     f36:	73 07       	cpc	r23, r19
     f38:	84 07       	cpc	r24, r20
     f3a:	95 07       	cpc	r25, r21
     f3c:	18 f0       	brcs	.+6      	; 0xf44 <__addsf3x+0x18>
     f3e:	71 f4       	brne	.+28     	; 0xf5c <__addsf3x+0x30>
     f40:	9e f5       	brtc	.+102    	; 0xfa8 <__addsf3x+0x7c>
     f42:	8f c1       	rjmp	.+798    	; 0x1262 <__fp_zero>
     f44:	0e f4       	brtc	.+2      	; 0xf48 <__addsf3x+0x1c>
     f46:	e0 95       	com	r30
     f48:	0b 2e       	mov	r0, r27
     f4a:	ba 2f       	mov	r27, r26
     f4c:	a0 2d       	mov	r26, r0
     f4e:	0b 01       	movw	r0, r22
     f50:	b9 01       	movw	r22, r18
     f52:	90 01       	movw	r18, r0
     f54:	0c 01       	movw	r0, r24
     f56:	ca 01       	movw	r24, r20
     f58:	a0 01       	movw	r20, r0
     f5a:	11 24       	eor	r1, r1
     f5c:	ff 27       	eor	r31, r31
     f5e:	59 1b       	sub	r21, r25
     f60:	99 f0       	breq	.+38     	; 0xf88 <__addsf3x+0x5c>
     f62:	59 3f       	cpi	r21, 0xF9	; 249
     f64:	50 f4       	brcc	.+20     	; 0xf7a <__addsf3x+0x4e>
     f66:	50 3e       	cpi	r21, 0xE0	; 224
     f68:	68 f1       	brcs	.+90     	; 0xfc4 <__addsf3x+0x98>
     f6a:	1a 16       	cp	r1, r26
     f6c:	f0 40       	sbci	r31, 0x00	; 0
     f6e:	a2 2f       	mov	r26, r18
     f70:	23 2f       	mov	r18, r19
     f72:	34 2f       	mov	r19, r20
     f74:	44 27       	eor	r20, r20
     f76:	58 5f       	subi	r21, 0xF8	; 248
     f78:	f3 cf       	rjmp	.-26     	; 0xf60 <__addsf3x+0x34>
     f7a:	46 95       	lsr	r20
     f7c:	37 95       	ror	r19
     f7e:	27 95       	ror	r18
     f80:	a7 95       	ror	r26
     f82:	f0 40       	sbci	r31, 0x00	; 0
     f84:	53 95       	inc	r21
     f86:	c9 f7       	brne	.-14     	; 0xf7a <__addsf3x+0x4e>
     f88:	7e f4       	brtc	.+30     	; 0xfa8 <__addsf3x+0x7c>
     f8a:	1f 16       	cp	r1, r31
     f8c:	ba 0b       	sbc	r27, r26
     f8e:	62 0b       	sbc	r22, r18
     f90:	73 0b       	sbc	r23, r19
     f92:	84 0b       	sbc	r24, r20
     f94:	ba f0       	brmi	.+46     	; 0xfc4 <__addsf3x+0x98>
     f96:	91 50       	subi	r25, 0x01	; 1
     f98:	a1 f0       	breq	.+40     	; 0xfc2 <__addsf3x+0x96>
     f9a:	ff 0f       	add	r31, r31
     f9c:	bb 1f       	adc	r27, r27
     f9e:	66 1f       	adc	r22, r22
     fa0:	77 1f       	adc	r23, r23
     fa2:	88 1f       	adc	r24, r24
     fa4:	c2 f7       	brpl	.-16     	; 0xf96 <__addsf3x+0x6a>
     fa6:	0e c0       	rjmp	.+28     	; 0xfc4 <__addsf3x+0x98>
     fa8:	ba 0f       	add	r27, r26
     faa:	62 1f       	adc	r22, r18
     fac:	73 1f       	adc	r23, r19
     fae:	84 1f       	adc	r24, r20
     fb0:	48 f4       	brcc	.+18     	; 0xfc4 <__addsf3x+0x98>
     fb2:	87 95       	ror	r24
     fb4:	77 95       	ror	r23
     fb6:	67 95       	ror	r22
     fb8:	b7 95       	ror	r27
     fba:	f7 95       	ror	r31
     fbc:	9e 3f       	cpi	r25, 0xFE	; 254
     fbe:	08 f0       	brcs	.+2      	; 0xfc2 <__addsf3x+0x96>
     fc0:	b3 cf       	rjmp	.-154    	; 0xf28 <__addsf3+0x1e>
     fc2:	93 95       	inc	r25
     fc4:	88 0f       	add	r24, r24
     fc6:	08 f0       	brcs	.+2      	; 0xfca <__addsf3x+0x9e>
     fc8:	99 27       	eor	r25, r25
     fca:	ee 0f       	add	r30, r30
     fcc:	97 95       	ror	r25
     fce:	87 95       	ror	r24
     fd0:	08 95       	ret

00000fd2 <__cmpsf2>:
     fd2:	d9 d0       	rcall	.+434    	; 0x1186 <__fp_cmp>
     fd4:	08 f4       	brcc	.+2      	; 0xfd8 <__cmpsf2+0x6>
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	08 95       	ret

00000fda <__divsf3>:
     fda:	0c d0       	rcall	.+24     	; 0xff4 <__divsf3x>
     fdc:	0f c1       	rjmp	.+542    	; 0x11fc <__fp_round>
     fde:	07 d1       	rcall	.+526    	; 0x11ee <__fp_pscB>
     fe0:	40 f0       	brcs	.+16     	; 0xff2 <__divsf3+0x18>
     fe2:	fe d0       	rcall	.+508    	; 0x11e0 <__fp_pscA>
     fe4:	30 f0       	brcs	.+12     	; 0xff2 <__divsf3+0x18>
     fe6:	21 f4       	brne	.+8      	; 0xff0 <__divsf3+0x16>
     fe8:	5f 3f       	cpi	r21, 0xFF	; 255
     fea:	19 f0       	breq	.+6      	; 0xff2 <__divsf3+0x18>
     fec:	f0 c0       	rjmp	.+480    	; 0x11ce <__fp_inf>
     fee:	51 11       	cpse	r21, r1
     ff0:	39 c1       	rjmp	.+626    	; 0x1264 <__fp_szero>
     ff2:	f3 c0       	rjmp	.+486    	; 0x11da <__fp_nan>

00000ff4 <__divsf3x>:
     ff4:	14 d1       	rcall	.+552    	; 0x121e <__fp_split3>
     ff6:	98 f3       	brcs	.-26     	; 0xfde <__divsf3+0x4>

00000ff8 <__divsf3_pse>:
     ff8:	99 23       	and	r25, r25
     ffa:	c9 f3       	breq	.-14     	; 0xfee <__divsf3+0x14>
     ffc:	55 23       	and	r21, r21
     ffe:	b1 f3       	breq	.-20     	; 0xfec <__divsf3+0x12>
    1000:	95 1b       	sub	r25, r21
    1002:	55 0b       	sbc	r21, r21
    1004:	bb 27       	eor	r27, r27
    1006:	aa 27       	eor	r26, r26
    1008:	62 17       	cp	r22, r18
    100a:	73 07       	cpc	r23, r19
    100c:	84 07       	cpc	r24, r20
    100e:	38 f0       	brcs	.+14     	; 0x101e <__divsf3_pse+0x26>
    1010:	9f 5f       	subi	r25, 0xFF	; 255
    1012:	5f 4f       	sbci	r21, 0xFF	; 255
    1014:	22 0f       	add	r18, r18
    1016:	33 1f       	adc	r19, r19
    1018:	44 1f       	adc	r20, r20
    101a:	aa 1f       	adc	r26, r26
    101c:	a9 f3       	breq	.-22     	; 0x1008 <__divsf3_pse+0x10>
    101e:	33 d0       	rcall	.+102    	; 0x1086 <__divsf3_pse+0x8e>
    1020:	0e 2e       	mov	r0, r30
    1022:	3a f0       	brmi	.+14     	; 0x1032 <__divsf3_pse+0x3a>
    1024:	e0 e8       	ldi	r30, 0x80	; 128
    1026:	30 d0       	rcall	.+96     	; 0x1088 <__divsf3_pse+0x90>
    1028:	91 50       	subi	r25, 0x01	; 1
    102a:	50 40       	sbci	r21, 0x00	; 0
    102c:	e6 95       	lsr	r30
    102e:	00 1c       	adc	r0, r0
    1030:	ca f7       	brpl	.-14     	; 0x1024 <__divsf3_pse+0x2c>
    1032:	29 d0       	rcall	.+82     	; 0x1086 <__divsf3_pse+0x8e>
    1034:	fe 2f       	mov	r31, r30
    1036:	27 d0       	rcall	.+78     	; 0x1086 <__divsf3_pse+0x8e>
    1038:	66 0f       	add	r22, r22
    103a:	77 1f       	adc	r23, r23
    103c:	88 1f       	adc	r24, r24
    103e:	bb 1f       	adc	r27, r27
    1040:	26 17       	cp	r18, r22
    1042:	37 07       	cpc	r19, r23
    1044:	48 07       	cpc	r20, r24
    1046:	ab 07       	cpc	r26, r27
    1048:	b0 e8       	ldi	r27, 0x80	; 128
    104a:	09 f0       	breq	.+2      	; 0x104e <__divsf3_pse+0x56>
    104c:	bb 0b       	sbc	r27, r27
    104e:	80 2d       	mov	r24, r0
    1050:	bf 01       	movw	r22, r30
    1052:	ff 27       	eor	r31, r31
    1054:	93 58       	subi	r25, 0x83	; 131
    1056:	5f 4f       	sbci	r21, 0xFF	; 255
    1058:	2a f0       	brmi	.+10     	; 0x1064 <__divsf3_pse+0x6c>
    105a:	9e 3f       	cpi	r25, 0xFE	; 254
    105c:	51 05       	cpc	r21, r1
    105e:	68 f0       	brcs	.+26     	; 0x107a <__divsf3_pse+0x82>
    1060:	b6 c0       	rjmp	.+364    	; 0x11ce <__fp_inf>
    1062:	00 c1       	rjmp	.+512    	; 0x1264 <__fp_szero>
    1064:	5f 3f       	cpi	r21, 0xFF	; 255
    1066:	ec f3       	brlt	.-6      	; 0x1062 <__divsf3_pse+0x6a>
    1068:	98 3e       	cpi	r25, 0xE8	; 232
    106a:	dc f3       	brlt	.-10     	; 0x1062 <__divsf3_pse+0x6a>
    106c:	86 95       	lsr	r24
    106e:	77 95       	ror	r23
    1070:	67 95       	ror	r22
    1072:	b7 95       	ror	r27
    1074:	f7 95       	ror	r31
    1076:	9f 5f       	subi	r25, 0xFF	; 255
    1078:	c9 f7       	brne	.-14     	; 0x106c <__divsf3_pse+0x74>
    107a:	88 0f       	add	r24, r24
    107c:	91 1d       	adc	r25, r1
    107e:	96 95       	lsr	r25
    1080:	87 95       	ror	r24
    1082:	97 f9       	bld	r25, 7
    1084:	08 95       	ret
    1086:	e1 e0       	ldi	r30, 0x01	; 1
    1088:	66 0f       	add	r22, r22
    108a:	77 1f       	adc	r23, r23
    108c:	88 1f       	adc	r24, r24
    108e:	bb 1f       	adc	r27, r27
    1090:	62 17       	cp	r22, r18
    1092:	73 07       	cpc	r23, r19
    1094:	84 07       	cpc	r24, r20
    1096:	ba 07       	cpc	r27, r26
    1098:	20 f0       	brcs	.+8      	; 0x10a2 <__divsf3_pse+0xaa>
    109a:	62 1b       	sub	r22, r18
    109c:	73 0b       	sbc	r23, r19
    109e:	84 0b       	sbc	r24, r20
    10a0:	ba 0b       	sbc	r27, r26
    10a2:	ee 1f       	adc	r30, r30
    10a4:	88 f7       	brcc	.-30     	; 0x1088 <__divsf3_pse+0x90>
    10a6:	e0 95       	com	r30
    10a8:	08 95       	ret

000010aa <__fixsfsi>:
    10aa:	04 d0       	rcall	.+8      	; 0x10b4 <__fixunssfsi>
    10ac:	68 94       	set
    10ae:	b1 11       	cpse	r27, r1
    10b0:	d9 c0       	rjmp	.+434    	; 0x1264 <__fp_szero>
    10b2:	08 95       	ret

000010b4 <__fixunssfsi>:
    10b4:	bc d0       	rcall	.+376    	; 0x122e <__fp_splitA>
    10b6:	88 f0       	brcs	.+34     	; 0x10da <__fixunssfsi+0x26>
    10b8:	9f 57       	subi	r25, 0x7F	; 127
    10ba:	90 f0       	brcs	.+36     	; 0x10e0 <__fixunssfsi+0x2c>
    10bc:	b9 2f       	mov	r27, r25
    10be:	99 27       	eor	r25, r25
    10c0:	b7 51       	subi	r27, 0x17	; 23
    10c2:	a0 f0       	brcs	.+40     	; 0x10ec <__fixunssfsi+0x38>
    10c4:	d1 f0       	breq	.+52     	; 0x10fa <__fixunssfsi+0x46>
    10c6:	66 0f       	add	r22, r22
    10c8:	77 1f       	adc	r23, r23
    10ca:	88 1f       	adc	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	1a f0       	brmi	.+6      	; 0x10d6 <__fixunssfsi+0x22>
    10d0:	ba 95       	dec	r27
    10d2:	c9 f7       	brne	.-14     	; 0x10c6 <__fixunssfsi+0x12>
    10d4:	12 c0       	rjmp	.+36     	; 0x10fa <__fixunssfsi+0x46>
    10d6:	b1 30       	cpi	r27, 0x01	; 1
    10d8:	81 f0       	breq	.+32     	; 0x10fa <__fixunssfsi+0x46>
    10da:	c3 d0       	rcall	.+390    	; 0x1262 <__fp_zero>
    10dc:	b1 e0       	ldi	r27, 0x01	; 1
    10de:	08 95       	ret
    10e0:	c0 c0       	rjmp	.+384    	; 0x1262 <__fp_zero>
    10e2:	67 2f       	mov	r22, r23
    10e4:	78 2f       	mov	r23, r24
    10e6:	88 27       	eor	r24, r24
    10e8:	b8 5f       	subi	r27, 0xF8	; 248
    10ea:	39 f0       	breq	.+14     	; 0x10fa <__fixunssfsi+0x46>
    10ec:	b9 3f       	cpi	r27, 0xF9	; 249
    10ee:	cc f3       	brlt	.-14     	; 0x10e2 <__fixunssfsi+0x2e>
    10f0:	86 95       	lsr	r24
    10f2:	77 95       	ror	r23
    10f4:	67 95       	ror	r22
    10f6:	b3 95       	inc	r27
    10f8:	d9 f7       	brne	.-10     	; 0x10f0 <__fixunssfsi+0x3c>
    10fa:	3e f4       	brtc	.+14     	; 0x110a <__fixunssfsi+0x56>
    10fc:	90 95       	com	r25
    10fe:	80 95       	com	r24
    1100:	70 95       	com	r23
    1102:	61 95       	neg	r22
    1104:	7f 4f       	sbci	r23, 0xFF	; 255
    1106:	8f 4f       	sbci	r24, 0xFF	; 255
    1108:	9f 4f       	sbci	r25, 0xFF	; 255
    110a:	08 95       	ret

0000110c <__floatunsisf>:
    110c:	e8 94       	clt
    110e:	09 c0       	rjmp	.+18     	; 0x1122 <__floatsisf+0x12>

00001110 <__floatsisf>:
    1110:	97 fb       	bst	r25, 7
    1112:	3e f4       	brtc	.+14     	; 0x1122 <__floatsisf+0x12>
    1114:	90 95       	com	r25
    1116:	80 95       	com	r24
    1118:	70 95       	com	r23
    111a:	61 95       	neg	r22
    111c:	7f 4f       	sbci	r23, 0xFF	; 255
    111e:	8f 4f       	sbci	r24, 0xFF	; 255
    1120:	9f 4f       	sbci	r25, 0xFF	; 255
    1122:	99 23       	and	r25, r25
    1124:	a9 f0       	breq	.+42     	; 0x1150 <__floatsisf+0x40>
    1126:	f9 2f       	mov	r31, r25
    1128:	96 e9       	ldi	r25, 0x96	; 150
    112a:	bb 27       	eor	r27, r27
    112c:	93 95       	inc	r25
    112e:	f6 95       	lsr	r31
    1130:	87 95       	ror	r24
    1132:	77 95       	ror	r23
    1134:	67 95       	ror	r22
    1136:	b7 95       	ror	r27
    1138:	f1 11       	cpse	r31, r1
    113a:	f8 cf       	rjmp	.-16     	; 0x112c <__floatsisf+0x1c>
    113c:	fa f4       	brpl	.+62     	; 0x117c <__floatsisf+0x6c>
    113e:	bb 0f       	add	r27, r27
    1140:	11 f4       	brne	.+4      	; 0x1146 <__floatsisf+0x36>
    1142:	60 ff       	sbrs	r22, 0
    1144:	1b c0       	rjmp	.+54     	; 0x117c <__floatsisf+0x6c>
    1146:	6f 5f       	subi	r22, 0xFF	; 255
    1148:	7f 4f       	sbci	r23, 0xFF	; 255
    114a:	8f 4f       	sbci	r24, 0xFF	; 255
    114c:	9f 4f       	sbci	r25, 0xFF	; 255
    114e:	16 c0       	rjmp	.+44     	; 0x117c <__floatsisf+0x6c>
    1150:	88 23       	and	r24, r24
    1152:	11 f0       	breq	.+4      	; 0x1158 <__floatsisf+0x48>
    1154:	96 e9       	ldi	r25, 0x96	; 150
    1156:	11 c0       	rjmp	.+34     	; 0x117a <__floatsisf+0x6a>
    1158:	77 23       	and	r23, r23
    115a:	21 f0       	breq	.+8      	; 0x1164 <__floatsisf+0x54>
    115c:	9e e8       	ldi	r25, 0x8E	; 142
    115e:	87 2f       	mov	r24, r23
    1160:	76 2f       	mov	r23, r22
    1162:	05 c0       	rjmp	.+10     	; 0x116e <__floatsisf+0x5e>
    1164:	66 23       	and	r22, r22
    1166:	71 f0       	breq	.+28     	; 0x1184 <__floatsisf+0x74>
    1168:	96 e8       	ldi	r25, 0x86	; 134
    116a:	86 2f       	mov	r24, r22
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	2a f0       	brmi	.+10     	; 0x117c <__floatsisf+0x6c>
    1172:	9a 95       	dec	r25
    1174:	66 0f       	add	r22, r22
    1176:	77 1f       	adc	r23, r23
    1178:	88 1f       	adc	r24, r24
    117a:	da f7       	brpl	.-10     	; 0x1172 <__floatsisf+0x62>
    117c:	88 0f       	add	r24, r24
    117e:	96 95       	lsr	r25
    1180:	87 95       	ror	r24
    1182:	97 f9       	bld	r25, 7
    1184:	08 95       	ret

00001186 <__fp_cmp>:
    1186:	99 0f       	add	r25, r25
    1188:	00 08       	sbc	r0, r0
    118a:	55 0f       	add	r21, r21
    118c:	aa 0b       	sbc	r26, r26
    118e:	e0 e8       	ldi	r30, 0x80	; 128
    1190:	fe ef       	ldi	r31, 0xFE	; 254
    1192:	16 16       	cp	r1, r22
    1194:	17 06       	cpc	r1, r23
    1196:	e8 07       	cpc	r30, r24
    1198:	f9 07       	cpc	r31, r25
    119a:	c0 f0       	brcs	.+48     	; 0x11cc <__fp_cmp+0x46>
    119c:	12 16       	cp	r1, r18
    119e:	13 06       	cpc	r1, r19
    11a0:	e4 07       	cpc	r30, r20
    11a2:	f5 07       	cpc	r31, r21
    11a4:	98 f0       	brcs	.+38     	; 0x11cc <__fp_cmp+0x46>
    11a6:	62 1b       	sub	r22, r18
    11a8:	73 0b       	sbc	r23, r19
    11aa:	84 0b       	sbc	r24, r20
    11ac:	95 0b       	sbc	r25, r21
    11ae:	39 f4       	brne	.+14     	; 0x11be <__fp_cmp+0x38>
    11b0:	0a 26       	eor	r0, r26
    11b2:	61 f0       	breq	.+24     	; 0x11cc <__fp_cmp+0x46>
    11b4:	23 2b       	or	r18, r19
    11b6:	24 2b       	or	r18, r20
    11b8:	25 2b       	or	r18, r21
    11ba:	21 f4       	brne	.+8      	; 0x11c4 <__fp_cmp+0x3e>
    11bc:	08 95       	ret
    11be:	0a 26       	eor	r0, r26
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <__fp_cmp+0x3e>
    11c2:	a1 40       	sbci	r26, 0x01	; 1
    11c4:	a6 95       	lsr	r26
    11c6:	8f ef       	ldi	r24, 0xFF	; 255
    11c8:	81 1d       	adc	r24, r1
    11ca:	81 1d       	adc	r24, r1
    11cc:	08 95       	ret

000011ce <__fp_inf>:
    11ce:	97 f9       	bld	r25, 7
    11d0:	9f 67       	ori	r25, 0x7F	; 127
    11d2:	80 e8       	ldi	r24, 0x80	; 128
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	08 95       	ret

000011da <__fp_nan>:
    11da:	9f ef       	ldi	r25, 0xFF	; 255
    11dc:	80 ec       	ldi	r24, 0xC0	; 192
    11de:	08 95       	ret

000011e0 <__fp_pscA>:
    11e0:	00 24       	eor	r0, r0
    11e2:	0a 94       	dec	r0
    11e4:	16 16       	cp	r1, r22
    11e6:	17 06       	cpc	r1, r23
    11e8:	18 06       	cpc	r1, r24
    11ea:	09 06       	cpc	r0, r25
    11ec:	08 95       	ret

000011ee <__fp_pscB>:
    11ee:	00 24       	eor	r0, r0
    11f0:	0a 94       	dec	r0
    11f2:	12 16       	cp	r1, r18
    11f4:	13 06       	cpc	r1, r19
    11f6:	14 06       	cpc	r1, r20
    11f8:	05 06       	cpc	r0, r21
    11fa:	08 95       	ret

000011fc <__fp_round>:
    11fc:	09 2e       	mov	r0, r25
    11fe:	03 94       	inc	r0
    1200:	00 0c       	add	r0, r0
    1202:	11 f4       	brne	.+4      	; 0x1208 <__fp_round+0xc>
    1204:	88 23       	and	r24, r24
    1206:	52 f0       	brmi	.+20     	; 0x121c <__fp_round+0x20>
    1208:	bb 0f       	add	r27, r27
    120a:	40 f4       	brcc	.+16     	; 0x121c <__fp_round+0x20>
    120c:	bf 2b       	or	r27, r31
    120e:	11 f4       	brne	.+4      	; 0x1214 <__fp_round+0x18>
    1210:	60 ff       	sbrs	r22, 0
    1212:	04 c0       	rjmp	.+8      	; 0x121c <__fp_round+0x20>
    1214:	6f 5f       	subi	r22, 0xFF	; 255
    1216:	7f 4f       	sbci	r23, 0xFF	; 255
    1218:	8f 4f       	sbci	r24, 0xFF	; 255
    121a:	9f 4f       	sbci	r25, 0xFF	; 255
    121c:	08 95       	ret

0000121e <__fp_split3>:
    121e:	57 fd       	sbrc	r21, 7
    1220:	90 58       	subi	r25, 0x80	; 128
    1222:	44 0f       	add	r20, r20
    1224:	55 1f       	adc	r21, r21
    1226:	59 f0       	breq	.+22     	; 0x123e <__fp_splitA+0x10>
    1228:	5f 3f       	cpi	r21, 0xFF	; 255
    122a:	71 f0       	breq	.+28     	; 0x1248 <__fp_splitA+0x1a>
    122c:	47 95       	ror	r20

0000122e <__fp_splitA>:
    122e:	88 0f       	add	r24, r24
    1230:	97 fb       	bst	r25, 7
    1232:	99 1f       	adc	r25, r25
    1234:	61 f0       	breq	.+24     	; 0x124e <__fp_splitA+0x20>
    1236:	9f 3f       	cpi	r25, 0xFF	; 255
    1238:	79 f0       	breq	.+30     	; 0x1258 <__fp_splitA+0x2a>
    123a:	87 95       	ror	r24
    123c:	08 95       	ret
    123e:	12 16       	cp	r1, r18
    1240:	13 06       	cpc	r1, r19
    1242:	14 06       	cpc	r1, r20
    1244:	55 1f       	adc	r21, r21
    1246:	f2 cf       	rjmp	.-28     	; 0x122c <__fp_split3+0xe>
    1248:	46 95       	lsr	r20
    124a:	f1 df       	rcall	.-30     	; 0x122e <__fp_splitA>
    124c:	08 c0       	rjmp	.+16     	; 0x125e <__fp_splitA+0x30>
    124e:	16 16       	cp	r1, r22
    1250:	17 06       	cpc	r1, r23
    1252:	18 06       	cpc	r1, r24
    1254:	99 1f       	adc	r25, r25
    1256:	f1 cf       	rjmp	.-30     	; 0x123a <__fp_splitA+0xc>
    1258:	86 95       	lsr	r24
    125a:	71 05       	cpc	r23, r1
    125c:	61 05       	cpc	r22, r1
    125e:	08 94       	sec
    1260:	08 95       	ret

00001262 <__fp_zero>:
    1262:	e8 94       	clt

00001264 <__fp_szero>:
    1264:	bb 27       	eor	r27, r27
    1266:	66 27       	eor	r22, r22
    1268:	77 27       	eor	r23, r23
    126a:	cb 01       	movw	r24, r22
    126c:	97 f9       	bld	r25, 7
    126e:	08 95       	ret

00001270 <__gesf2>:
    1270:	8a df       	rcall	.-236    	; 0x1186 <__fp_cmp>
    1272:	08 f4       	brcc	.+2      	; 0x1276 <__gesf2+0x6>
    1274:	8f ef       	ldi	r24, 0xFF	; 255
    1276:	08 95       	ret

00001278 <__mulsf3>:
    1278:	0b d0       	rcall	.+22     	; 0x1290 <__mulsf3x>
    127a:	c0 cf       	rjmp	.-128    	; 0x11fc <__fp_round>
    127c:	b1 df       	rcall	.-158    	; 0x11e0 <__fp_pscA>
    127e:	28 f0       	brcs	.+10     	; 0x128a <__mulsf3+0x12>
    1280:	b6 df       	rcall	.-148    	; 0x11ee <__fp_pscB>
    1282:	18 f0       	brcs	.+6      	; 0x128a <__mulsf3+0x12>
    1284:	95 23       	and	r25, r21
    1286:	09 f0       	breq	.+2      	; 0x128a <__mulsf3+0x12>
    1288:	a2 cf       	rjmp	.-188    	; 0x11ce <__fp_inf>
    128a:	a7 cf       	rjmp	.-178    	; 0x11da <__fp_nan>
    128c:	11 24       	eor	r1, r1
    128e:	ea cf       	rjmp	.-44     	; 0x1264 <__fp_szero>

00001290 <__mulsf3x>:
    1290:	c6 df       	rcall	.-116    	; 0x121e <__fp_split3>
    1292:	a0 f3       	brcs	.-24     	; 0x127c <__mulsf3+0x4>

00001294 <__mulsf3_pse>:
    1294:	95 9f       	mul	r25, r21
    1296:	d1 f3       	breq	.-12     	; 0x128c <__mulsf3+0x14>
    1298:	95 0f       	add	r25, r21
    129a:	50 e0       	ldi	r21, 0x00	; 0
    129c:	55 1f       	adc	r21, r21
    129e:	62 9f       	mul	r22, r18
    12a0:	f0 01       	movw	r30, r0
    12a2:	72 9f       	mul	r23, r18
    12a4:	bb 27       	eor	r27, r27
    12a6:	f0 0d       	add	r31, r0
    12a8:	b1 1d       	adc	r27, r1
    12aa:	63 9f       	mul	r22, r19
    12ac:	aa 27       	eor	r26, r26
    12ae:	f0 0d       	add	r31, r0
    12b0:	b1 1d       	adc	r27, r1
    12b2:	aa 1f       	adc	r26, r26
    12b4:	64 9f       	mul	r22, r20
    12b6:	66 27       	eor	r22, r22
    12b8:	b0 0d       	add	r27, r0
    12ba:	a1 1d       	adc	r26, r1
    12bc:	66 1f       	adc	r22, r22
    12be:	82 9f       	mul	r24, r18
    12c0:	22 27       	eor	r18, r18
    12c2:	b0 0d       	add	r27, r0
    12c4:	a1 1d       	adc	r26, r1
    12c6:	62 1f       	adc	r22, r18
    12c8:	73 9f       	mul	r23, r19
    12ca:	b0 0d       	add	r27, r0
    12cc:	a1 1d       	adc	r26, r1
    12ce:	62 1f       	adc	r22, r18
    12d0:	83 9f       	mul	r24, r19
    12d2:	a0 0d       	add	r26, r0
    12d4:	61 1d       	adc	r22, r1
    12d6:	22 1f       	adc	r18, r18
    12d8:	74 9f       	mul	r23, r20
    12da:	33 27       	eor	r19, r19
    12dc:	a0 0d       	add	r26, r0
    12de:	61 1d       	adc	r22, r1
    12e0:	23 1f       	adc	r18, r19
    12e2:	84 9f       	mul	r24, r20
    12e4:	60 0d       	add	r22, r0
    12e6:	21 1d       	adc	r18, r1
    12e8:	82 2f       	mov	r24, r18
    12ea:	76 2f       	mov	r23, r22
    12ec:	6a 2f       	mov	r22, r26
    12ee:	11 24       	eor	r1, r1
    12f0:	9f 57       	subi	r25, 0x7F	; 127
    12f2:	50 40       	sbci	r21, 0x00	; 0
    12f4:	8a f0       	brmi	.+34     	; 0x1318 <__mulsf3_pse+0x84>
    12f6:	e1 f0       	breq	.+56     	; 0x1330 <__mulsf3_pse+0x9c>
    12f8:	88 23       	and	r24, r24
    12fa:	4a f0       	brmi	.+18     	; 0x130e <__mulsf3_pse+0x7a>
    12fc:	ee 0f       	add	r30, r30
    12fe:	ff 1f       	adc	r31, r31
    1300:	bb 1f       	adc	r27, r27
    1302:	66 1f       	adc	r22, r22
    1304:	77 1f       	adc	r23, r23
    1306:	88 1f       	adc	r24, r24
    1308:	91 50       	subi	r25, 0x01	; 1
    130a:	50 40       	sbci	r21, 0x00	; 0
    130c:	a9 f7       	brne	.-22     	; 0x12f8 <__mulsf3_pse+0x64>
    130e:	9e 3f       	cpi	r25, 0xFE	; 254
    1310:	51 05       	cpc	r21, r1
    1312:	70 f0       	brcs	.+28     	; 0x1330 <__mulsf3_pse+0x9c>
    1314:	5c cf       	rjmp	.-328    	; 0x11ce <__fp_inf>
    1316:	a6 cf       	rjmp	.-180    	; 0x1264 <__fp_szero>
    1318:	5f 3f       	cpi	r21, 0xFF	; 255
    131a:	ec f3       	brlt	.-6      	; 0x1316 <__mulsf3_pse+0x82>
    131c:	98 3e       	cpi	r25, 0xE8	; 232
    131e:	dc f3       	brlt	.-10     	; 0x1316 <__mulsf3_pse+0x82>
    1320:	86 95       	lsr	r24
    1322:	77 95       	ror	r23
    1324:	67 95       	ror	r22
    1326:	b7 95       	ror	r27
    1328:	f7 95       	ror	r31
    132a:	e7 95       	ror	r30
    132c:	9f 5f       	subi	r25, 0xFF	; 255
    132e:	c1 f7       	brne	.-16     	; 0x1320 <__mulsf3_pse+0x8c>
    1330:	fe 2b       	or	r31, r30
    1332:	88 0f       	add	r24, r24
    1334:	91 1d       	adc	r25, r1
    1336:	96 95       	lsr	r25
    1338:	87 95       	ror	r24
    133a:	97 f9       	bld	r25, 7
    133c:	08 95       	ret
    133e:	11 f4       	brne	.+4      	; 0x1344 <__mulsf3_pse+0xb0>
    1340:	0e f4       	brtc	.+2      	; 0x1344 <__mulsf3_pse+0xb0>
    1342:	4b cf       	rjmp	.-362    	; 0x11da <__fp_nan>
    1344:	3e c0       	rjmp	.+124    	; 0x13c2 <__fp_mpack>

00001346 <sqrt>:
    1346:	73 df       	rcall	.-282    	; 0x122e <__fp_splitA>
    1348:	d0 f3       	brcs	.-12     	; 0x133e <__mulsf3_pse+0xaa>
    134a:	99 23       	and	r25, r25
    134c:	d9 f3       	breq	.-10     	; 0x1344 <__mulsf3_pse+0xb0>
    134e:	ce f3       	brts	.-14     	; 0x1342 <__mulsf3_pse+0xae>
    1350:	9f 57       	subi	r25, 0x7F	; 127
    1352:	55 0b       	sbc	r21, r21
    1354:	87 ff       	sbrs	r24, 7
    1356:	43 d0       	rcall	.+134    	; 0x13de <__fp_norm2>
    1358:	00 24       	eor	r0, r0
    135a:	a0 e6       	ldi	r26, 0x60	; 96
    135c:	40 ea       	ldi	r20, 0xA0	; 160
    135e:	90 01       	movw	r18, r0
    1360:	80 58       	subi	r24, 0x80	; 128
    1362:	56 95       	lsr	r21
    1364:	97 95       	ror	r25
    1366:	28 f4       	brcc	.+10     	; 0x1372 <sqrt+0x2c>
    1368:	80 5c       	subi	r24, 0xC0	; 192
    136a:	66 0f       	add	r22, r22
    136c:	77 1f       	adc	r23, r23
    136e:	88 1f       	adc	r24, r24
    1370:	20 f0       	brcs	.+8      	; 0x137a <sqrt+0x34>
    1372:	26 17       	cp	r18, r22
    1374:	37 07       	cpc	r19, r23
    1376:	48 07       	cpc	r20, r24
    1378:	30 f4       	brcc	.+12     	; 0x1386 <sqrt+0x40>
    137a:	62 1b       	sub	r22, r18
    137c:	73 0b       	sbc	r23, r19
    137e:	84 0b       	sbc	r24, r20
    1380:	20 29       	or	r18, r0
    1382:	31 29       	or	r19, r1
    1384:	4a 2b       	or	r20, r26
    1386:	a6 95       	lsr	r26
    1388:	17 94       	ror	r1
    138a:	07 94       	ror	r0
    138c:	20 25       	eor	r18, r0
    138e:	31 25       	eor	r19, r1
    1390:	4a 27       	eor	r20, r26
    1392:	58 f7       	brcc	.-42     	; 0x136a <sqrt+0x24>
    1394:	66 0f       	add	r22, r22
    1396:	77 1f       	adc	r23, r23
    1398:	88 1f       	adc	r24, r24
    139a:	20 f0       	brcs	.+8      	; 0x13a4 <sqrt+0x5e>
    139c:	26 17       	cp	r18, r22
    139e:	37 07       	cpc	r19, r23
    13a0:	48 07       	cpc	r20, r24
    13a2:	30 f4       	brcc	.+12     	; 0x13b0 <sqrt+0x6a>
    13a4:	62 0b       	sbc	r22, r18
    13a6:	73 0b       	sbc	r23, r19
    13a8:	84 0b       	sbc	r24, r20
    13aa:	20 0d       	add	r18, r0
    13ac:	31 1d       	adc	r19, r1
    13ae:	41 1d       	adc	r20, r1
    13b0:	a0 95       	com	r26
    13b2:	81 f7       	brne	.-32     	; 0x1394 <sqrt+0x4e>
    13b4:	b9 01       	movw	r22, r18
    13b6:	84 2f       	mov	r24, r20
    13b8:	91 58       	subi	r25, 0x81	; 129
    13ba:	88 0f       	add	r24, r24
    13bc:	96 95       	lsr	r25
    13be:	87 95       	ror	r24
    13c0:	08 95       	ret

000013c2 <__fp_mpack>:
    13c2:	9f 3f       	cpi	r25, 0xFF	; 255
    13c4:	31 f0       	breq	.+12     	; 0x13d2 <__fp_mpack_finite+0xc>

000013c6 <__fp_mpack_finite>:
    13c6:	91 50       	subi	r25, 0x01	; 1
    13c8:	20 f4       	brcc	.+8      	; 0x13d2 <__fp_mpack_finite+0xc>
    13ca:	87 95       	ror	r24
    13cc:	77 95       	ror	r23
    13ce:	67 95       	ror	r22
    13d0:	b7 95       	ror	r27
    13d2:	88 0f       	add	r24, r24
    13d4:	91 1d       	adc	r25, r1
    13d6:	96 95       	lsr	r25
    13d8:	87 95       	ror	r24
    13da:	97 f9       	bld	r25, 7
    13dc:	08 95       	ret

000013de <__fp_norm2>:
    13de:	91 50       	subi	r25, 0x01	; 1
    13e0:	50 40       	sbci	r21, 0x00	; 0
    13e2:	66 0f       	add	r22, r22
    13e4:	77 1f       	adc	r23, r23
    13e6:	88 1f       	adc	r24, r24
    13e8:	d2 f7       	brpl	.-12     	; 0x13de <__fp_norm2>
    13ea:	08 95       	ret

000013ec <__divmodhi4>:
    13ec:	97 fb       	bst	r25, 7
    13ee:	07 2e       	mov	r0, r23
    13f0:	16 f4       	brtc	.+4      	; 0x13f6 <__divmodhi4+0xa>
    13f2:	00 94       	com	r0
    13f4:	06 d0       	rcall	.+12     	; 0x1402 <__divmodhi4_neg1>
    13f6:	77 fd       	sbrc	r23, 7
    13f8:	08 d0       	rcall	.+16     	; 0x140a <__divmodhi4_neg2>
    13fa:	0b d0       	rcall	.+22     	; 0x1412 <__udivmodhi4>
    13fc:	07 fc       	sbrc	r0, 7
    13fe:	05 d0       	rcall	.+10     	; 0x140a <__divmodhi4_neg2>
    1400:	3e f4       	brtc	.+14     	; 0x1410 <__divmodhi4_exit>

00001402 <__divmodhi4_neg1>:
    1402:	90 95       	com	r25
    1404:	81 95       	neg	r24
    1406:	9f 4f       	sbci	r25, 0xFF	; 255
    1408:	08 95       	ret

0000140a <__divmodhi4_neg2>:
    140a:	70 95       	com	r23
    140c:	61 95       	neg	r22
    140e:	7f 4f       	sbci	r23, 0xFF	; 255

00001410 <__divmodhi4_exit>:
    1410:	08 95       	ret

00001412 <__udivmodhi4>:
    1412:	aa 1b       	sub	r26, r26
    1414:	bb 1b       	sub	r27, r27
    1416:	51 e1       	ldi	r21, 0x11	; 17
    1418:	07 c0       	rjmp	.+14     	; 0x1428 <__udivmodhi4_ep>

0000141a <__udivmodhi4_loop>:
    141a:	aa 1f       	adc	r26, r26
    141c:	bb 1f       	adc	r27, r27
    141e:	a6 17       	cp	r26, r22
    1420:	b7 07       	cpc	r27, r23
    1422:	10 f0       	brcs	.+4      	; 0x1428 <__udivmodhi4_ep>
    1424:	a6 1b       	sub	r26, r22
    1426:	b7 0b       	sbc	r27, r23

00001428 <__udivmodhi4_ep>:
    1428:	88 1f       	adc	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	5a 95       	dec	r21
    142e:	a9 f7       	brne	.-22     	; 0x141a <__udivmodhi4_loop>
    1430:	80 95       	com	r24
    1432:	90 95       	com	r25
    1434:	bc 01       	movw	r22, r24
    1436:	cd 01       	movw	r24, r26
    1438:	08 95       	ret

0000143a <__tablejump2__>:
    143a:	ee 0f       	add	r30, r30
    143c:	ff 1f       	adc	r31, r31
    143e:	05 90       	lpm	r0, Z+
    1440:	f4 91       	lpm	r31, Z
    1442:	e0 2d       	mov	r30, r0
    1444:	09 94       	ijmp

00001446 <_exit>:
    1446:	f8 94       	cli

00001448 <__stop_program>:
    1448:	ff cf       	rjmp	.-2      	; 0x1448 <__stop_program>
