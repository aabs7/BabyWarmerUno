
BabyWarmerUno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000150e  000015a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000150e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  0080010a  0080010a  000015ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003d77  00000000  00000000  000018ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dcf  00000000  00000000  00005623  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000142f  00000000  00000000  000063f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000670  00000000  00000000  00007824  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000eeb  00000000  00000000  00007e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001430  00000000  00000000  00008d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  0000a1af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	34 c0       	rjmp	.+104    	; 0x6a <__ctors_end>
       2:	00 00       	nop
       4:	59 c0       	rjmp	.+178    	; 0xb8 <__bad_interrupt>
       6:	00 00       	nop
       8:	57 c0       	rjmp	.+174    	; 0xb8 <__bad_interrupt>
       a:	00 00       	nop
       c:	55 c0       	rjmp	.+170    	; 0xb8 <__bad_interrupt>
       e:	00 00       	nop
      10:	53 c0       	rjmp	.+166    	; 0xb8 <__bad_interrupt>
      12:	00 00       	nop
      14:	51 c0       	rjmp	.+162    	; 0xb8 <__bad_interrupt>
      16:	00 00       	nop
      18:	4f c0       	rjmp	.+158    	; 0xb8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	4d c0       	rjmp	.+154    	; 0xb8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	4b c0       	rjmp	.+150    	; 0xb8 <__bad_interrupt>
      22:	00 00       	nop
      24:	49 c0       	rjmp	.+146    	; 0xb8 <__bad_interrupt>
      26:	00 00       	nop
      28:	47 c0       	rjmp	.+142    	; 0xb8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ac c0       	rjmp	.+344    	; 0x186 <__vector_11>
      2e:	00 00       	nop
      30:	43 c0       	rjmp	.+134    	; 0xb8 <__bad_interrupt>
      32:	00 00       	nop
      34:	41 c0       	rjmp	.+130    	; 0xb8 <__bad_interrupt>
      36:	00 00       	nop
      38:	3f c0       	rjmp	.+126    	; 0xb8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	3d c0       	rjmp	.+122    	; 0xb8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3b c0       	rjmp	.+118    	; 0xb8 <__bad_interrupt>
      42:	00 00       	nop
      44:	39 c0       	rjmp	.+114    	; 0xb8 <__bad_interrupt>
      46:	00 00       	nop
      48:	37 c0       	rjmp	.+110    	; 0xb8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	35 c0       	rjmp	.+106    	; 0xb8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	33 c0       	rjmp	.+102    	; 0xb8 <__bad_interrupt>
      52:	00 00       	nop
      54:	31 c0       	rjmp	.+98     	; 0xb8 <__bad_interrupt>
      56:	00 00       	nop
      58:	2f c0       	rjmp	.+94     	; 0xb8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	2d c0       	rjmp	.+90     	; 0xb8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2b c0       	rjmp	.+86     	; 0xb8 <__bad_interrupt>
      62:	00 00       	nop
      64:	29 c0       	rjmp	.+82     	; 0xb8 <__bad_interrupt>
	...

00000068 <__ctors_start>:
      68:	0a 05       	cpc	r16, r10

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	ee e0       	ldi	r30, 0x0E	; 14
      7e:	f5 e1       	ldi	r31, 0x15	; 21
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	aa 30       	cpi	r26, 0x0A	; 10
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	21 e0       	ldi	r18, 0x01	; 1
      8e:	aa e0       	ldi	r26, 0x0A	; 10
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	af 33       	cpi	r26, 0x3F	; 63
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	c5 e3       	ldi	r28, 0x35	; 53
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	21 97       	sbiw	r28, 0x01	; 1
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__tablejump2__>
      ac:	c4 33       	cpi	r28, 0x34	; 52
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	92 d3       	rcall	.+1828   	; 0x7d8 <main>
      b4:	0c 94 85 0a 	jmp	0x150a	; 0x150a <_exit>

000000b8 <__bad_interrupt>:
      b8:	a3 cf       	rjmp	.-186    	; 0x0 <__vectors>

000000ba <_Z12init_devicesv>:
	
	//second 4-7 segment display from left to right
	max1.MAX7219_writeData(4,B);
	max1.MAX7219_writeData(8,A);
	max1.MAX7219_writeData(6,B);
	max1.MAX7219_writeData(2,Y);
      ba:	78 94       	sei
      bc:	81 e1       	ldi	r24, 0x11	; 17
      be:	91 e0       	ldi	r25, 0x01	; 1
      c0:	c6 d4       	rcall	.+2444   	; 0xa4e <_ZN3led8led_initEv>
      c2:	88 e3       	ldi	r24, 0x38	; 56
      c4:	91 e0       	ldi	r25, 0x01	; 1
      c6:	b7 d4       	rcall	.+2414   	; 0xa36 <_ZN8Controls12initControlsEv>
      c8:	81 e1       	ldi	r24, 0x11	; 17
      ca:	91 e0       	ldi	r25, 0x01	; 1
      cc:	c0 d4       	rcall	.+2432   	; 0xa4e <_ZN3led8led_initEv>
      ce:	61 e0       	ldi	r22, 0x01	; 1
      d0:	70 e0       	ldi	r23, 0x00	; 0
      d2:	8a e3       	ldi	r24, 0x3A	; 58
      d4:	91 e0       	ldi	r25, 0x01	; 1
      d6:	4f d7       	rcall	.+3742   	; 0xf76 <_ZN6Timerr11setTimerNumEi>
      d8:	8a e3       	ldi	r24, 0x3A	; 58
      da:	91 e0       	ldi	r25, 0x01	; 1
      dc:	50 d7       	rcall	.+3744   	; 0xf7e <_ZN6Timerr19setCompareInterruptEv>
      de:	68 ec       	ldi	r22, 0xC8	; 200
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	8a e3       	ldi	r24, 0x3A	; 58
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	51 d7       	rcall	.+3746   	; 0xf8a <_ZN6Timerr16startCustomTimerEi>
      e8:	60 e0       	ldi	r22, 0x00	; 0
      ea:	88 e1       	ldi	r24, 0x18	; 24
      ec:	91 e0       	ldi	r25, 0x01	; 1
      ee:	03 d7       	rcall	.+3590   	; 0xef6 <_ZN7max721912MAX7219_initEh>
      f0:	24 e0       	ldi	r18, 0x04	; 4
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	44 e0       	ldi	r20, 0x04	; 4
      f6:	50 e0       	ldi	r21, 0x00	; 0
      f8:	60 e0       	ldi	r22, 0x00	; 0
      fa:	70 e0       	ldi	r23, 0x00	; 0
      fc:	88 e1       	ldi	r24, 0x18	; 24
      fe:	91 e0       	ldi	r25, 0x01	; 1
     100:	cf d6       	rcall	.+3486   	; 0xea0 <_ZN7max721911MAX7219_setEiii>
     102:	8f e3       	ldi	r24, 0x3F	; 63
     104:	9c e9       	ldi	r25, 0x9C	; 156
     106:	01 97       	sbiw	r24, 0x01	; 1
     108:	f1 f7       	brne	.-4      	; 0x106 <_Z12init_devicesv+0x4c>
     10a:	00 c0       	rjmp	.+0      	; 0x10c <_Z12init_devicesv+0x52>
     10c:	00 00       	nop
     10e:	24 e0       	ldi	r18, 0x04	; 4
     110:	30 e0       	ldi	r19, 0x00	; 0
     112:	44 e0       	ldi	r20, 0x04	; 4
     114:	50 e0       	ldi	r21, 0x00	; 0
     116:	61 e0       	ldi	r22, 0x01	; 1
     118:	70 e0       	ldi	r23, 0x00	; 0
     11a:	82 e1       	ldi	r24, 0x12	; 18
     11c:	91 e0       	ldi	r25, 0x01	; 1
     11e:	c0 d6       	rcall	.+3456   	; 0xea0 <_ZN7max721911MAX7219_setEiii>
     120:	8f e3       	ldi	r24, 0x3F	; 63
     122:	9c e9       	ldi	r25, 0x9C	; 156
     124:	01 97       	sbiw	r24, 0x01	; 1
     126:	f1 f7       	brne	.-4      	; 0x124 <_Z12init_devicesv+0x6a>
     128:	00 c0       	rjmp	.+0      	; 0x12a <_Z12init_devicesv+0x70>
     12a:	00 00       	nop
     12c:	60 e0       	ldi	r22, 0x00	; 0
     12e:	88 e1       	ldi	r24, 0x18	; 24
     130:	91 e0       	ldi	r25, 0x01	; 1
     132:	e1 d6       	rcall	.+3522   	; 0xef6 <_ZN7max721912MAX7219_initEh>
     134:	8f e3       	ldi	r24, 0x3F	; 63
     136:	9c e9       	ldi	r25, 0x9C	; 156
     138:	01 97       	sbiw	r24, 0x01	; 1
     13a:	f1 f7       	brne	.-4      	; 0x138 <_Z12init_devicesv+0x7e>
     13c:	00 c0       	rjmp	.+0      	; 0x13e <_Z12init_devicesv+0x84>
     13e:	00 00       	nop
     140:	60 e0       	ldi	r22, 0x00	; 0
     142:	82 e1       	ldi	r24, 0x12	; 18
     144:	91 e0       	ldi	r25, 0x01	; 1
     146:	d7 d6       	rcall	.+3502   	; 0xef6 <_ZN7max721912MAX7219_initEh>
     148:	8f e3       	ldi	r24, 0x3F	; 63
     14a:	9c e9       	ldi	r25, 0x9C	; 156
     14c:	01 97       	sbiw	r24, 0x01	; 1
     14e:	f1 f7       	brne	.-4      	; 0x14c <_Z12init_devicesv+0x92>
     150:	00 c0       	rjmp	.+0      	; 0x152 <_Z12init_devicesv+0x98>
     152:	00 00       	nop
     154:	88 e1       	ldi	r24, 0x18	; 24
     156:	91 e0       	ldi	r25, 0x01	; 1
     158:	ed d6       	rcall	.+3546   	; 0xf34 <_ZN7max721920MAX7219_clearDisplayEv>
     15a:	9f ef       	ldi	r25, 0xFF	; 255
     15c:	26 e7       	ldi	r18, 0x76	; 118
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	91 50       	subi	r25, 0x01	; 1
     162:	20 40       	sbci	r18, 0x00	; 0
     164:	80 40       	sbci	r24, 0x00	; 0
     166:	e1 f7       	brne	.-8      	; 0x160 <_Z12init_devicesv+0xa6>
     168:	00 c0       	rjmp	.+0      	; 0x16a <_Z12init_devicesv+0xb0>
     16a:	00 00       	nop
     16c:	82 e1       	ldi	r24, 0x12	; 18
     16e:	91 e0       	ldi	r25, 0x01	; 1
     170:	e1 d6       	rcall	.+3522   	; 0xf34 <_ZN7max721920MAX7219_clearDisplayEv>
     172:	9f ef       	ldi	r25, 0xFF	; 255
     174:	26 e7       	ldi	r18, 0x76	; 118
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	91 50       	subi	r25, 0x01	; 1
     17a:	20 40       	sbci	r18, 0x00	; 0
     17c:	80 40       	sbci	r24, 0x00	; 0
     17e:	e1 f7       	brne	.-8      	; 0x178 <_Z12init_devicesv+0xbe>
     180:	00 c0       	rjmp	.+0      	; 0x182 <_Z12init_devicesv+0xc8>
     182:	00 00       	nop
     184:	08 95       	ret

00000186 <__vector_11>:
     186:	1f 92       	push	r1
     188:	0f 92       	push	r0
     18a:	0f b6       	in	r0, 0x3f	; 63
     18c:	0f 92       	push	r0
     18e:	11 24       	eor	r1, r1
     190:	2f 93       	push	r18
     192:	3f 93       	push	r19
     194:	8f 93       	push	r24
     196:	9f 93       	push	r25
     198:	10 92 85 00 	sts	0x0085, r1
     19c:	10 92 84 00 	sts	0x0084, r1
     1a0:	80 91 3e 01 	lds	r24, 0x013E
     1a4:	88 23       	and	r24, r24
     1a6:	49 f0       	breq	.+18     	; 0x1ba <__vector_11+0x34>
     1a8:	80 91 3c 01 	lds	r24, 0x013C
     1ac:	90 91 3d 01 	lds	r25, 0x013D
     1b0:	01 96       	adiw	r24, 0x01	; 1
     1b2:	90 93 3d 01 	sts	0x013D, r25
     1b6:	80 93 3c 01 	sts	0x013C, r24
     1ba:	80 91 1e 01 	lds	r24, 0x011E
     1be:	90 91 1f 01 	lds	r25, 0x011F
     1c2:	01 96       	adiw	r24, 0x01	; 1
     1c4:	90 93 1f 01 	sts	0x011F, r25
     1c8:	80 93 1e 01 	sts	0x011E, r24
     1cc:	20 91 1e 01 	lds	r18, 0x011E
     1d0:	30 91 1f 01 	lds	r19, 0x011F
     1d4:	80 91 00 01 	lds	r24, 0x0100
     1d8:	90 91 01 01 	lds	r25, 0x0101
     1dc:	28 17       	cp	r18, r24
     1de:	39 07       	cpc	r19, r25
     1e0:	3c f0       	brlt	.+14     	; 0x1f0 <__vector_11+0x6a>
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	80 93 39 01 	sts	0x0139, r24
     1e8:	10 92 1f 01 	sts	0x011F, r1
     1ec:	10 92 1e 01 	sts	0x011E, r1
     1f0:	9f 91       	pop	r25
     1f2:	8f 91       	pop	r24
     1f4:	3f 91       	pop	r19
     1f6:	2f 91       	pop	r18
     1f8:	0f 90       	pop	r0
     1fa:	0f be       	out	0x3f, r0	; 63
     1fc:	0f 90       	pop	r0
     1fe:	1f 90       	pop	r1
     200:	18 95       	reti

00000202 <_Z13sendToDisplayfff>:
     202:	4f 92       	push	r4
     204:	5f 92       	push	r5
     206:	6f 92       	push	r6
     208:	7f 92       	push	r7
     20a:	8f 92       	push	r8
     20c:	9f 92       	push	r9
     20e:	af 92       	push	r10
     210:	bf 92       	push	r11
     212:	cf 92       	push	r12
     214:	df 92       	push	r13
     216:	ef 92       	push	r14
     218:	ff 92       	push	r15
     21a:	0f 93       	push	r16
     21c:	1f 93       	push	r17
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	2b 01       	movw	r4, r22
     224:	3c 01       	movw	r6, r24
     226:	49 01       	movw	r8, r18
     228:	5a 01       	movw	r10, r20
     22a:	67 01       	movw	r12, r14
     22c:	78 01       	movw	r14, r16
     22e:	4f ef       	ldi	r20, 0xFF	; 255
     230:	69 e0       	ldi	r22, 0x09	; 9
     232:	88 e1       	ldi	r24, 0x18	; 24
     234:	91 e0       	ldi	r25, 0x01	; 1
     236:	3c d6       	rcall	.+3192   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     238:	4f ef       	ldi	r20, 0xFF	; 255
     23a:	69 e0       	ldi	r22, 0x09	; 9
     23c:	82 e1       	ldi	r24, 0x12	; 18
     23e:	91 e0       	ldi	r25, 0x01	; 1
     240:	37 d6       	rcall	.+3182   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     242:	40 e0       	ldi	r20, 0x00	; 0
     244:	64 e0       	ldi	r22, 0x04	; 4
     246:	88 e1       	ldi	r24, 0x18	; 24
     248:	91 e0       	ldi	r25, 0x01	; 1
     24a:	32 d6       	rcall	.+3172   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	40 e2       	ldi	r20, 0x20	; 32
     252:	51 e4       	ldi	r21, 0x41	; 65
     254:	c3 01       	movw	r24, r6
     256:	b2 01       	movw	r22, r4
     258:	22 d7       	rcall	.+3652   	; 0x109e <__divsf3>
     25a:	8e d7       	rcall	.+3868   	; 0x1178 <__fixunssfsi>
     25c:	46 2f       	mov	r20, r22
     25e:	68 e0       	ldi	r22, 0x08	; 8
     260:	88 e1       	ldi	r24, 0x18	; 24
     262:	91 e0       	ldi	r25, 0x01	; 1
     264:	25 d6       	rcall	.+3146   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     266:	c3 01       	movw	r24, r6
     268:	b2 01       	movw	r22, r4
     26a:	81 d7       	rcall	.+3842   	; 0x116e <__fixsfsi>
     26c:	ca e0       	ldi	r28, 0x0A	; 10
     26e:	d0 e0       	ldi	r29, 0x00	; 0
     270:	cb 01       	movw	r24, r22
     272:	be 01       	movw	r22, r28
     274:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__divmodhi4>
     278:	48 2f       	mov	r20, r24
     27a:	40 68       	ori	r20, 0x80	; 128
     27c:	66 e0       	ldi	r22, 0x06	; 6
     27e:	88 e1       	ldi	r24, 0x18	; 24
     280:	91 e0       	ldi	r25, 0x01	; 1
     282:	16 d6       	rcall	.+3116   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     284:	20 e0       	ldi	r18, 0x00	; 0
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	40 e2       	ldi	r20, 0x20	; 32
     28a:	51 e4       	ldi	r21, 0x41	; 65
     28c:	c3 01       	movw	r24, r6
     28e:	b2 01       	movw	r22, r4
     290:	0e 94 9e 09 	call	0x133c	; 0x133c <__mulsf3>
     294:	6c d7       	rcall	.+3800   	; 0x116e <__fixsfsi>
     296:	cb 01       	movw	r24, r22
     298:	be 01       	movw	r22, r28
     29a:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__divmodhi4>
     29e:	48 2f       	mov	r20, r24
     2a0:	62 e0       	ldi	r22, 0x02	; 2
     2a2:	88 e1       	ldi	r24, 0x18	; 24
     2a4:	91 e0       	ldi	r25, 0x01	; 1
     2a6:	04 d6       	rcall	.+3080   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     2a8:	40 e0       	ldi	r20, 0x00	; 0
     2aa:	63 e0       	ldi	r22, 0x03	; 3
     2ac:	88 e1       	ldi	r24, 0x18	; 24
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	ff d5       	rcall	.+3070   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     2b2:	20 e0       	ldi	r18, 0x00	; 0
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	40 e2       	ldi	r20, 0x20	; 32
     2b8:	51 e4       	ldi	r21, 0x41	; 65
     2ba:	c5 01       	movw	r24, r10
     2bc:	b4 01       	movw	r22, r8
     2be:	ef d6       	rcall	.+3550   	; 0x109e <__divsf3>
     2c0:	5b d7       	rcall	.+3766   	; 0x1178 <__fixunssfsi>
     2c2:	46 2f       	mov	r20, r22
     2c4:	67 e0       	ldi	r22, 0x07	; 7
     2c6:	88 e1       	ldi	r24, 0x18	; 24
     2c8:	91 e0       	ldi	r25, 0x01	; 1
     2ca:	f2 d5       	rcall	.+3044   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     2cc:	c5 01       	movw	r24, r10
     2ce:	b4 01       	movw	r22, r8
     2d0:	4e d7       	rcall	.+3740   	; 0x116e <__fixsfsi>
     2d2:	cb 01       	movw	r24, r22
     2d4:	be 01       	movw	r22, r28
     2d6:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__divmodhi4>
     2da:	48 2f       	mov	r20, r24
     2dc:	40 68       	ori	r20, 0x80	; 128
     2de:	65 e0       	ldi	r22, 0x05	; 5
     2e0:	88 e1       	ldi	r24, 0x18	; 24
     2e2:	91 e0       	ldi	r25, 0x01	; 1
     2e4:	e5 d5       	rcall	.+3018   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	40 e2       	ldi	r20, 0x20	; 32
     2ec:	51 e4       	ldi	r21, 0x41	; 65
     2ee:	c5 01       	movw	r24, r10
     2f0:	b4 01       	movw	r22, r8
     2f2:	0e 94 9e 09 	call	0x133c	; 0x133c <__mulsf3>
     2f6:	3b d7       	rcall	.+3702   	; 0x116e <__fixsfsi>
     2f8:	cb 01       	movw	r24, r22
     2fa:	be 01       	movw	r22, r28
     2fc:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__divmodhi4>
     300:	48 2f       	mov	r20, r24
     302:	61 e0       	ldi	r22, 0x01	; 1
     304:	88 e1       	ldi	r24, 0x18	; 24
     306:	91 e0       	ldi	r25, 0x01	; 1
     308:	d3 d5       	rcall	.+2982   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     30a:	20 e0       	ldi	r18, 0x00	; 0
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	40 e2       	ldi	r20, 0x20	; 32
     310:	51 e4       	ldi	r21, 0x41	; 65
     312:	c7 01       	movw	r24, r14
     314:	b6 01       	movw	r22, r12
     316:	c3 d6       	rcall	.+3462   	; 0x109e <__divsf3>
     318:	2f d7       	rcall	.+3678   	; 0x1178 <__fixunssfsi>
     31a:	46 2f       	mov	r20, r22
     31c:	66 e0       	ldi	r22, 0x06	; 6
     31e:	82 e1       	ldi	r24, 0x12	; 18
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	c6 d5       	rcall	.+2956   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     324:	c7 01       	movw	r24, r14
     326:	b6 01       	movw	r22, r12
     328:	22 d7       	rcall	.+3652   	; 0x116e <__fixsfsi>
     32a:	cb 01       	movw	r24, r22
     32c:	be 01       	movw	r22, r28
     32e:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__divmodhi4>
     332:	48 2f       	mov	r20, r24
     334:	40 68       	ori	r20, 0x80	; 128
     336:	68 e0       	ldi	r22, 0x08	; 8
     338:	82 e1       	ldi	r24, 0x12	; 18
     33a:	91 e0       	ldi	r25, 0x01	; 1
     33c:	b9 d5       	rcall	.+2930   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	40 e2       	ldi	r20, 0x20	; 32
     344:	51 e4       	ldi	r21, 0x41	; 65
     346:	c7 01       	movw	r24, r14
     348:	b6 01       	movw	r22, r12
     34a:	f8 d7       	rcall	.+4080   	; 0x133c <__mulsf3>
     34c:	10 d7       	rcall	.+3616   	; 0x116e <__fixsfsi>
     34e:	cb 01       	movw	r24, r22
     350:	be 01       	movw	r22, r28
     352:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__divmodhi4>
     356:	48 2f       	mov	r20, r24
     358:	62 e0       	ldi	r22, 0x02	; 2
     35a:	82 e1       	ldi	r24, 0x12	; 18
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	a8 d5       	rcall	.+2896   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	ff 90       	pop	r15
     36a:	ef 90       	pop	r14
     36c:	df 90       	pop	r13
     36e:	cf 90       	pop	r12
     370:	bf 90       	pop	r11
     372:	af 90       	pop	r10
     374:	9f 90       	pop	r9
     376:	8f 90       	pop	r8
     378:	7f 90       	pop	r7
     37a:	6f 90       	pop	r6
     37c:	5f 90       	pop	r5
     37e:	4f 90       	pop	r4
     380:	08 95       	ret

00000382 <_Z18sendToDisplayBelowf>:
     382:	cf 92       	push	r12
     384:	df 92       	push	r13
     386:	ef 92       	push	r14
     388:	ff 92       	push	r15
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	6b 01       	movw	r12, r22
     390:	7c 01       	movw	r14, r24
     392:	4f ef       	ldi	r20, 0xFF	; 255
     394:	69 e0       	ldi	r22, 0x09	; 9
     396:	82 e1       	ldi	r24, 0x12	; 18
     398:	91 e0       	ldi	r25, 0x01	; 1
     39a:	8a d5       	rcall	.+2836   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	40 e2       	ldi	r20, 0x20	; 32
     3a2:	51 e4       	ldi	r21, 0x41	; 65
     3a4:	c7 01       	movw	r24, r14
     3a6:	b6 01       	movw	r22, r12
     3a8:	7a d6       	rcall	.+3316   	; 0x109e <__divsf3>
     3aa:	e6 d6       	rcall	.+3532   	; 0x1178 <__fixunssfsi>
     3ac:	46 2f       	mov	r20, r22
     3ae:	66 e0       	ldi	r22, 0x06	; 6
     3b0:	82 e1       	ldi	r24, 0x12	; 18
     3b2:	91 e0       	ldi	r25, 0x01	; 1
     3b4:	7d d5       	rcall	.+2810   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     3b6:	c7 01       	movw	r24, r14
     3b8:	b6 01       	movw	r22, r12
     3ba:	d9 d6       	rcall	.+3506   	; 0x116e <__fixsfsi>
     3bc:	ca e0       	ldi	r28, 0x0A	; 10
     3be:	d0 e0       	ldi	r29, 0x00	; 0
     3c0:	cb 01       	movw	r24, r22
     3c2:	be 01       	movw	r22, r28
     3c4:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__divmodhi4>
     3c8:	48 2f       	mov	r20, r24
     3ca:	40 68       	ori	r20, 0x80	; 128
     3cc:	68 e0       	ldi	r22, 0x08	; 8
     3ce:	82 e1       	ldi	r24, 0x12	; 18
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	6e d5       	rcall	.+2780   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     3d4:	20 e0       	ldi	r18, 0x00	; 0
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	40 e2       	ldi	r20, 0x20	; 32
     3da:	51 e4       	ldi	r21, 0x41	; 65
     3dc:	c7 01       	movw	r24, r14
     3de:	b6 01       	movw	r22, r12
     3e0:	ad d7       	rcall	.+3930   	; 0x133c <__mulsf3>
     3e2:	c5 d6       	rcall	.+3466   	; 0x116e <__fixsfsi>
     3e4:	cb 01       	movw	r24, r22
     3e6:	be 01       	movw	r22, r28
     3e8:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__divmodhi4>
     3ec:	48 2f       	mov	r20, r24
     3ee:	62 e0       	ldi	r22, 0x02	; 2
     3f0:	82 e1       	ldi	r24, 0x12	; 18
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	5d d5       	rcall	.+2746   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	ff 90       	pop	r15
     3fc:	ef 90       	pop	r14
     3fe:	df 90       	pop	r13
     400:	cf 90       	pop	r12
     402:	08 95       	ret

00000404 <_Z21displaySetTemperaturev>:
     404:	40 e0       	ldi	r20, 0x00	; 0
     406:	69 e0       	ldi	r22, 0x09	; 9
     408:	88 e1       	ldi	r24, 0x18	; 24
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	51 d5       	rcall	.+2722   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     40e:	40 e0       	ldi	r20, 0x00	; 0
     410:	63 e0       	ldi	r22, 0x03	; 3
     412:	88 e1       	ldi	r24, 0x18	; 24
     414:	91 e0       	ldi	r25, 0x01	; 1
     416:	4c d5       	rcall	.+2712   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     418:	4b e5       	ldi	r20, 0x5B	; 91
     41a:	67 e0       	ldi	r22, 0x07	; 7
     41c:	88 e1       	ldi	r24, 0x18	; 24
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	47 d5       	rcall	.+2702   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     422:	4f e4       	ldi	r20, 0x4F	; 79
     424:	65 e0       	ldi	r22, 0x05	; 5
     426:	88 e1       	ldi	r24, 0x18	; 24
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	42 d5       	rcall	.+2692   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     42c:	4f e0       	ldi	r20, 0x0F	; 15
     42e:	61 e0       	ldi	r22, 0x01	; 1
     430:	88 e1       	ldi	r24, 0x18	; 24
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	3d d5       	rcall	.+2682   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     436:	4f e0       	ldi	r20, 0x0F	; 15
     438:	64 e0       	ldi	r22, 0x04	; 4
     43a:	88 e1       	ldi	r24, 0x18	; 24
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	38 d5       	rcall	.+2672   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     440:	47 e6       	ldi	r20, 0x67	; 103
     442:	68 e0       	ldi	r22, 0x08	; 8
     444:	88 e1       	ldi	r24, 0x18	; 24
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	33 d5       	rcall	.+2662   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     44a:	40 e0       	ldi	r20, 0x00	; 0
     44c:	66 e0       	ldi	r22, 0x06	; 6
     44e:	88 e1       	ldi	r24, 0x18	; 24
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	2e d5       	rcall	.+2652   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     454:	40 e0       	ldi	r20, 0x00	; 0
     456:	62 e0       	ldi	r22, 0x02	; 2
     458:	88 e1       	ldi	r24, 0x18	; 24
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	29 c5       	rjmp	.+2642   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     45e:	08 95       	ret

00000460 <_Z14displayPreHeatv>:
     460:	40 e0       	ldi	r20, 0x00	; 0
     462:	69 e0       	ldi	r22, 0x09	; 9
     464:	88 e1       	ldi	r24, 0x18	; 24
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	23 d5       	rcall	.+2630   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     46a:	40 e0       	ldi	r20, 0x00	; 0
     46c:	63 e0       	ldi	r22, 0x03	; 3
     46e:	88 e1       	ldi	r24, 0x18	; 24
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	1e d5       	rcall	.+2620   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     474:	47 e6       	ldi	r20, 0x67	; 103
     476:	67 e0       	ldi	r22, 0x07	; 7
     478:	88 e1       	ldi	r24, 0x18	; 24
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	19 d5       	rcall	.+2610   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     47e:	45 e0       	ldi	r20, 0x05	; 5
     480:	65 e0       	ldi	r22, 0x05	; 5
     482:	88 e1       	ldi	r24, 0x18	; 24
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	14 d5       	rcall	.+2600   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     488:	4f e4       	ldi	r20, 0x4F	; 79
     48a:	61 e0       	ldi	r22, 0x01	; 1
     48c:	88 e1       	ldi	r24, 0x18	; 24
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	0f d5       	rcall	.+2590   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     492:	47 e3       	ldi	r20, 0x37	; 55
     494:	64 e0       	ldi	r22, 0x04	; 4
     496:	88 e1       	ldi	r24, 0x18	; 24
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	0a d5       	rcall	.+2580   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     49c:	4f e4       	ldi	r20, 0x4F	; 79
     49e:	68 e0       	ldi	r22, 0x08	; 8
     4a0:	88 e1       	ldi	r24, 0x18	; 24
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	05 d5       	rcall	.+2570   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     4a6:	47 e7       	ldi	r20, 0x77	; 119
     4a8:	66 e0       	ldi	r22, 0x06	; 6
     4aa:	88 e1       	ldi	r24, 0x18	; 24
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	00 d5       	rcall	.+2560   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     4b0:	4f e0       	ldi	r20, 0x0F	; 15
     4b2:	62 e0       	ldi	r22, 0x02	; 2
     4b4:	88 e1       	ldi	r24, 0x18	; 24
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	fb c4       	rjmp	.+2550   	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
     4ba:	08 95       	ret

000004bc <_Z8titititiv>:
// Order of right and left 4-7 segment matrix registers.
// 3 7 5 1      4 8 6 2


void titititi(){
	controls.startBuzzer();
     4bc:	88 e3       	ldi	r24, 0x38	; 56
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	c2 d2       	rcall	.+1412   	; 0xa46 <_ZN8Controls11startBuzzerEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4c2:	2f ef       	ldi	r18, 0xFF	; 255
     4c4:	81 ee       	ldi	r24, 0xE1	; 225
     4c6:	94 e0       	ldi	r25, 0x04	; 4
     4c8:	21 50       	subi	r18, 0x01	; 1
     4ca:	80 40       	sbci	r24, 0x00	; 0
     4cc:	90 40       	sbci	r25, 0x00	; 0
     4ce:	e1 f7       	brne	.-8      	; 0x4c8 <_Z8titititiv+0xc>
     4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <_Z8titititiv+0x16>
     4d2:	00 00       	nop
	_delay_ms(100);
	controls.stopBuzzer();
     4d4:	88 e3       	ldi	r24, 0x38	; 56
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	b8 d2       	rcall	.+1392   	; 0xa4a <_ZN8Controls10stopBuzzerEv>
     4da:	2f ef       	ldi	r18, 0xFF	; 255
     4dc:	81 ee       	ldi	r24, 0xE1	; 225
     4de:	94 e0       	ldi	r25, 0x04	; 4
     4e0:	21 50       	subi	r18, 0x01	; 1
     4e2:	80 40       	sbci	r24, 0x00	; 0
     4e4:	90 40       	sbci	r25, 0x00	; 0
     4e6:	e1 f7       	brne	.-8      	; 0x4e0 <_Z8titititiv+0x24>
     4e8:	00 c0       	rjmp	.+0      	; 0x4ea <_Z8titititiv+0x2e>
     4ea:	00 00       	nop
	_delay_ms(100);
	controls.startBuzzer();
     4ec:	88 e3       	ldi	r24, 0x38	; 56
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	aa d2       	rcall	.+1364   	; 0xa46 <_ZN8Controls11startBuzzerEv>
     4f2:	2f ef       	ldi	r18, 0xFF	; 255
     4f4:	81 ee       	ldi	r24, 0xE1	; 225
     4f6:	94 e0       	ldi	r25, 0x04	; 4
     4f8:	21 50       	subi	r18, 0x01	; 1
     4fa:	80 40       	sbci	r24, 0x00	; 0
     4fc:	90 40       	sbci	r25, 0x00	; 0
     4fe:	e1 f7       	brne	.-8      	; 0x4f8 <_Z8titititiv+0x3c>
     500:	00 c0       	rjmp	.+0      	; 0x502 <_Z8titititiv+0x46>
     502:	00 00       	nop
	_delay_ms(100);
	controls.stopBuzzer();
     504:	88 e3       	ldi	r24, 0x38	; 56
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	a0 d2       	rcall	.+1344   	; 0xa4a <_ZN8Controls10stopBuzzerEv>
     50a:	2f ef       	ldi	r18, 0xFF	; 255
     50c:	85 ea       	ldi	r24, 0xA5	; 165
     50e:	9e e0       	ldi	r25, 0x0E	; 14
     510:	21 50       	subi	r18, 0x01	; 1
     512:	80 40       	sbci	r24, 0x00	; 0
     514:	90 40       	sbci	r25, 0x00	; 0
     516:	e1 f7       	brne	.-8      	; 0x510 <_Z8titititiv+0x54>
     518:	00 c0       	rjmp	.+0      	; 0x51a <_Z8titititiv+0x5e>
     51a:	00 00       	nop
	_delay_ms(300);
	controls.startBuzzer();
     51c:	88 e3       	ldi	r24, 0x38	; 56
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	92 d2       	rcall	.+1316   	; 0xa46 <_ZN8Controls11startBuzzerEv>
     522:	2f ef       	ldi	r18, 0xFF	; 255
     524:	81 ee       	ldi	r24, 0xE1	; 225
     526:	94 e0       	ldi	r25, 0x04	; 4
     528:	21 50       	subi	r18, 0x01	; 1
     52a:	80 40       	sbci	r24, 0x00	; 0
     52c:	90 40       	sbci	r25, 0x00	; 0
     52e:	e1 f7       	brne	.-8      	; 0x528 <_Z8titititiv+0x6c>
     530:	00 c0       	rjmp	.+0      	; 0x532 <_Z8titititiv+0x76>
     532:	00 00       	nop
	_delay_ms(100);
	controls.stopBuzzer();
     534:	88 e3       	ldi	r24, 0x38	; 56
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	88 d2       	rcall	.+1296   	; 0xa4a <_ZN8Controls10stopBuzzerEv>
     53a:	2f ef       	ldi	r18, 0xFF	; 255
     53c:	81 ee       	ldi	r24, 0xE1	; 225
     53e:	94 e0       	ldi	r25, 0x04	; 4
     540:	21 50       	subi	r18, 0x01	; 1
     542:	80 40       	sbci	r24, 0x00	; 0
     544:	90 40       	sbci	r25, 0x00	; 0
     546:	e1 f7       	brne	.-8      	; 0x540 <_Z8titititiv+0x84>
     548:	00 c0       	rjmp	.+0      	; 0x54a <_Z8titititiv+0x8e>
     54a:	00 00       	nop
	_delay_ms(100);
	controls.startBuzzer();
     54c:	88 e3       	ldi	r24, 0x38	; 56
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	7a d2       	rcall	.+1268   	; 0xa46 <_ZN8Controls11startBuzzerEv>
     552:	2f ef       	ldi	r18, 0xFF	; 255
     554:	81 ee       	ldi	r24, 0xE1	; 225
     556:	94 e0       	ldi	r25, 0x04	; 4
     558:	21 50       	subi	r18, 0x01	; 1
     55a:	80 40       	sbci	r24, 0x00	; 0
     55c:	90 40       	sbci	r25, 0x00	; 0
     55e:	e1 f7       	brne	.-8      	; 0x558 <_Z8titititiv+0x9c>
     560:	00 c0       	rjmp	.+0      	; 0x562 <_Z8titititiv+0xa6>
     562:	00 00       	nop
     564:	08 95       	ret

00000566 <_Z4titiv>:
	_delay_ms(100);
}

void titi(){
	controls.startBuzzer();
     566:	88 e3       	ldi	r24, 0x38	; 56
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	6d d2       	rcall	.+1242   	; 0xa46 <_ZN8Controls11startBuzzerEv>
     56c:	2f ef       	ldi	r18, 0xFF	; 255
     56e:	81 ee       	ldi	r24, 0xE1	; 225
     570:	94 e0       	ldi	r25, 0x04	; 4
     572:	21 50       	subi	r18, 0x01	; 1
     574:	80 40       	sbci	r24, 0x00	; 0
     576:	90 40       	sbci	r25, 0x00	; 0
     578:	e1 f7       	brne	.-8      	; 0x572 <_Z4titiv+0xc>
     57a:	00 c0       	rjmp	.+0      	; 0x57c <_Z4titiv+0x16>
     57c:	00 00       	nop
	_delay_ms(100);
	controls.stopBuzzer();
     57e:	88 e3       	ldi	r24, 0x38	; 56
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	63 d2       	rcall	.+1222   	; 0xa4a <_ZN8Controls10stopBuzzerEv>
     584:	2f ef       	ldi	r18, 0xFF	; 255
     586:	81 ee       	ldi	r24, 0xE1	; 225
     588:	94 e0       	ldi	r25, 0x04	; 4
     58a:	21 50       	subi	r18, 0x01	; 1
     58c:	80 40       	sbci	r24, 0x00	; 0
     58e:	90 40       	sbci	r25, 0x00	; 0
     590:	e1 f7       	brne	.-8      	; 0x58a <_Z4titiv+0x24>
     592:	00 c0       	rjmp	.+0      	; 0x594 <_Z4titiv+0x2e>
     594:	00 00       	nop
	_delay_ms(100);
	controls.startBuzzer();
     596:	88 e3       	ldi	r24, 0x38	; 56
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	55 d2       	rcall	.+1194   	; 0xa46 <_ZN8Controls11startBuzzerEv>
     59c:	2f ef       	ldi	r18, 0xFF	; 255
     59e:	81 ee       	ldi	r24, 0xE1	; 225
     5a0:	94 e0       	ldi	r25, 0x04	; 4
     5a2:	21 50       	subi	r18, 0x01	; 1
     5a4:	80 40       	sbci	r24, 0x00	; 0
     5a6:	90 40       	sbci	r25, 0x00	; 0
     5a8:	e1 f7       	brne	.-8      	; 0x5a2 <_Z4titiv+0x3c>
     5aa:	00 c0       	rjmp	.+0      	; 0x5ac <_Z4titiv+0x46>
     5ac:	00 00       	nop
	_delay_ms(100);
	controls.stopBuzzer();
     5ae:	88 e3       	ldi	r24, 0x38	; 56
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	4b d2       	rcall	.+1174   	; 0xa4a <_ZN8Controls10stopBuzzerEv>
     5b4:	2f ef       	ldi	r18, 0xFF	; 255
     5b6:	81 ee       	ldi	r24, 0xE1	; 225
     5b8:	94 e0       	ldi	r25, 0x04	; 4
     5ba:	21 50       	subi	r18, 0x01	; 1
     5bc:	80 40       	sbci	r24, 0x00	; 0
     5be:	90 40       	sbci	r25, 0x00	; 0
     5c0:	e1 f7       	brne	.-8      	; 0x5ba <_Z4titiv+0x54>
     5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <_Z4titiv+0x5e>
     5c4:	00 00       	nop
     5c6:	08 95       	ret

000005c8 <_Z5checkv>:
}


void check() {
	
	if(skin_temperature >= (set_temperature+0.2)) {
     5c8:	2d ec       	ldi	r18, 0xCD	; 205
     5ca:	3c ec       	ldi	r19, 0xCC	; 204
     5cc:	4c e4       	ldi	r20, 0x4C	; 76
     5ce:	5e e3       	ldi	r21, 0x3E	; 62
     5d0:	60 91 06 01 	lds	r22, 0x0106
     5d4:	70 91 07 01 	lds	r23, 0x0107
     5d8:	80 91 08 01 	lds	r24, 0x0108
     5dc:	90 91 09 01 	lds	r25, 0x0109
     5e0:	f6 d4       	rcall	.+2540   	; 0xfce <__addsf3>
     5e2:	20 91 28 01 	lds	r18, 0x0128
     5e6:	30 91 29 01 	lds	r19, 0x0129
     5ea:	40 91 2a 01 	lds	r20, 0x012A
     5ee:	50 91 2b 01 	lds	r21, 0x012B
     5f2:	51 d5       	rcall	.+2722   	; 0x1096 <__cmpsf2>
     5f4:	18 16       	cp	r1, r24
     5f6:	2c f1       	brlt	.+74     	; 0x642 <_Z5checkv+0x7a>
		if(!startMonitor) {
     5f8:	80 91 3e 01 	lds	r24, 0x013E
     5fc:	81 11       	cpse	r24, r1
     5fe:	12 c0       	rjmp	.+36     	; 0x624 <_Z5checkv+0x5c>
			//controls.startBuzzer();
			start_buzzer = true;	
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	80 93 37 01 	sts	0x0137, r24
		}	
		
		if(stop_buzzer && !startMonitor) {
     606:	80 91 0c 01 	lds	r24, 0x010C
     60a:	88 23       	and	r24, r24
     60c:	59 f0       	breq	.+22     	; 0x624 <_Z5checkv+0x5c>
			startMonitor = true;
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	80 93 3e 01 	sts	0x013E, r24
			second = 0;
     614:	10 92 3d 01 	sts	0x013D, r1
     618:	10 92 3c 01 	sts	0x013C, r1
			stop_buzzer = false;
     61c:	10 92 0c 01 	sts	0x010C, r1
			start_buzzer = false;
     620:	10 92 37 01 	sts	0x0137, r1
			//controls.stopBuzzer();
		}
		
		Led.led_do(TS_HIGH_LED, 1);
     624:	41 e0       	ldi	r20, 0x01	; 1
     626:	50 e0       	ldi	r21, 0x00	; 0
     628:	60 e0       	ldi	r22, 0x00	; 0
     62a:	70 e0       	ldi	r23, 0x00	; 0
     62c:	81 e1       	ldi	r24, 0x11	; 17
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	15 d2       	rcall	.+1066   	; 0xa5c <_ZN3led6led_doEii>
		Led.led_do(TS_HIGH_LED, 0);
		startMonitor = false;
		second = 0;
	}
	
	if(second >= 600) {	//timer prescaled to 200ms so 600 means 2 minutes.
     632:	80 91 3c 01 	lds	r24, 0x013C
     636:	90 91 3d 01 	lds	r25, 0x013D
     63a:	88 35       	cpi	r24, 0x58	; 88
     63c:	92 40       	sbci	r25, 0x02	; 2
     63e:	a4 f4       	brge	.+40     	; 0x668 <_Z5checkv+0xa0>
     640:	19 c0       	rjmp	.+50     	; 0x674 <_Z5checkv+0xac>
		}
		
		Led.led_do(TS_HIGH_LED, 1);
		//Led.led_do(TA_HIGH_LED, 1);
	} else {
		controls.stopBuzzer();
     642:	88 e3       	ldi	r24, 0x38	; 56
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	01 d2       	rcall	.+1026   	; 0xa4a <_ZN8Controls10stopBuzzerEv>
		start_buzzer = false;
     648:	10 92 37 01 	sts	0x0137, r1
		Led.led_do(TS_HIGH_LED, 0);
     64c:	40 e0       	ldi	r20, 0x00	; 0
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	81 e1       	ldi	r24, 0x11	; 17
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	01 d2       	rcall	.+1026   	; 0xa5c <_ZN3led6led_doEii>
		startMonitor = false;
     65a:	10 92 3e 01 	sts	0x013E, r1
		second = 0;
     65e:	10 92 3d 01 	sts	0x013D, r1
     662:	10 92 3c 01 	sts	0x013C, r1
     666:	06 c0       	rjmp	.+12     	; 0x674 <_Z5checkv+0xac>
	}
	
	if(second >= 600) {	//timer prescaled to 200ms so 600 means 2 minutes.
		//why this below line needed when if startMonitor = false, and skin temperature still set_temperature + 0.2 
		//controls.startBuzzer();
		startMonitor = false;
     668:	10 92 3e 01 	sts	0x013E, r1
		second = 0;
     66c:	10 92 3d 01 	sts	0x013D, r1
     670:	10 92 3c 01 	sts	0x013C, r1
	}
		
	if(air_temperature > 37) {
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	44 e1       	ldi	r20, 0x14	; 20
     67a:	52 e4       	ldi	r21, 0x42	; 66
     67c:	60 91 24 01 	lds	r22, 0x0124
     680:	70 91 25 01 	lds	r23, 0x0125
     684:	80 91 26 01 	lds	r24, 0x0126
     688:	90 91 27 01 	lds	r25, 0x0127
     68c:	53 d6       	rcall	.+3238   	; 0x1334 <__gesf2>
     68e:	18 16       	cp	r1, r24
     690:	44 f4       	brge	.+16     	; 0x6a2 <_Z5checkv+0xda>
		//controls.startBuzzer();
		//Led.led_do(TS_HIGH_LED, 1);
		Led.led_do(TA_HIGH_LED, 1);
     692:	41 e0       	ldi	r20, 0x01	; 1
     694:	50 e0       	ldi	r21, 0x00	; 0
     696:	61 e0       	ldi	r22, 0x01	; 1
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	81 e1       	ldi	r24, 0x11	; 17
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	de d1       	rcall	.+956    	; 0xa5c <_ZN3led6led_doEii>
     6a0:	07 c0       	rjmp	.+14     	; 0x6b0 <_Z5checkv+0xe8>
	} else{
		//controls.stopBuzzer();
		Led.led_do(TS_HIGH_LED, 0);
     6a2:	40 e0       	ldi	r20, 0x00	; 0
     6a4:	50 e0       	ldi	r21, 0x00	; 0
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	81 e1       	ldi	r24, 0x11	; 17
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	d6 d1       	rcall	.+940    	; 0xa5c <_ZN3led6led_doEii>
	} 
	
	//buzzer stop button
	if(bit_is_clear(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN) && !buzzer_stop_pressed ) {
     6b0:	34 99       	sbic	0x06, 4	; 6
     6b2:	73 c0       	rjmp	.+230    	; 0x79a <_Z5checkv+0x1d2>
     6b4:	80 91 0d 01 	lds	r24, 0x010D
     6b8:	81 11       	cpse	r24, r1
     6ba:	6f c0       	rjmp	.+222    	; 0x79a <_Z5checkv+0x1d2>
     6bc:	65 c0       	rjmp	.+202    	; 0x788 <_Z5checkv+0x1c0>
		stop_buzzer = true;
		buzzer_stop_pressed = true;
	}
	
	else if(bit_is_set(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN)) {
		buzzer_stop_pressed = false;
     6be:	10 92 0d 01 	sts	0x010D, r1
	}
	
	//set up button
	
	if(bit_is_clear(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN) && !set_up_pressed) {
     6c2:	33 99       	sbic	0x06, 3	; 6
     6c4:	6d c0       	rjmp	.+218    	; 0x7a0 <_Z5checkv+0x1d8>
     6c6:	80 91 10 01 	lds	r24, 0x0110
     6ca:	81 11       	cpse	r24, r1
     6cc:	69 c0       	rjmp	.+210    	; 0x7a0 <_Z5checkv+0x1d8>
     6ce:	6b c0       	rjmp	.+214    	; 0x7a6 <_Z5checkv+0x1de>
		
		if(button_change) {
			set_temperature_copy += 0.1; 
     6d0:	2d ec       	ldi	r18, 0xCD	; 205
     6d2:	3c ec       	ldi	r19, 0xCC	; 204
     6d4:	4c ec       	ldi	r20, 0xCC	; 204
     6d6:	5d e3       	ldi	r21, 0x3D	; 61
     6d8:	60 91 20 01 	lds	r22, 0x0120
     6dc:	70 91 21 01 	lds	r23, 0x0121
     6e0:	80 91 22 01 	lds	r24, 0x0122
     6e4:	90 91 23 01 	lds	r25, 0x0123
     6e8:	72 d4       	rcall	.+2276   	; 0xfce <__addsf3>
     6ea:	60 93 20 01 	sts	0x0120, r22
     6ee:	70 93 21 01 	sts	0x0121, r23
     6f2:	80 93 22 01 	sts	0x0122, r24
     6f6:	90 93 23 01 	sts	0x0123, r25
		}
		set_up_pressed = true;
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	80 93 10 01 	sts	0x0110, r24
     700:	02 c0       	rjmp	.+4      	; 0x706 <_Z5checkv+0x13e>
	}
	
	else if(bit_is_set(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN)) {
		set_up_pressed = false;
     702:	10 92 10 01 	sts	0x0110, r1
	}
	
	
	//set down button
	if(bit_is_clear(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN) && !set_down_pressed) {
     706:	4a 99       	sbic	0x09, 2	; 9
     708:	58 c0       	rjmp	.+176    	; 0x7ba <_Z5checkv+0x1f2>
     70a:	80 91 0e 01 	lds	r24, 0x010E
     70e:	81 11       	cpse	r24, r1
     710:	54 c0       	rjmp	.+168    	; 0x7ba <_Z5checkv+0x1f2>
     712:	4e c0       	rjmp	.+156    	; 0x7b0 <_Z5checkv+0x1e8>
		
		if(button_change) {
			set_temperature_copy -= 0.1;
     714:	2d ec       	ldi	r18, 0xCD	; 205
     716:	3c ec       	ldi	r19, 0xCC	; 204
     718:	4c ec       	ldi	r20, 0xCC	; 204
     71a:	5d e3       	ldi	r21, 0x3D	; 61
     71c:	60 91 20 01 	lds	r22, 0x0120
     720:	70 91 21 01 	lds	r23, 0x0121
     724:	80 91 22 01 	lds	r24, 0x0122
     728:	90 91 23 01 	lds	r25, 0x0123
     72c:	4f d4       	rcall	.+2206   	; 0xfcc <__subsf3>
     72e:	60 93 20 01 	sts	0x0120, r22
     732:	70 93 21 01 	sts	0x0121, r23
     736:	80 93 22 01 	sts	0x0122, r24
     73a:	90 93 23 01 	sts	0x0123, r25
		}
		
		set_down_pressed= true;
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	80 93 0e 01 	sts	0x010E, r24
     744:	02 c0       	rjmp	.+4      	; 0x74a <_Z5checkv+0x182>
	}
	
	else if(bit_is_set(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN)) {
		set_down_pressed = false;
     746:	10 92 0e 01 	sts	0x010E, r1
	}
	
	//set button
	if(bit_is_clear(SET_BUTTON_PORT, SET_BUTTON_PIN) && !set_pressed) {
     74a:	18 99       	sbic	0x03, 0	; 3
     74c:	42 c0       	rjmp	.+132    	; 0x7d2 <_Z5checkv+0x20a>
     74e:	80 91 0f 01 	lds	r24, 0x010F
     752:	81 11       	cpse	r24, r1
     754:	3e c0       	rjmp	.+124    	; 0x7d2 <_Z5checkv+0x20a>
     756:	34 c0       	rjmp	.+104    	; 0x7c0 <_Z5checkv+0x1f8>
			button_change = !button_change;
			if(!button_change) {
				set_temperature = set_temperature_copy;
     758:	80 91 20 01 	lds	r24, 0x0120
     75c:	90 91 21 01 	lds	r25, 0x0121
     760:	a0 91 22 01 	lds	r26, 0x0122
     764:	b0 91 23 01 	lds	r27, 0x0123
     768:	80 93 06 01 	sts	0x0106, r24
     76c:	90 93 07 01 	sts	0x0107, r25
     770:	a0 93 08 01 	sts	0x0108, r26
     774:	b0 93 09 01 	sts	0x0109, r27
				titi();
     778:	f6 de       	rcall	.-532    	; 0x566 <_Z4titiv>
			}
			
			set_pressed = true;
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	80 93 0f 01 	sts	0x010F, r24
     780:	08 95       	ret
		}
	
	else if(bit_is_set(SET_BUTTON_PORT, SET_BUTTON_PIN)) {
		set_pressed = false;
     782:	10 92 0f 01 	sts	0x010F, r1
     786:	08 95       	ret
	} 
	
	//buzzer stop button
	if(bit_is_clear(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN) && !buzzer_stop_pressed ) {
		
		controls.stopBuzzer();
     788:	88 e3       	ldi	r24, 0x38	; 56
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	5e d1       	rcall	.+700    	; 0xa4a <_ZN8Controls10stopBuzzerEv>
		stop_buzzer = true;
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	80 93 0c 01 	sts	0x010C, r24
		buzzer_stop_pressed = true;
     794:	80 93 0d 01 	sts	0x010D, r24
     798:	94 cf       	rjmp	.-216    	; 0x6c2 <_Z5checkv+0xfa>
	}
	
	else if(bit_is_set(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN)) {
     79a:	34 99       	sbic	0x06, 4	; 6
     79c:	90 cf       	rjmp	.-224    	; 0x6be <_Z5checkv+0xf6>
     79e:	91 cf       	rjmp	.-222    	; 0x6c2 <_Z5checkv+0xfa>
			set_temperature_copy += 0.1; 
		}
		set_up_pressed = true;
	}
	
	else if(bit_is_set(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN)) {
     7a0:	33 99       	sbic	0x06, 3	; 6
     7a2:	af cf       	rjmp	.-162    	; 0x702 <_Z5checkv+0x13a>
     7a4:	b0 cf       	rjmp	.-160    	; 0x706 <_Z5checkv+0x13e>
	
	//set up button
	
	if(bit_is_clear(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN) && !set_up_pressed) {
		
		if(button_change) {
     7a6:	80 91 0b 01 	lds	r24, 0x010B
     7aa:	81 11       	cpse	r24, r1
     7ac:	91 cf       	rjmp	.-222    	; 0x6d0 <_Z5checkv+0x108>
     7ae:	a5 cf       	rjmp	.-182    	; 0x6fa <_Z5checkv+0x132>
	
	
	//set down button
	if(bit_is_clear(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN) && !set_down_pressed) {
		
		if(button_change) {
     7b0:	80 91 0b 01 	lds	r24, 0x010B
     7b4:	81 11       	cpse	r24, r1
     7b6:	ae cf       	rjmp	.-164    	; 0x714 <_Z5checkv+0x14c>
     7b8:	c2 cf       	rjmp	.-124    	; 0x73e <_Z5checkv+0x176>
		}
		
		set_down_pressed= true;
	}
	
	else if(bit_is_set(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN)) {
     7ba:	4a 99       	sbic	0x09, 2	; 9
     7bc:	c4 cf       	rjmp	.-120    	; 0x746 <_Z5checkv+0x17e>
     7be:	c5 cf       	rjmp	.-118    	; 0x74a <_Z5checkv+0x182>
		set_down_pressed = false;
	}
	
	//set button
	if(bit_is_clear(SET_BUTTON_PORT, SET_BUTTON_PIN) && !set_pressed) {
			button_change = !button_change;
     7c0:	90 91 0b 01 	lds	r25, 0x010B
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	89 27       	eor	r24, r25
     7c8:	80 93 0b 01 	sts	0x010B, r24
			if(!button_change) {
     7cc:	81 11       	cpse	r24, r1
     7ce:	d5 cf       	rjmp	.-86     	; 0x77a <_Z5checkv+0x1b2>
     7d0:	c3 cf       	rjmp	.-122    	; 0x758 <_Z5checkv+0x190>
			}
			
			set_pressed = true;
		}
	
	else if(bit_is_set(SET_BUTTON_PORT, SET_BUTTON_PIN)) {
     7d2:	18 99       	sbic	0x03, 0	; 3
     7d4:	d6 cf       	rjmp	.-84     	; 0x782 <_Z5checkv+0x1ba>
     7d6:	08 95       	ret

000007d8 <main>:
uint32_t countpreheat = 0;


int main(void)
{	
	initUART0();
     7d8:	ed d3       	rcall	.+2010   	; 0xfb4 <_Z9initUART0v>
	init_devices();
     7da:	6f dc       	rcall	.-1826   	; 0xba <_Z12init_devicesv>
// 		}
// 		
// 	}
// 	//
	// ti ti ti ti
	titi();
     7dc:	c4 de       	rcall	.-632    	; 0x566 <_Z4titiv>

// 	controls.stopBuzzer();
	////////////////////
	
	//wait while preheat condition is meet.
	bool clear_display = false;
     7de:	f1 2c       	mov	r15, r1
	bool set_temp_display = false;
	
    	while(!preHeat){
 		  
   		 if(displayUpdate){
 			clear_display = !clear_display;
     7e0:	c1 e0       	ldi	r28, 0x01	; 1
	
	//wait while preheat condition is meet.
	bool clear_display = false;
	bool set_temp_display = false;
	
    	while(!preHeat){
     7e2:	61 c0       	rjmp	.+194    	; 0x8a6 <main+0xce>
 		  
   		 if(displayUpdate){
     7e4:	80 91 39 01 	lds	r24, 0x0139
     7e8:	88 23       	and	r24, r24
     7ea:	09 f4       	brne	.+2      	; 0x7ee <main+0x16>
     7ec:	5b c0       	rjmp	.+182    	; 0x8a4 <main+0xcc>
 			clear_display = !clear_display;
     7ee:	fc 26       	eor	r15, r28
 			
  			displayUpdate = false;
     7f0:	10 92 39 01 	sts	0x0139, r1
    		maxSkin.begin(1);
     7f4:	6c 2f       	mov	r22, r28
     7f6:	8c e2       	ldi	r24, 0x2C	; 44
     7f8:	91 e0       	ldi	r25, 0x01	; 1
     7fa:	3d d2       	rcall	.+1146   	; 0xc76 <_ZN17Adafruit_MAX318655beginEh>
    		skin_temperature = maxSkin.temperature(100.0,430.0);
     7fc:	00 e0       	ldi	r16, 0x00	; 0
     7fe:	10 e0       	ldi	r17, 0x00	; 0
     800:	27 ed       	ldi	r18, 0xD7	; 215
     802:	33 e4       	ldi	r19, 0x43	; 67
     804:	40 e0       	ldi	r20, 0x00	; 0
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	68 ec       	ldi	r22, 0xC8	; 200
     80a:	72 e4       	ldi	r23, 0x42	; 66
     80c:	8c e2       	ldi	r24, 0x2C	; 44
     80e:	91 e0       	ldi	r25, 0x01	; 1
     810:	71 d2       	rcall	.+1250   	; 0xcf4 <_ZN17Adafruit_MAX3186511temperatureEff>
     812:	60 93 28 01 	sts	0x0128, r22
     816:	70 93 29 01 	sts	0x0129, r23
     81a:	80 93 2a 01 	sts	0x012A, r24
     81e:	90 93 2b 01 	sts	0x012B, r25
      		max1.MAX7219_init(REINITIALIZE);
     822:	6c 2f       	mov	r22, r28
     824:	88 e1       	ldi	r24, 0x18	; 24
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	66 d3       	rcall	.+1740   	; 0xef6 <_ZN7max721912MAX7219_initEh>
      		max2.MAX7219_init(REINITIALIZE);
     82a:	6c 2f       	mov	r22, r28
     82c:	82 e1       	ldi	r24, 0x12	; 18
     82e:	91 e0       	ldi	r25, 0x01	; 1
     830:	62 d3       	rcall	.+1732   	; 0xef6 <_ZN7max721912MAX7219_initEh>
  			//these above init should be done to initialize spi 
     			//sendToDisplay(air_temperature,skin_temperature,set_temperature);
  			displayPreHeat();
     832:	16 de       	rcall	.-980    	; 0x460 <_Z14displayPreHeatv>
 			 if(clear_display) {
     834:	ff 20       	and	r15, r15
     836:	21 f0       	breq	.+8      	; 0x840 <main+0x68>
 				 max2.MAX7219_clearDisplay();
     838:	82 e1       	ldi	r24, 0x12	; 18
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	7b d3       	rcall	.+1782   	; 0xf34 <_ZN7max721920MAX7219_clearDisplayEv>
     83e:	09 c0       	rjmp	.+18     	; 0x852 <main+0x7a>
 				 //max1.MAX7219_clearDisplay();
 			 } else {
   				sendToDisplayBelow(skin_temperature);
     840:	60 91 28 01 	lds	r22, 0x0128
     844:	70 91 29 01 	lds	r23, 0x0129
     848:	80 91 2a 01 	lds	r24, 0x012A
     84c:	90 91 2b 01 	lds	r25, 0x012B
     850:	98 dd       	rcall	.-1232   	; 0x382 <_Z18sendToDisplayBelowf>
 			 }
 			 if(skin_temperature > pre_heat_max_temp) {
     852:	80 90 28 01 	lds	r8, 0x0128
     856:	90 90 29 01 	lds	r9, 0x0129
     85a:	a0 90 2a 01 	lds	r10, 0x012A
     85e:	b0 90 2b 01 	lds	r11, 0x012B
     862:	40 90 02 01 	lds	r4, 0x0102
     866:	50 90 03 01 	lds	r5, 0x0103
     86a:	60 90 04 01 	lds	r6, 0x0104
     86e:	70 90 05 01 	lds	r7, 0x0105
     872:	a3 01       	movw	r20, r6
     874:	92 01       	movw	r18, r4
     876:	c5 01       	movw	r24, r10
     878:	b4 01       	movw	r22, r8
     87a:	5c d5       	rcall	.+2744   	; 0x1334 <__gesf2>
     87c:	18 16       	cp	r1, r24
     87e:	3c f4       	brge	.+14     	; 0x88e <main+0xb6>
  				controls.stopHeater();
     880:	88 e3       	ldi	r24, 0x38	; 56
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	de d0       	rcall	.+444    	; 0xa42 <_ZN8Controls10stopHeaterEv>
  				preHeat = true;
     886:	c0 93 0a 01 	sts	0x010A, r28
  				titititi();
     88a:	18 de       	rcall	.-976    	; 0x4bc <_Z8titititiv>
     88c:	0c c0       	rjmp	.+24     	; 0x8a6 <main+0xce>
  				}
  			else if(skin_temperature < pre_heat_max_temp) {
     88e:	a3 01       	movw	r20, r6
     890:	92 01       	movw	r18, r4
     892:	c5 01       	movw	r24, r10
     894:	b4 01       	movw	r22, r8
     896:	ff d3       	rcall	.+2046   	; 0x1096 <__cmpsf2>
     898:	88 23       	and	r24, r24
     89a:	2c f4       	brge	.+10     	; 0x8a6 <main+0xce>
  				controls.startHeater();
     89c:	88 e3       	ldi	r24, 0x38	; 56
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	ce d0       	rcall	.+412    	; 0xa3e <_ZN8Controls11startHeaterEv>
     8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <main+0xce>
  				}
   		 }
   		  
   		  else{
  			   asm volatile ("nop");
     8a4:	00 00       	nop
	
	//wait while preheat condition is meet.
	bool clear_display = false;
	bool set_temp_display = false;
	
    	while(!preHeat){
     8a6:	80 91 0a 01 	lds	r24, 0x010A
     8aa:	88 23       	and	r24, r24
     8ac:	09 f4       	brne	.+2      	; 0x8b0 <main+0xd8>
     8ae:	9a cf       	rjmp	.-204    	; 0x7e4 <main+0xc>
     8b0:	c0 e0       	ldi	r28, 0x00	; 0
    	}
	   
	while(1)
	
	{
 		check();
     8b2:	8a de       	rcall	.-748    	; 0x5c8 <_Z5checkv>
 		if(displayUpdate) {
     8b4:	80 91 39 01 	lds	r24, 0x0139
     8b8:	88 23       	and	r24, r24
     8ba:	d9 f3       	breq	.-10     	; 0x8b2 <main+0xda>
 			//spi for max7219 for display
 			max1.MAX7219_init(REINITIALIZE); // these are init
     8bc:	61 e0       	ldi	r22, 0x01	; 1
     8be:	88 e1       	ldi	r24, 0x18	; 24
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	19 d3       	rcall	.+1586   	; 0xef6 <_ZN7max721912MAX7219_initEh>
 			max2.MAX7219_init(REINITIALIZE);
     8c4:	61 e0       	ldi	r22, 0x01	; 1
     8c6:	82 e1       	ldi	r24, 0x12	; 18
     8c8:	91 e0       	ldi	r25, 0x01	; 1
     8ca:	15 d3       	rcall	.+1578   	; 0xef6 <_ZN7max721912MAX7219_initEh>
			 
			 //buzzer karaing
			 if(start_buzzer) {
     8cc:	80 91 37 01 	lds	r24, 0x0137
     8d0:	88 23       	and	r24, r24
     8d2:	79 f0       	breq	.+30     	; 0x8f2 <main+0x11a>
				 buzzer_timer = !buzzer_timer;
     8d4:	90 91 36 01 	lds	r25, 0x0136
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	89 27       	eor	r24, r25
     8dc:	80 93 36 01 	sts	0x0136, r24
				 if(buzzer_timer) {
     8e0:	88 23       	and	r24, r24
     8e2:	21 f0       	breq	.+8      	; 0x8ec <main+0x114>
					 controls.startBuzzer();
     8e4:	88 e3       	ldi	r24, 0x38	; 56
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	ae d0       	rcall	.+348    	; 0xa46 <_ZN8Controls11startBuzzerEv>
     8ea:	03 c0       	rjmp	.+6      	; 0x8f2 <main+0x11a>
				 } else {
					 controls.stopBuzzer();
     8ec:	88 e3       	ldi	r24, 0x38	; 56
     8ee:	91 e0       	ldi	r25, 0x01	; 1
     8f0:	ac d0       	rcall	.+344    	; 0xa4a <_ZN8Controls10stopBuzzerEv>
				 }
			 }
			 // sending this
			 if(button_change){
     8f2:	80 91 0b 01 	lds	r24, 0x010B
     8f6:	88 23       	and	r24, r24
     8f8:	91 f0       	breq	.+36     	; 0x91e <__stack+0x1f>
				 set_temp_display = !set_temp_display;
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	c8 27       	eor	r28, r24
				 if(set_temp_display) {
     8fe:	51 f0       	breq	.+20     	; 0x914 <__stack+0x15>
					sendToDisplayBelow(set_temperature_copy);
     900:	60 91 20 01 	lds	r22, 0x0120
     904:	70 91 21 01 	lds	r23, 0x0121
     908:	80 91 22 01 	lds	r24, 0x0122
     90c:	90 91 23 01 	lds	r25, 0x0123
     910:	38 dd       	rcall	.-1424   	; 0x382 <_Z18sendToDisplayBelowf>
     912:	03 c0       	rjmp	.+6      	; 0x91a <__stack+0x1b>
				 } else {
					max2.MAX7219_clearDisplay(); 
     914:	82 e1       	ldi	r24, 0x12	; 18
     916:	91 e0       	ldi	r25, 0x01	; 1
     918:	0d d3       	rcall	.+1562   	; 0xf34 <_ZN7max721920MAX7219_clearDisplayEv>
				 }
				 displaySetTemperature();
     91a:	74 dd       	rcall	.-1304   	; 0x404 <_Z21displaySetTemperaturev>
     91c:	19 c0       	rjmp	.+50     	; 0x950 <__stack+0x51>
			 }
			 
			 else{
				 sendToDisplay(air_temperature, skin_temperature, set_temperature);
     91e:	e0 90 06 01 	lds	r14, 0x0106
     922:	f0 90 07 01 	lds	r15, 0x0107
     926:	00 91 08 01 	lds	r16, 0x0108
     92a:	10 91 09 01 	lds	r17, 0x0109
     92e:	20 91 28 01 	lds	r18, 0x0128
     932:	30 91 29 01 	lds	r19, 0x0129
     936:	40 91 2a 01 	lds	r20, 0x012A
     93a:	50 91 2b 01 	lds	r21, 0x012B
     93e:	60 91 24 01 	lds	r22, 0x0124
     942:	70 91 25 01 	lds	r23, 0x0125
     946:	80 91 26 01 	lds	r24, 0x0126
     94a:	90 91 27 01 	lds	r25, 0x0127
     94e:	59 dc       	rcall	.-1870   	; 0x202 <_Z13sendToDisplayfff>
			 }
			 	
 			//spi for temperature pt100
 			maxAir.begin(0); //these are init 
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	81 e3       	ldi	r24, 0x31	; 49
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	8f d1       	rcall	.+798    	; 0xc76 <_ZN17Adafruit_MAX318655beginEh>
 			maxSkin.begin(1);
     958:	61 e0       	ldi	r22, 0x01	; 1
     95a:	8c e2       	ldi	r24, 0x2C	; 44
     95c:	91 e0       	ldi	r25, 0x01	; 1
     95e:	8b d1       	rcall	.+790    	; 0xc76 <_ZN17Adafruit_MAX318655beginEh>
 			skin_temperature = maxSkin.temperature(100.0, 430.0);
     960:	00 e0       	ldi	r16, 0x00	; 0
     962:	10 e0       	ldi	r17, 0x00	; 0
     964:	27 ed       	ldi	r18, 0xD7	; 215
     966:	33 e4       	ldi	r19, 0x43	; 67
     968:	40 e0       	ldi	r20, 0x00	; 0
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	68 ec       	ldi	r22, 0xC8	; 200
     96e:	72 e4       	ldi	r23, 0x42	; 66
     970:	8c e2       	ldi	r24, 0x2C	; 44
     972:	91 e0       	ldi	r25, 0x01	; 1
     974:	bf d1       	rcall	.+894    	; 0xcf4 <_ZN17Adafruit_MAX3186511temperatureEff>
     976:	60 93 28 01 	sts	0x0128, r22
     97a:	70 93 29 01 	sts	0x0129, r23
     97e:	80 93 2a 01 	sts	0x012A, r24
     982:	90 93 2b 01 	sts	0x012B, r25
			air_temperature = maxAir.temperature(100.0, 430.0);
     986:	00 e0       	ldi	r16, 0x00	; 0
     988:	10 e0       	ldi	r17, 0x00	; 0
     98a:	27 ed       	ldi	r18, 0xD7	; 215
     98c:	33 e4       	ldi	r19, 0x43	; 67
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	68 ec       	ldi	r22, 0xC8	; 200
     994:	72 e4       	ldi	r23, 0x42	; 66
     996:	81 e3       	ldi	r24, 0x31	; 49
     998:	91 e0       	ldi	r25, 0x01	; 1
     99a:	ac d1       	rcall	.+856    	; 0xcf4 <_ZN17Adafruit_MAX3186511temperatureEff>
     99c:	60 93 24 01 	sts	0x0124, r22
     9a0:	70 93 25 01 	sts	0x0125, r23
     9a4:	80 93 26 01 	sts	0x0126, r24
     9a8:	90 93 27 01 	sts	0x0127, r25
			 
				 if(skin_temperature >= (set_temperature-0.1)) {
     9ac:	80 90 06 01 	lds	r8, 0x0106
     9b0:	90 90 07 01 	lds	r9, 0x0107
     9b4:	a0 90 08 01 	lds	r10, 0x0108
     9b8:	b0 90 09 01 	lds	r11, 0x0109
     9bc:	c0 90 28 01 	lds	r12, 0x0128
     9c0:	d0 90 29 01 	lds	r13, 0x0129
     9c4:	e0 90 2a 01 	lds	r14, 0x012A
     9c8:	f0 90 2b 01 	lds	r15, 0x012B
     9cc:	2d ec       	ldi	r18, 0xCD	; 205
     9ce:	3c ec       	ldi	r19, 0xCC	; 204
     9d0:	4c ec       	ldi	r20, 0xCC	; 204
     9d2:	5d e3       	ldi	r21, 0x3D	; 61
     9d4:	c5 01       	movw	r24, r10
     9d6:	b4 01       	movw	r22, r8
     9d8:	f9 d2       	rcall	.+1522   	; 0xfcc <__subsf3>
     9da:	a7 01       	movw	r20, r14
     9dc:	96 01       	movw	r18, r12
     9de:	5b d3       	rcall	.+1718   	; 0x1096 <__cmpsf2>
     9e0:	18 16       	cp	r1, r24
     9e2:	24 f0       	brlt	.+8      	; 0x9ec <__stack+0xed>
					 controls.stopHeater();
     9e4:	88 e3       	ldi	r24, 0x38	; 56
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	2c d0       	rcall	.+88     	; 0xa42 <_ZN8Controls10stopHeaterEv>
     9ea:	11 c0       	rjmp	.+34     	; 0xa0e <__stack+0x10f>
					 }else if(skin_temperature <= (set_temperature - 0.2)) {
     9ec:	2d ec       	ldi	r18, 0xCD	; 205
     9ee:	3c ec       	ldi	r19, 0xCC	; 204
     9f0:	4c e4       	ldi	r20, 0x4C	; 76
     9f2:	5e e3       	ldi	r21, 0x3E	; 62
     9f4:	c5 01       	movw	r24, r10
     9f6:	b4 01       	movw	r22, r8
     9f8:	e9 d2       	rcall	.+1490   	; 0xfcc <__subsf3>
     9fa:	9b 01       	movw	r18, r22
     9fc:	ac 01       	movw	r20, r24
     9fe:	c7 01       	movw	r24, r14
     a00:	b6 01       	movw	r22, r12
     a02:	49 d3       	rcall	.+1682   	; 0x1096 <__cmpsf2>
     a04:	18 16       	cp	r1, r24
     a06:	1c f0       	brlt	.+6      	; 0xa0e <__stack+0x10f>
					 controls.startHeater();
     a08:	88 e3       	ldi	r24, 0x38	; 56
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	18 d0       	rcall	.+48     	; 0xa3e <_ZN8Controls11startHeaterEv>
				 }
 			                                                                                                                                                                                                                               
 			displayUpdate = false;
     a0e:	10 92 39 01 	sts	0x0139, r1
     a12:	4f cf       	rjmp	.-354    	; 0x8b2 <main+0xda>

00000a14 <_GLOBAL__sub_I_startMonitor>:
Adafruit_MAX31865 maxSkin;

float skin_temperature = 0.0;
float air_temperature = 0.0;
float set_temperature = 30.5;
float set_temperature_copy = set_temperature;
     a14:	80 91 06 01 	lds	r24, 0x0106
     a18:	90 91 07 01 	lds	r25, 0x0107
     a1c:	a0 91 08 01 	lds	r26, 0x0108
     a20:	b0 91 09 01 	lds	r27, 0x0109
     a24:	80 93 20 01 	sts	0x0120, r24
     a28:	90 93 21 01 	sts	0x0121, r25
     a2c:	a0 93 22 01 	sts	0x0122, r26
     a30:	b0 93 23 01 	sts	0x0123, r27
     a34:	08 95       	ret

00000a36 <_ZN8Controls12initControlsEv>:

void Controls::startHeater() {
	HEATER_PORT |= (1 << HEATER_PIN);
}

void Controls::stopFan() {
     a36:	53 9a       	sbi	0x0a, 3	; 10
     a38:	3d 9a       	sbi	0x07, 5	; 7
     a3a:	5b 98       	cbi	0x0b, 3	; 11
     a3c:	08 95       	ret

00000a3e <_ZN8Controls11startHeaterEv>:
     a3e:	5b 9a       	sbi	0x0b, 3	; 11
     a40:	08 95       	ret

00000a42 <_ZN8Controls10stopHeaterEv>:
	//FAN_PORT &=~ (1 << FAN_PIN);
	//PORTB &=~ ((1 << PINB7) | (1 << PINB4));
}

void Controls::stopHeater() {
	HEATER_PORT &=~ (1 << HEATER_PIN);
     a42:	5b 98       	cbi	0x0b, 3	; 11
     a44:	08 95       	ret

00000a46 <_ZN8Controls11startBuzzerEv>:
}

void Controls::startBuzzer() {
	BUZZER_PORT |= (1 << BUZZER_PIN);
     a46:	45 9a       	sbi	0x08, 5	; 8
     a48:	08 95       	ret

00000a4a <_ZN8Controls10stopBuzzerEv>:
}

void Controls::stopBuzzer() {
	BUZZER_PORT &=~ (1 << BUZZER_PIN);
     a4a:	45 98       	cbi	0x08, 5	; 8
     a4c:	08 95       	ret

00000a4e <_ZN3led8led_initEv>:
#include <avr/io.h>

#define DDR(x) (*(&x - 1))      /* address of data direction register of port x */

void led::led_init() {
	DDR(TS_HIGH_PORT) |= (1 << TS_HIGH_PIN);
     a4e:	56 9a       	sbi	0x0a, 6	; 10
	DDR(TA_HIGH_PORT) |= (1 << TA_HIGH_PIN);
     a50:	50 9a       	sbi	0x0a, 0	; 10
	DDR(SET_TEMP_PORT) |= (1 << SET_TEMP_PIN);
     a52:	51 9a       	sbi	0x0a, 1	; 10
	DDR(SENSOR_FAIL_PORT) |= (1 << SENSOR_FAIL_PIN);
     a54:	51 9a       	sbi	0x0a, 1	; 10
	DDR(HEATER_FAIL_PORT) |= (1 << HEATER_FAIL_PIN);
     a56:	57 9a       	sbi	0x0a, 7	; 10
	DDR(POWER_PORT) |= (1 << POWER_PIN);
     a58:	50 9a       	sbi	0x0a, 0	; 10
     a5a:	08 95       	ret

00000a5c <_ZN3led6led_doEii>:
	
}


void led::led_do(int led_num, int state) {
	switch(led_num) {
     a5c:	62 30       	cpi	r22, 0x02	; 2
     a5e:	71 05       	cpc	r23, r1
     a60:	41 f1       	breq	.+80     	; 0xab2 <_ZN3led6led_doEii+0x56>
     a62:	3c f4       	brge	.+14     	; 0xa72 <_ZN3led6led_doEii+0x16>
     a64:	61 15       	cp	r22, r1
     a66:	71 05       	cpc	r23, r1
     a68:	61 f0       	breq	.+24     	; 0xa82 <_ZN3led6led_doEii+0x26>
     a6a:	61 30       	cpi	r22, 0x01	; 1
     a6c:	71 05       	cpc	r23, r1
     a6e:	79 f0       	breq	.+30     	; 0xa8e <_ZN3led6led_doEii+0x32>
     a70:	08 95       	ret
     a72:	64 30       	cpi	r22, 0x04	; 4
     a74:	71 05       	cpc	r23, r1
     a76:	b9 f0       	breq	.+46     	; 0xaa6 <_ZN3led6led_doEii+0x4a>
     a78:	14 f1       	brlt	.+68     	; 0xabe <_ZN3led6led_doEii+0x62>
     a7a:	65 30       	cpi	r22, 0x05	; 5
     a7c:	71 05       	cpc	r23, r1
     a7e:	69 f0       	breq	.+26     	; 0xa9a <_ZN3led6led_doEii+0x3e>
     a80:	08 95       	ret
		case TS_HIGH_LED:
		REGISTER_LED(TS_HIGH_PORT, TS_HIGH_PIN, state);
     a82:	45 2b       	or	r20, r21
     a84:	11 f0       	breq	.+4      	; 0xa8a <_ZN3led6led_doEii+0x2e>
     a86:	5e 9a       	sbi	0x0b, 6	; 11
     a88:	08 95       	ret
     a8a:	5e 98       	cbi	0x0b, 6	; 11
     a8c:	08 95       	ret
		break;
	
		case TA_HIGH_LED:
		REGISTER_LED(TA_HIGH_PORT, TA_HIGH_PIN, state);
     a8e:	45 2b       	or	r20, r21
     a90:	11 f0       	breq	.+4      	; 0xa96 <_ZN3led6led_doEii+0x3a>
     a92:	58 9a       	sbi	0x0b, 0	; 11
     a94:	08 95       	ret
     a96:	58 98       	cbi	0x0b, 0	; 11
     a98:	08 95       	ret
		break;
		
		case SENSOR_FAIL_LED:
		REGISTER_LED(SENSOR_FAIL_PORT, SENSOR_FAIL_PIN, state);
     a9a:	45 2b       	or	r20, r21
     a9c:	11 f0       	breq	.+4      	; 0xaa2 <_ZN3led6led_doEii+0x46>
     a9e:	59 9a       	sbi	0x0b, 1	; 11
     aa0:	08 95       	ret
     aa2:	59 98       	cbi	0x0b, 1	; 11
     aa4:	08 95       	ret
		break;
		
		case HEATER_FAIL_LED:
		REGISTER_LED(HEATER_FAIL_PORT, HEATER_FAIL_PIN, state);
     aa6:	45 2b       	or	r20, r21
     aa8:	11 f0       	breq	.+4      	; 0xaae <_ZN3led6led_doEii+0x52>
     aaa:	5f 9a       	sbi	0x0b, 7	; 11
     aac:	08 95       	ret
     aae:	5f 98       	cbi	0x0b, 7	; 11
     ab0:	08 95       	ret
		break;
		
		case SET_TEMP_LED:
		REGISTER_LED(SET_TEMP_PORT, SET_TEMP_PIN, state);
     ab2:	45 2b       	or	r20, r21
     ab4:	11 f0       	breq	.+4      	; 0xaba <_ZN3led6led_doEii+0x5e>
     ab6:	59 9a       	sbi	0x0b, 1	; 11
     ab8:	08 95       	ret
     aba:	59 98       	cbi	0x0b, 1	; 11
     abc:	08 95       	ret
		break;
		
		case POWER_LED:
		REGISTER_LED(POWER_PORT, POWER_PIN, state);
     abe:	45 2b       	or	r20, r21
     ac0:	11 f0       	breq	.+4      	; 0xac6 <_ZN3led6led_doEii+0x6a>
     ac2:	58 9a       	sbi	0x0b, 0	; 11
     ac4:	08 95       	ret
     ac6:	58 98       	cbi	0x0b, 0	; 11
     ac8:	08 95       	ret

00000aca <_ZN17Adafruit_MAX318657spixferEh>:
}


uint8_t Adafruit_MAX31865::readFault(void) {
	return readRegister8(MAX31856_FAULTSTAT_REG);
}
     aca:	6e bd       	out	0x2e, r22	; 46
     acc:	0d b4       	in	r0, 0x2d	; 45
     ace:	07 fe       	sbrs	r0, 7
     ad0:	fd cf       	rjmp	.-6      	; 0xacc <_ZN17Adafruit_MAX318657spixferEh+0x2>
     ad2:	8e b5       	in	r24, 0x2e	; 46
     ad4:	08 95       	ret

00000ad6 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>:
     ad6:	ef 92       	push	r14
     ad8:	ff 92       	push	r15
     ada:	0f 93       	push	r16
     adc:	1f 93       	push	r17
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	7c 01       	movw	r14, r24
     ae4:	ea 01       	movw	r28, r20
     ae6:	12 2f       	mov	r17, r18
     ae8:	fc 01       	movw	r30, r24
     aea:	80 81       	ld	r24, Z
     aec:	88 23       	and	r24, r24
     aee:	19 f0       	breq	.+6      	; 0xaf6 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x20>
     af0:	81 30       	cpi	r24, 0x01	; 1
     af2:	21 f0       	breq	.+8      	; 0xafc <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x26>
     af4:	05 c0       	rjmp	.+10     	; 0xb00 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x2a>
     af6:	29 98       	cbi	0x05, 1	; 5
     af8:	2a 9a       	sbi	0x05, 2	; 5
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x2a>
     afc:	2a 98       	cbi	0x05, 2	; 5
     afe:	29 9a       	sbi	0x05, 1	; 5
     b00:	6f 77       	andi	r22, 0x7F	; 127
     b02:	c7 01       	movw	r24, r14
     b04:	e2 df       	rcall	.-60     	; 0xaca <_ZN17Adafruit_MAX318657spixferEh>
     b06:	0f ef       	ldi	r16, 0xFF	; 255
     b08:	01 0f       	add	r16, r17
     b0a:	11 23       	and	r17, r17
     b0c:	61 f0       	breq	.+24     	; 0xb26 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x50>
     b0e:	10 e0       	ldi	r17, 0x00	; 0
     b10:	0f 5f       	subi	r16, 0xFF	; 255
     b12:	1f 4f       	sbci	r17, 0xFF	; 255
     b14:	0c 0f       	add	r16, r28
     b16:	1d 1f       	adc	r17, r29
     b18:	6f ef       	ldi	r22, 0xFF	; 255
     b1a:	c7 01       	movw	r24, r14
     b1c:	d6 df       	rcall	.-84     	; 0xaca <_ZN17Adafruit_MAX318657spixferEh>
     b1e:	89 93       	st	Y+, r24
     b20:	c0 17       	cp	r28, r16
     b22:	d1 07       	cpc	r29, r17
     b24:	c9 f7       	brne	.-14     	; 0xb18 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x42>
     b26:	f7 01       	movw	r30, r14
     b28:	80 81       	ld	r24, Z
     b2a:	88 23       	and	r24, r24
     b2c:	19 f0       	breq	.+6      	; 0xb34 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x5e>
     b2e:	81 30       	cpi	r24, 0x01	; 1
     b30:	19 f0       	breq	.+6      	; 0xb38 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x62>
     b32:	03 c0       	rjmp	.+6      	; 0xb3a <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x64>
     b34:	29 9a       	sbi	0x05, 1	; 5
     b36:	01 c0       	rjmp	.+2      	; 0xb3a <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x64>
     b38:	2a 9a       	sbi	0x05, 2	; 5
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	0f 91       	pop	r16
     b42:	ff 90       	pop	r15
     b44:	ef 90       	pop	r14
     b46:	08 95       	ret

00000b48 <_ZN17Adafruit_MAX3186513readRegister8Eh>:
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	1f 92       	push	r1
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	19 82       	std	Y+1, r1	; 0x01
     b54:	21 e0       	ldi	r18, 0x01	; 1
     b56:	ae 01       	movw	r20, r28
     b58:	4f 5f       	subi	r20, 0xFF	; 255
     b5a:	5f 4f       	sbci	r21, 0xFF	; 255
     b5c:	bc df       	rcall	.-136    	; 0xad6 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	0f 90       	pop	r0
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	08 95       	ret

00000b68 <_ZN17Adafruit_MAX3186514readRegister16Eh>:
	readRegisterN(addr, &ret, 1);
	
	return ret;
}

uint16_t Adafruit_MAX31865::readRegister16(uint8_t addr) {
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
     b6c:	00 d0       	rcall	.+0      	; 0xb6e <_ZN17Adafruit_MAX3186514readRegister16Eh+0x6>
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
uint8_t buffer[2] = {0, 0};
     b72:	19 82       	std	Y+1, r1	; 0x01
     b74:	1a 82       	std	Y+2, r1	; 0x02
readRegisterN(addr, buffer, 2);
     b76:	22 e0       	ldi	r18, 0x02	; 2
     b78:	ae 01       	movw	r20, r28
     b7a:	4f 5f       	subi	r20, 0xFF	; 255
     b7c:	5f 4f       	sbci	r21, 0xFF	; 255
     b7e:	ab df       	rcall	.-170    	; 0xad6 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>

uint16_t ret = buffer[0];
     b80:	89 81       	ldd	r24, Y+1	; 0x01
     b82:	90 e0       	ldi	r25, 0x00	; 0
ret <<= 8;
     b84:	98 2f       	mov	r25, r24
     b86:	88 27       	eor	r24, r24
ret |=  buffer[1];
     b88:	2a 81       	ldd	r18, Y+2	; 0x02

return ret;
}
     b8a:	82 2b       	or	r24, r18
     b8c:	0f 90       	pop	r0
     b8e:	0f 90       	pop	r0
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	08 95       	ret

00000b96 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>:

 
}


void Adafruit_MAX31865::writeRegister8(uint8_t addr, uint8_t data) {
     b96:	1f 93       	push	r17
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	ec 01       	movw	r28, r24
     b9e:	14 2f       	mov	r17, r20
 
  switch(choose) {
     ba0:	88 81       	ld	r24, Y
     ba2:	88 23       	and	r24, r24
     ba4:	19 f0       	breq	.+6      	; 0xbac <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x16>
     ba6:	81 30       	cpi	r24, 0x01	; 1
     ba8:	21 f0       	breq	.+8      	; 0xbb2 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x1c>
     baa:	05 c0       	rjmp	.+10     	; 0xbb6 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x20>
	  case 0:
		TEMP_I_PORT &=~ (1 << PINB1);
     bac:	29 98       	cbi	0x05, 1	; 5
		TEMP_II_PORT |= (1 << PINB2);
     bae:	2a 9a       	sbi	0x05, 2	; 5
		break;
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x20>
	  case 1:
		TEMP_II_PORT &=~ (1 << PINB2);
     bb2:	2a 98       	cbi	0x05, 2	; 5
		TEMP_I_PORT |= (1 << PINB1);
     bb4:	29 9a       	sbi	0x05, 1	; 5
		break;
  }
  spixfer(addr | 0x80);   // make sure top bit is set
     bb6:	60 68       	ori	r22, 0x80	; 128
     bb8:	ce 01       	movw	r24, r28
     bba:	87 df       	rcall	.-242    	; 0xaca <_ZN17Adafruit_MAX318657spixferEh>
  spixfer(data);
     bbc:	61 2f       	mov	r22, r17
     bbe:	ce 01       	movw	r24, r28
     bc0:	84 df       	rcall	.-248    	; 0xaca <_ZN17Adafruit_MAX318657spixferEh>

  //Serial.print("$"); Serial.print(addr, HEX); Serial.print(" = 0x"); Serial.println(data, HEX);

switch(choose) {
     bc2:	88 81       	ld	r24, Y
     bc4:	88 23       	and	r24, r24
     bc6:	19 f0       	breq	.+6      	; 0xbce <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x38>
     bc8:	81 30       	cpi	r24, 0x01	; 1
     bca:	19 f0       	breq	.+6      	; 0xbd2 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x3c>
     bcc:	03 c0       	rjmp	.+6      	; 0xbd4 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x3e>
   case 0:
	TEMP_I_PORT |= (1 << PINB1);
     bce:	29 9a       	sbi	0x05, 1	; 5
	break;
     bd0:	01 c0       	rjmp	.+2      	; 0xbd4 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x3e>
  case 1:
	TEMP_II_PORT |= (1 << PINB2);
     bd2:	2a 9a       	sbi	0x05, 2	; 5
	break;
}
}
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	08 95       	ret

00000bdc <_ZN17Adafruit_MAX3186510clearFaultEv>:

uint8_t Adafruit_MAX31865::readFault(void) {
	return readRegister8(MAX31856_FAULTSTAT_REG);
}

void Adafruit_MAX31865::clearFault(void) {
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	ec 01       	movw	r28, r24
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	b1 df       	rcall	.-158    	; 0xb48 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	t &= ~0x2C;
     be6:	83 7d       	andi	r24, 0xD3	; 211
	t |= MAX31856_CONFIG_FAULTSTAT;
     be8:	48 2f       	mov	r20, r24
     bea:	42 60       	ori	r20, 0x02	; 2
	writeRegister8(MAX31856_CONFIG_REG, t);
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	ce 01       	movw	r24, r28
     bf0:	d2 df       	rcall	.-92     	; 0xb96 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	08 95       	ret

00000bf8 <_ZN17Adafruit_MAX3186510enableBiasEb>:

void Adafruit_MAX31865::enableBias(bool b) {
     bf8:	1f 93       	push	r17
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	ec 01       	movw	r28, r24
     c00:	16 2f       	mov	r17, r22
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	a1 df       	rcall	.-190    	; 0xb48 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	if (b) {
     c06:	11 23       	and	r17, r17
     c08:	19 f0       	breq	.+6      	; 0xc10 <_ZN17Adafruit_MAX3186510enableBiasEb+0x18>
		t |= MAX31856_CONFIG_BIAS;       // enable bias
     c0a:	48 2f       	mov	r20, r24
     c0c:	40 68       	ori	r20, 0x80	; 128
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <_ZN17Adafruit_MAX3186510enableBiasEb+0x1c>
	} else {
		t &= ~MAX31856_CONFIG_BIAS;       // disable bias
     c10:	48 2f       	mov	r20, r24
     c12:	4f 77       	andi	r20, 0x7F	; 127
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	ce 01       	movw	r24, r28
     c18:	be df       	rcall	.-132    	; 0xb96 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	1f 91       	pop	r17
     c20:	08 95       	ret

00000c22 <_ZN17Adafruit_MAX3186511autoConvertEb>:

void Adafruit_MAX31865::autoConvert(bool b) {
     c22:	1f 93       	push	r17
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
     c28:	ec 01       	movw	r28, r24
     c2a:	16 2f       	mov	r17, r22
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	8c df       	rcall	.-232    	; 0xb48 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	if (b) {
     c30:	11 23       	and	r17, r17
     c32:	19 f0       	breq	.+6      	; 0xc3a <_ZN17Adafruit_MAX3186511autoConvertEb+0x18>
		t |= MAX31856_CONFIG_MODEAUTO;       // enable autoconvert
     c34:	48 2f       	mov	r20, r24
     c36:	40 64       	ori	r20, 0x40	; 64
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <_ZN17Adafruit_MAX3186511autoConvertEb+0x1c>
	} else {
		t &= ~MAX31856_CONFIG_MODEAUTO;       // disable autoconvert
     c3a:	48 2f       	mov	r20, r24
     c3c:	4f 7b       	andi	r20, 0xBF	; 191
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
     c3e:	60 e0       	ldi	r22, 0x00	; 0
     c40:	ce 01       	movw	r24, r28
     c42:	a9 df       	rcall	.-174    	; 0xb96 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	1f 91       	pop	r17
     c4a:	08 95       	ret

00000c4c <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires>:

void Adafruit_MAX31865::setWires(max31865_numwires_t wires ) {
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	ec 01       	movw	r28, r24
     c54:	16 2f       	mov	r17, r22
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	77 df       	rcall	.-274    	; 0xb48 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	if (wires == MAX31865_3WIRE) {
     c5a:	11 30       	cpi	r17, 0x01	; 1
     c5c:	19 f4       	brne	.+6      	; 0xc64 <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires+0x18>
		t |= MAX31856_CONFIG_3WIRE;
     c5e:	48 2f       	mov	r20, r24
     c60:	40 61       	ori	r20, 0x10	; 16
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires+0x1c>
	} else {
		// 2 or 4 wire
		t &= ~MAX31856_CONFIG_3WIRE;
     c64:	48 2f       	mov	r20, r24
     c66:	4f 7e       	andi	r20, 0xEF	; 239
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	ce 01       	movw	r24, r28
     c6c:	94 df       	rcall	.-216    	; 0xb96 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	08 95       	ret

00000c76 <_ZN17Adafruit_MAX318655beginEh>:
#include <stdlib.h>
#include "header.h"
#include <util/delay.h>


bool Adafruit_MAX31865::begin(uint8_t choose1) {
     c76:	1f 93       	push	r17
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	ec 01       	movw	r28, r24
     c7e:	16 2f       	mov	r17, r22
	
	DISPLAY_I_PORT |= (1 << DISPLAY_I_PIN) | (1 << DISPLAY_II_PIN);
     c80:	8b b1       	in	r24, 0x0b	; 11
     c82:	80 63       	ori	r24, 0x30	; 48
     c84:	8b b9       	out	0x0b, r24	; 11
	SPI.begin();
     c86:	68 d1       	rcall	.+720    	; 0xf58 <_ZN8SPIClass5beginEv>
  static void begin();
  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    SPCR = settings.spcr;
     c88:	85 e5       	ldi	r24, 0x55	; 85
     c8a:	8c bd       	out	0x2c, r24	; 44
	SPI.beginTransaction(SPISettings(1000000,MSBFIRST,SPI_MODE1));
	for (uint8_t i=0; i<16; i++) {
		// readRegister8(i);
	}
	choose = choose1;
     c8c:	18 83       	st	Y, r17
	setWires(MAX31865_3WIRE);
     c8e:	61 e0       	ldi	r22, 0x01	; 1
     c90:	ce 01       	movw	r24, r28
     c92:	dc df       	rcall	.-72     	; 0xc4c <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires>
	enableBias(false);
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	ce 01       	movw	r24, r28
     c98:	af df       	rcall	.-162    	; 0xbf8 <_ZN17Adafruit_MAX3186510enableBiasEb>
	autoConvert(false);
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	ce 01       	movw	r24, r28
     c9e:	c1 df       	rcall	.-126    	; 0xc22 <_ZN17Adafruit_MAX3186511autoConvertEb>
	clearFault();
     ca0:	ce 01       	movw	r24, r28
     ca2:	9c df       	rcall	.-200    	; 0xbdc <_ZN17Adafruit_MAX3186510clearFaultEv>
	
	//Serial.print("config: "); Serial.println(readRegister8(MAX31856_CONFIG_REG), HEX);
	return true;
}
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	1f 91       	pop	r17
     cac:	08 95       	ret

00000cae <_ZN17Adafruit_MAX318657readRTDEv>:
	temp += 1.5243e-10 * rpoly;

	return temp;
}

uint16_t Adafruit_MAX31865::readRTD (void) {
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	ec 01       	movw	r28, r24
	clearFault();
     cb4:	93 df       	rcall	.-218    	; 0xbdc <_ZN17Adafruit_MAX3186510clearFaultEv>
	enableBias(true);
     cb6:	61 e0       	ldi	r22, 0x01	; 1
     cb8:	ce 01       	movw	r24, r28
     cba:	9e df       	rcall	.-196    	; 0xbf8 <_ZN17Adafruit_MAX3186510enableBiasEb>
     cbc:	83 ec       	ldi	r24, 0xC3	; 195
     cbe:	99 e0       	ldi	r25, 0x09	; 9
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <_ZN17Adafruit_MAX318657readRTDEv+0x12>
     cc4:	00 c0       	rjmp	.+0      	; 0xcc6 <_ZN17Adafruit_MAX318657readRTDEv+0x18>
     cc6:	00 00       	nop
	_delay_ms(10);
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	ce 01       	movw	r24, r28
     ccc:	3d df       	rcall	.-390    	; 0xb48 <_ZN17Adafruit_MAX3186513readRegister8Eh>
	t |= MAX31856_CONFIG_1SHOT;
     cce:	48 2f       	mov	r20, r24
     cd0:	40 62       	ori	r20, 0x20	; 32
	writeRegister8(MAX31856_CONFIG_REG, t);
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	ce 01       	movw	r24, r28
     cd6:	5f df       	rcall	.-322    	; 0xb96 <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
     cd8:	89 e7       	ldi	r24, 0x79	; 121
     cda:	9f e3       	ldi	r25, 0x3F	; 63
     cdc:	01 97       	sbiw	r24, 0x01	; 1
     cde:	f1 f7       	brne	.-4      	; 0xcdc <_ZN17Adafruit_MAX318657readRTDEv+0x2e>
     ce0:	00 c0       	rjmp	.+0      	; 0xce2 <_ZN17Adafruit_MAX318657readRTDEv+0x34>
     ce2:	00 00       	nop
	_delay_ms(65);

	uint16_t rtd = readRegister16(MAX31856_RTDMSB_REG);
     ce4:	61 e0       	ldi	r22, 0x01	; 1
     ce6:	ce 01       	movw	r24, r28
     ce8:	3f df       	rcall	.-386    	; 0xb68 <_ZN17Adafruit_MAX3186514readRegister16Eh>

	// remove fault
	rtd >>= 1;

	return rtd;
}
     cea:	96 95       	lsr	r25
     cec:	87 95       	ror	r24
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	08 95       	ret

00000cf4 <_ZN17Adafruit_MAX3186511temperatureEff>:
		t &= ~MAX31856_CONFIG_3WIRE;
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
}

float  Adafruit_MAX31865::temperature(float RTDnominal, float refResistor) {
     cf4:	4f 92       	push	r4
     cf6:	5f 92       	push	r5
     cf8:	6f 92       	push	r6
     cfa:	7f 92       	push	r7
     cfc:	8f 92       	push	r8
     cfe:	9f 92       	push	r9
     d00:	af 92       	push	r10
     d02:	bf 92       	push	r11
     d04:	cf 92       	push	r12
     d06:	df 92       	push	r13
     d08:	ef 92       	push	r14
     d0a:	ff 92       	push	r15
     d0c:	0f 93       	push	r16
     d0e:	1f 93       	push	r17
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	4a 01       	movw	r8, r20
     d16:	5b 01       	movw	r10, r22
     d18:	68 01       	movw	r12, r16
     d1a:	79 01       	movw	r14, r18
	// http://www.analog.com/media/en/technical-documentation/application-notes/AN709_0.pdf

	float Z1, Z2, Z3, Z4, Rt, temp;

	Rt = readRTD();
     d1c:	c8 df       	rcall	.-112    	; 0xcae <_ZN17Adafruit_MAX318657readRTDEv>
     d1e:	bc 01       	movw	r22, r24
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	55 d2       	rcall	.+1194   	; 0x11d0 <__floatunsisf>
	Rt /= 32768;
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	40 e0       	ldi	r20, 0x00	; 0
     d2c:	58 e3       	ldi	r21, 0x38	; 56
     d2e:	06 d3       	rcall	.+1548   	; 0x133c <__mulsf3>
	Rt *= refResistor;
     d30:	a7 01       	movw	r20, r14
     d32:	96 01       	movw	r18, r12
     d34:	03 d3       	rcall	.+1542   	; 0x133c <__mulsf3>
     d36:	2b 01       	movw	r4, r22
     d38:	3c 01       	movw	r6, r24
	
	// Serial.print("\nResistance: "); Serial.println(Rt, 8);

	Z1 = -RTD_A;
	Z2 = RTD_A * RTD_A - (4 * RTD_B);
	Z3 = (4 * RTD_B) / RTDnominal;
     d3a:	a5 01       	movw	r20, r10
     d3c:	94 01       	movw	r18, r8
     d3e:	6f e7       	ldi	r22, 0x7F	; 127
     d40:	75 e0       	ldi	r23, 0x05	; 5
     d42:	8b e1       	ldi	r24, 0x1B	; 27
     d44:	96 eb       	ldi	r25, 0xB6	; 182
     d46:	ab d1       	rcall	.+854    	; 0x109e <__divsf3>
     d48:	6b 01       	movw	r12, r22
     d4a:	7c 01       	movw	r14, r24
	Z4 = 2 * RTD_B;

	temp = Z2 + (Z3 * Rt);
     d4c:	a3 01       	movw	r20, r6
     d4e:	92 01       	movw	r18, r4
     d50:	c7 01       	movw	r24, r14
     d52:	b6 01       	movw	r22, r12
     d54:	f3 d2       	rcall	.+1510   	; 0x133c <__mulsf3>
     d56:	26 e1       	ldi	r18, 0x16	; 22
     d58:	33 e8       	ldi	r19, 0x83	; 131
     d5a:	43 e9       	ldi	r20, 0x93	; 147
     d5c:	57 e3       	ldi	r21, 0x37	; 55
     d5e:	37 d1       	rcall	.+622    	; 0xfce <__addsf3>
	temp = (sqrt(temp) + Z1) / Z4;
     d60:	54 d3       	rcall	.+1704   	; 0x140a <sqrt>
     d62:	22 e3       	ldi	r18, 0x32	; 50
     d64:	31 e1       	ldi	r19, 0x11	; 17
     d66:	40 e8       	ldi	r20, 0x80	; 128
     d68:	5b e3       	ldi	r21, 0x3B	; 59
     d6a:	30 d1       	rcall	.+608    	; 0xfcc <__subsf3>
     d6c:	2f e7       	ldi	r18, 0x7F	; 127
     d6e:	35 e0       	ldi	r19, 0x05	; 5
     d70:	4b e9       	ldi	r20, 0x9B	; 155
     d72:	55 eb       	ldi	r21, 0xB5	; 181
     d74:	94 d1       	rcall	.+808    	; 0x109e <__divsf3>
     d76:	06 2f       	mov	r16, r22
     d78:	17 2f       	mov	r17, r23
     d7a:	d8 2f       	mov	r29, r24
     d7c:	c9 2f       	mov	r28, r25
	
	if (temp >= 0) return temp;
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	a9 01       	movw	r20, r18
     d84:	d7 d2       	rcall	.+1454   	; 0x1334 <__gesf2>
     d86:	88 23       	and	r24, r24
     d88:	0c f0       	brlt	.+2      	; 0xd8c <_ZN17Adafruit_MAX3186511temperatureEff+0x98>
     d8a:	60 c0       	rjmp	.+192    	; 0xe4c <_ZN17Adafruit_MAX3186511temperatureEff+0x158>

	// ugh.
	Rt /= RTDnominal;
     d8c:	a5 01       	movw	r20, r10
     d8e:	94 01       	movw	r18, r8
     d90:	c3 01       	movw	r24, r6
     d92:	b2 01       	movw	r22, r4
     d94:	84 d1       	rcall	.+776    	; 0x109e <__divsf3>
	Rt *= 100;      // normalize to 100 ohm
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	48 ec       	ldi	r20, 0xC8	; 200
     d9c:	52 e4       	ldi	r21, 0x42	; 66
     d9e:	ce d2       	rcall	.+1436   	; 0x133c <__mulsf3>
     da0:	6b 01       	movw	r12, r22
     da2:	7c 01       	movw	r14, r24

	float rpoly = Rt;

	temp = -242.02;
	temp += 2.2228 * rpoly;
     da4:	2b e5       	ldi	r18, 0x5B	; 91
     da6:	32 e4       	ldi	r19, 0x42	; 66
     da8:	4e e0       	ldi	r20, 0x0E	; 14
     daa:	50 e4       	ldi	r21, 0x40	; 64
     dac:	c7 d2       	rcall	.+1422   	; 0x133c <__mulsf3>
     dae:	2f e1       	ldi	r18, 0x1F	; 31
     db0:	35 e0       	ldi	r19, 0x05	; 5
     db2:	42 e7       	ldi	r20, 0x72	; 114
     db4:	53 ec       	ldi	r21, 0xC3	; 195
     db6:	0b d1       	rcall	.+534    	; 0xfce <__addsf3>
     db8:	2b 01       	movw	r4, r22
     dba:	3c 01       	movw	r6, r24
	rpoly *= Rt;  // square
     dbc:	a7 01       	movw	r20, r14
     dbe:	96 01       	movw	r18, r12
     dc0:	c7 01       	movw	r24, r14
     dc2:	b6 01       	movw	r22, r12
     dc4:	bb d2       	rcall	.+1398   	; 0x133c <__mulsf3>
     dc6:	4b 01       	movw	r8, r22
     dc8:	5c 01       	movw	r10, r24
	temp += 2.5859e-3 * rpoly;
     dca:	24 e3       	ldi	r18, 0x34	; 52
     dcc:	38 e7       	ldi	r19, 0x78	; 120
     dce:	49 e2       	ldi	r20, 0x29	; 41
     dd0:	5b e3       	ldi	r21, 0x3B	; 59
     dd2:	b4 d2       	rcall	.+1384   	; 0x133c <__mulsf3>
     dd4:	a3 01       	movw	r20, r6
     dd6:	92 01       	movw	r18, r4
     dd8:	fa d0       	rcall	.+500    	; 0xfce <__addsf3>
     dda:	2b 01       	movw	r4, r22
     ddc:	3c 01       	movw	r6, r24
	rpoly *= Rt;  // ^3
     dde:	a7 01       	movw	r20, r14
     de0:	96 01       	movw	r18, r12
     de2:	c5 01       	movw	r24, r10
     de4:	b4 01       	movw	r22, r8
     de6:	aa d2       	rcall	.+1364   	; 0x133c <__mulsf3>
     de8:	4b 01       	movw	r8, r22
     dea:	5c 01       	movw	r10, r24
	temp -= 4.8260e-6 * rpoly;
     dec:	26 e0       	ldi	r18, 0x06	; 6
     dee:	3f ee       	ldi	r19, 0xEF	; 239
     df0:	41 ea       	ldi	r20, 0xA1	; 161
     df2:	56 e3       	ldi	r21, 0x36	; 54
     df4:	a3 d2       	rcall	.+1350   	; 0x133c <__mulsf3>
     df6:	9b 01       	movw	r18, r22
     df8:	ac 01       	movw	r20, r24
     dfa:	c3 01       	movw	r24, r6
     dfc:	b2 01       	movw	r22, r4
     dfe:	e6 d0       	rcall	.+460    	; 0xfcc <__subsf3>
     e00:	2b 01       	movw	r4, r22
     e02:	3c 01       	movw	r6, r24
	rpoly *= Rt;  // ^4
     e04:	a7 01       	movw	r20, r14
     e06:	96 01       	movw	r18, r12
     e08:	c5 01       	movw	r24, r10
     e0a:	b4 01       	movw	r22, r8
     e0c:	97 d2       	rcall	.+1326   	; 0x133c <__mulsf3>
     e0e:	4b 01       	movw	r8, r22
     e10:	5c 01       	movw	r10, r24
	temp -= 2.8183e-8 * rpoly;
     e12:	23 e1       	ldi	r18, 0x13	; 19
     e14:	37 e1       	ldi	r19, 0x17	; 23
     e16:	42 ef       	ldi	r20, 0xF2	; 242
     e18:	52 e3       	ldi	r21, 0x32	; 50
     e1a:	90 d2       	rcall	.+1312   	; 0x133c <__mulsf3>
     e1c:	9b 01       	movw	r18, r22
     e1e:	ac 01       	movw	r20, r24
     e20:	c3 01       	movw	r24, r6
     e22:	b2 01       	movw	r22, r4
     e24:	d3 d0       	rcall	.+422    	; 0xfcc <__subsf3>
     e26:	2b 01       	movw	r4, r22
     e28:	3c 01       	movw	r6, r24
	rpoly *= Rt;  // ^5
     e2a:	a7 01       	movw	r20, r14
     e2c:	96 01       	movw	r18, r12
     e2e:	c5 01       	movw	r24, r10
     e30:	b4 01       	movw	r22, r8
     e32:	84 d2       	rcall	.+1288   	; 0x133c <__mulsf3>
	temp += 1.5243e-10 * rpoly;
     e34:	2b e3       	ldi	r18, 0x3B	; 59
     e36:	39 e9       	ldi	r19, 0x99	; 153
     e38:	47 e2       	ldi	r20, 0x27	; 39
     e3a:	5f e2       	ldi	r21, 0x2F	; 47
     e3c:	7f d2       	rcall	.+1278   	; 0x133c <__mulsf3>
     e3e:	a3 01       	movw	r20, r6
     e40:	92 01       	movw	r18, r4
     e42:	c5 d0       	rcall	.+394    	; 0xfce <__addsf3>

	return temp;
     e44:	06 2f       	mov	r16, r22
     e46:	17 2f       	mov	r17, r23
     e48:	d8 2f       	mov	r29, r24
     e4a:	c9 2f       	mov	r28, r25
}
     e4c:	60 2f       	mov	r22, r16
     e4e:	71 2f       	mov	r23, r17
     e50:	8d 2f       	mov	r24, r29
     e52:	9c 2f       	mov	r25, r28
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	ff 90       	pop	r15
     e5e:	ef 90       	pop	r14
     e60:	df 90       	pop	r13
     e62:	cf 90       	pop	r12
     e64:	bf 90       	pop	r11
     e66:	af 90       	pop	r10
     e68:	9f 90       	pop	r9
     e6a:	8f 90       	pop	r8
     e6c:	7f 90       	pop	r7
     e6e:	6f 90       	pop	r6
     e70:	5f 90       	pop	r5
     e72:	4f 90       	pop	r4
     e74:	08 95       	ret

00000e76 <_Z8spi_initv>:

#include <avr/io.h>

void spi_init() {
	// SPI Enable, Master mode
	SPCR |= (1 << SPE) | (1 << MSTR)| (1<<SPR1);
     e76:	8c b5       	in	r24, 0x2c	; 44
     e78:	82 65       	ori	r24, 0x52	; 82
     e7a:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ ((1 << SPR0) | (1<< CPHA));
     e7c:	8c b5       	in	r24, 0x2c	; 44
     e7e:	8a 7f       	andi	r24, 0xFA	; 250
     e80:	8c bd       	out	0x2c, r24	; 44
	
	// SCK MOSI CS/LOAD/SS
	DDRB |= (1 << PIN_SCK) | (1 << PIN_MOSI) ;
     e82:	84 b1       	in	r24, 0x04	; 4
     e84:	88 62       	ori	r24, 0x28	; 40
     e86:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1  << PIN_SS);
     e88:	22 9a       	sbi	0x04, 2	; 4
	
	//slave pins
	DDR(DISPLAY_I_PORT) |= (1 << DISPLAY_I_PIN) | (1 << DISPLAY_II_PIN);
     e8a:	8a b1       	in	r24, 0x0a	; 10
     e8c:	80 63       	ori	r24, 0x30	; 48
     e8e:	8a b9       	out	0x0a, r24	; 10
	
	DISPLAY_I_PORT |= (1 << DISPLAY_I_PIN); 
     e90:	5d 9a       	sbi	0x0b, 5	; 11
	DISPLAY_II_PORT |= (1 << DISPLAY_II_PIN);
     e92:	5c 9a       	sbi	0x0b, 4	; 11
     e94:	08 95       	ret

00000e96 <_Z11spiSendBytec>:
}

void spiSendByte (char databyte)
{
	// Copy data into the SPI data register
	SPDR = databyte;
     e96:	8e bd       	out	0x2e, r24	; 46
	// Wait until transfer is complete
	while (!(SPSR & (1 << SPIF)));
     e98:	0d b4       	in	r0, 0x2d	; 45
     e9a:	07 fe       	sbrs	r0, 7
     e9c:	fd cf       	rjmp	.-6      	; 0xe98 <_Z11spiSendBytec+0x2>
}
     e9e:	08 95       	ret

00000ea0 <_ZN7max721911MAX7219_setEiii>:
 *  Author: swain
 */ 
#include "max7219.h"
#include "spiD.h"

void max7219::MAX7219_set(int numm, int ii, int jj) {
     ea0:	fc 01       	movw	r30, r24
	num = numm;
     ea2:	71 83       	std	Z+1, r23	; 0x01
     ea4:	60 83       	st	Z, r22
	digits1 = ii;
     ea6:	53 83       	std	Z+3, r21	; 0x03
     ea8:	42 83       	std	Z+2, r20	; 0x02
	digits2 = jj;
     eaa:	35 83       	std	Z+5, r19	; 0x05
     eac:	24 83       	std	Z+4, r18	; 0x04
     eae:	08 95       	ret

00000eb0 <_ZN7max721917MAX7219_writeDataEcc>:
		max7219::MAX7219_writeData(MAX7219_MODE_POWER, ON);
	}
}

void max7219::MAX7219_writeData(char data_register, char data)
{
     eb0:	1f 93       	push	r17
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	ec 01       	movw	r28, r24
     eb8:	14 2f       	mov	r17, r20
	
	switch(max7219::num){
     eba:	28 81       	ld	r18, Y
     ebc:	39 81       	ldd	r19, Y+1	; 0x01
     ebe:	21 15       	cp	r18, r1
     ec0:	31 05       	cpc	r19, r1
     ec2:	21 f0       	breq	.+8      	; 0xecc <_ZN7max721917MAX7219_writeDataEcc+0x1c>
     ec4:	21 30       	cpi	r18, 0x01	; 1
     ec6:	31 05       	cpc	r19, r1
     ec8:	19 f0       	breq	.+6      	; 0xed0 <_ZN7max721917MAX7219_writeDataEcc+0x20>
     eca:	03 c0       	rjmp	.+6      	; 0xed2 <_ZN7max721917MAX7219_writeDataEcc+0x22>
		case 0:
		MAX7219_LOAD_ON_1(0);
     ecc:	5d 98       	cbi	0x0b, 5	; 11
		break;
     ece:	01 c0       	rjmp	.+2      	; 0xed2 <_ZN7max721917MAX7219_writeDataEcc+0x22>
		case 1:
		MAX7219_LOAD_ON_2(1);
     ed0:	5c 98       	cbi	0x0b, 4	; 11
		break;
	}		
		
	// Send the register where the data will be stored
	spiSendByte(data_register);
     ed2:	86 2f       	mov	r24, r22
     ed4:	e0 df       	rcall	.-64     	; 0xe96 <_Z11spiSendBytec>
	// Send the data to be stored
	spiSendByte(data);
     ed6:	81 2f       	mov	r24, r17
     ed8:	de df       	rcall	.-68     	; 0xe96 <_Z11spiSendBytec>
	
	switch(max7219::num){
     eda:	88 81       	ld	r24, Y
     edc:	99 81       	ldd	r25, Y+1	; 0x01
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	19 f0       	breq	.+6      	; 0xee8 <_ZN7max721917MAX7219_writeDataEcc+0x38>
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	19 f0       	breq	.+6      	; 0xeec <_ZN7max721917MAX7219_writeDataEcc+0x3c>
     ee6:	03 c0       	rjmp	.+6      	; 0xeee <_ZN7max721917MAX7219_writeDataEcc+0x3e>
		case 0:
		MAX7219_LOAD_OFF_1(0);
     ee8:	5d 9a       	sbi	0x0b, 5	; 11
		break;
     eea:	01 c0       	rjmp	.+2      	; 0xeee <_ZN7max721917MAX7219_writeDataEcc+0x3e>
		case 1:
		MAX7219_LOAD_OFF_2(1);
     eec:	5c 9a       	sbi	0x0b, 4	; 11
		break;
	}
	
}
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	1f 91       	pop	r17
     ef4:	08 95       	ret

00000ef6 <_ZN7max721912MAX7219_initEh>:
	num = numm;
	digits1 = ii;
	digits2 = jj;
}

void max7219::MAX7219_init(uint8_t a) {
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	ec 01       	movw	r28, r24
	if(a == REINITIALIZE)
     efc:	61 30       	cpi	r22, 0x01	; 1
     efe:	11 f4       	brne	.+4      	; 0xf04 <_ZN7max721912MAX7219_initEh+0xe>
		spi_init();
     f00:	ba df       	rcall	.-140    	; 0xe76 <_Z8spi_initv>
     f02:	15 c0       	rjmp	.+42     	; 0xf2e <_ZN7max721912MAX7219_initEh+0x38>
	// Decode mode to "Font Code-B"
	else{
		spi_init();
     f04:	b8 df       	rcall	.-144    	; 0xe76 <_Z8spi_initv>
		max7219::MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
     f06:	4f ef       	ldi	r20, 0xFF	; 255
     f08:	69 e0       	ldi	r22, 0x09	; 9
     f0a:	ce 01       	movw	r24, r28
     f0c:	d1 df       	rcall	.-94     	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
		max7219::MAX7219_writeData(MAX7219_MODE_TEST,0);
     f0e:	40 e0       	ldi	r20, 0x00	; 0
     f10:	6f e0       	ldi	r22, 0x0F	; 15
     f12:	ce 01       	movw	r24, r28
     f14:	cd df       	rcall	.-102    	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
		// Scan limit runs from 0.
		max7219::MAX7219_writeData(MAX7219_MODE_SCAN_LIMIT, 7); //7 or 8?
     f16:	47 e0       	ldi	r20, 0x07	; 7
     f18:	6b e0       	ldi	r22, 0x0B	; 11
     f1a:	ce 01       	movw	r24, r28
     f1c:	c9 df       	rcall	.-110    	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
		max7219::MAX7219_writeData(MAX7219_MODE_INTENSITY, 0x0f);
     f1e:	4f e0       	ldi	r20, 0x0F	; 15
     f20:	6a e0       	ldi	r22, 0x0A	; 10
     f22:	ce 01       	movw	r24, r28
     f24:	c5 df       	rcall	.-118    	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
		max7219::MAX7219_writeData(MAX7219_MODE_POWER, ON);
     f26:	41 e0       	ldi	r20, 0x01	; 1
     f28:	6c e0       	ldi	r22, 0x0C	; 12
     f2a:	ce 01       	movw	r24, r28
     f2c:	c1 df       	rcall	.-126    	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
	}
}
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	08 95       	ret

00000f34 <_ZN7max721920MAX7219_clearDisplayEv>:
	}
	
}

void max7219::MAX7219_clearDisplay()
{
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	cf 93       	push	r28
     f3a:	8c 01       	movw	r16, r24
	//char i = digitsInUse;
	char i = max7219::digits1 + max7219::digits2 ;
     f3c:	fc 01       	movw	r30, r24
     f3e:	c4 81       	ldd	r28, Z+4	; 0x04
     f40:	92 81       	ldd	r25, Z+2	; 0x02
     f42:	c9 0f       	add	r28, r25
	// Loop until 0, but don't run for zero
	do {
		// Set each display in use to blank
		max7219::MAX7219_writeData(i, MAX7219_CHAR_BLANK);
     f44:	4f e0       	ldi	r20, 0x0F	; 15
     f46:	6c 2f       	mov	r22, r28
     f48:	c8 01       	movw	r24, r16
     f4a:	b2 df       	rcall	.-156    	; 0xeb0 <_ZN7max721917MAX7219_writeDataEcc>
void max7219::MAX7219_clearDisplay()
{
	//char i = digitsInUse;
	char i = max7219::digits1 + max7219::digits2 ;
	// Loop until 0, but don't run for zero
	do {
     f4c:	c1 50       	subi	r28, 0x01	; 1
     f4e:	d1 f7       	brne	.-12     	; 0xf44 <_ZN7max721920MAX7219_clearDisplayEv+0x10>
		// Set each display in use to blank
		max7219::MAX7219_writeData(i, MAX7219_CHAR_BLANK);
	} while (--i);
}
     f50:	cf 91       	pop	r28
     f52:	1f 91       	pop	r17
     f54:	0f 91       	pop	r16
     f56:	08 95       	ret

00000f58 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
  
    //pinMode(SS, OUTPUT);
	DDRB |= (1 << PINB2);
     f58:	22 9a       	sbi	0x04, 2	; 4
    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
     f5a:	8c b5       	in	r24, 0x2c	; 44
     f5c:	80 61       	ori	r24, 0x10	; 16
     f5e:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
     f60:	8c b5       	in	r24, 0x2c	; 44
     f62:	80 64       	ori	r24, 0x40	; 64
     f64:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ ((1 << SPR1) | (1 << SPR0));
     f66:	8c b5       	in	r24, 0x2c	; 44
     f68:	8c 7f       	andi	r24, 0xFC	; 252
     f6a:	8c bd       	out	0x2c, r24	; 44
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
	
    //pinMode(SCK, OUTPUT);
	DDRB |= (1 << PINB5);
     f6c:	25 9a       	sbi	0x04, 5	; 4
    //pinMode(MOSI, OUTPUT);
	DDRB |= (1 << PINB3);
     f6e:	23 9a       	sbi	0x04, 3	; 4
	
	DDR(TEMP_I_PORT ) |= (1 << TEMP_I_PIN ) | (1 << TEMP_I_PIN );
     f70:	21 9a       	sbi	0x04, 1	; 4
	TEMP_I_PORT  |= (1 << TEMP_I_PIN ) | (1 << TEMP_I_PIN );
     f72:	29 9a       	sbi	0x05, 1	; 5
     f74:	08 95       	ret

00000f76 <_ZN6Timerr11setTimerNumEi>:
	SET_COMPARE(1, A);
}

void Timerr::resetTimer() {
	
	TCNT1 = 0;
     f76:	fc 01       	movw	r30, r24
     f78:	71 83       	std	Z+1, r23	; 0x01
     f7a:	60 83       	st	Z, r22
     f7c:	08 95       	ret

00000f7e <_ZN6Timerr19setCompareInterruptEv>:
     f7e:	ef e6       	ldi	r30, 0x6F	; 111
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	82 60       	ori	r24, 0x02	; 2
     f86:	80 83       	st	Z, r24
     f88:	08 95       	ret

00000f8a <_ZN6Timerr16startCustomTimerEi>:
	
}
void Timerr::startCustomTimer(int milli_sec) {
	
		int ocr = (15.625 * milli_sec);
     f8a:	07 2e       	mov	r0, r23
     f8c:	00 0c       	add	r0, r0
     f8e:	88 0b       	sbc	r24, r24
     f90:	99 0b       	sbc	r25, r25
     f92:	20 d1       	rcall	.+576    	; 0x11d4 <__floatsisf>
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	4a e7       	ldi	r20, 0x7A	; 122
     f9a:	51 e4       	ldi	r21, 0x41	; 65
     f9c:	cf d1       	rcall	.+926    	; 0x133c <__mulsf3>
     f9e:	e7 d0       	rcall	.+462    	; 0x116e <__fixsfsi>
		OCR1A = ocr;
     fa0:	70 93 89 00 	sts	0x0089, r23
     fa4:	60 93 88 00 	sts	0x0088, r22
		START_TIMERR(1,0,2); //for proteus use 5,0,1 and for real life use 5,0,2
     fa8:	e1 e8       	ldi	r30, 0x81	; 129
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	85 60       	ori	r24, 0x05	; 5
     fb0:	80 83       	st	Z, r24
     fb2:	08 95       	ret

00000fb4 <_Z9initUART0v>:
char buffer=0,buffer1=0,buffer2=0;

void initUART0(void)
{
	//set baud rate
	UBRR0H=(MYUBRR0)>>8;
     fb4:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L=MYUBRR0;
     fb8:	87 e6       	ldi	r24, 0x67	; 103
     fba:	80 93 c4 00 	sts	0x00C4, r24

	//Enable Receiver and Transmitter
	UCSR0B = ((1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0));
     fbe:	88 e9       	ldi	r24, 0x98	; 152
     fc0:	80 93 c1 00 	sts	0x00C1, r24
	
	//set frame format
	UCSR0C=((1<<UCSZ00)|(1<<UCSZ01));
     fc4:	86 e0       	ldi	r24, 0x06	; 6
     fc6:	80 93 c2 00 	sts	0x00C2, r24
     fca:	08 95       	ret

00000fcc <__subsf3>:
     fcc:	50 58       	subi	r21, 0x80	; 128

00000fce <__addsf3>:
     fce:	bb 27       	eor	r27, r27
     fd0:	aa 27       	eor	r26, r26
     fd2:	0e d0       	rcall	.+28     	; 0xff0 <__addsf3x>
     fd4:	75 c1       	rjmp	.+746    	; 0x12c0 <__fp_round>
     fd6:	66 d1       	rcall	.+716    	; 0x12a4 <__fp_pscA>
     fd8:	30 f0       	brcs	.+12     	; 0xfe6 <__addsf3+0x18>
     fda:	6b d1       	rcall	.+726    	; 0x12b2 <__fp_pscB>
     fdc:	20 f0       	brcs	.+8      	; 0xfe6 <__addsf3+0x18>
     fde:	31 f4       	brne	.+12     	; 0xfec <__addsf3+0x1e>
     fe0:	9f 3f       	cpi	r25, 0xFF	; 255
     fe2:	11 f4       	brne	.+4      	; 0xfe8 <__addsf3+0x1a>
     fe4:	1e f4       	brtc	.+6      	; 0xfec <__addsf3+0x1e>
     fe6:	5b c1       	rjmp	.+694    	; 0x129e <__fp_nan>
     fe8:	0e f4       	brtc	.+2      	; 0xfec <__addsf3+0x1e>
     fea:	e0 95       	com	r30
     fec:	e7 fb       	bst	r30, 7
     fee:	51 c1       	rjmp	.+674    	; 0x1292 <__fp_inf>

00000ff0 <__addsf3x>:
     ff0:	e9 2f       	mov	r30, r25
     ff2:	77 d1       	rcall	.+750    	; 0x12e2 <__fp_split3>
     ff4:	80 f3       	brcs	.-32     	; 0xfd6 <__addsf3+0x8>
     ff6:	ba 17       	cp	r27, r26
     ff8:	62 07       	cpc	r22, r18
     ffa:	73 07       	cpc	r23, r19
     ffc:	84 07       	cpc	r24, r20
     ffe:	95 07       	cpc	r25, r21
    1000:	18 f0       	brcs	.+6      	; 0x1008 <__addsf3x+0x18>
    1002:	71 f4       	brne	.+28     	; 0x1020 <__addsf3x+0x30>
    1004:	9e f5       	brtc	.+102    	; 0x106c <__addsf3x+0x7c>
    1006:	8f c1       	rjmp	.+798    	; 0x1326 <__fp_zero>
    1008:	0e f4       	brtc	.+2      	; 0x100c <__addsf3x+0x1c>
    100a:	e0 95       	com	r30
    100c:	0b 2e       	mov	r0, r27
    100e:	ba 2f       	mov	r27, r26
    1010:	a0 2d       	mov	r26, r0
    1012:	0b 01       	movw	r0, r22
    1014:	b9 01       	movw	r22, r18
    1016:	90 01       	movw	r18, r0
    1018:	0c 01       	movw	r0, r24
    101a:	ca 01       	movw	r24, r20
    101c:	a0 01       	movw	r20, r0
    101e:	11 24       	eor	r1, r1
    1020:	ff 27       	eor	r31, r31
    1022:	59 1b       	sub	r21, r25
    1024:	99 f0       	breq	.+38     	; 0x104c <__addsf3x+0x5c>
    1026:	59 3f       	cpi	r21, 0xF9	; 249
    1028:	50 f4       	brcc	.+20     	; 0x103e <__addsf3x+0x4e>
    102a:	50 3e       	cpi	r21, 0xE0	; 224
    102c:	68 f1       	brcs	.+90     	; 0x1088 <__addsf3x+0x98>
    102e:	1a 16       	cp	r1, r26
    1030:	f0 40       	sbci	r31, 0x00	; 0
    1032:	a2 2f       	mov	r26, r18
    1034:	23 2f       	mov	r18, r19
    1036:	34 2f       	mov	r19, r20
    1038:	44 27       	eor	r20, r20
    103a:	58 5f       	subi	r21, 0xF8	; 248
    103c:	f3 cf       	rjmp	.-26     	; 0x1024 <__addsf3x+0x34>
    103e:	46 95       	lsr	r20
    1040:	37 95       	ror	r19
    1042:	27 95       	ror	r18
    1044:	a7 95       	ror	r26
    1046:	f0 40       	sbci	r31, 0x00	; 0
    1048:	53 95       	inc	r21
    104a:	c9 f7       	brne	.-14     	; 0x103e <__addsf3x+0x4e>
    104c:	7e f4       	brtc	.+30     	; 0x106c <__addsf3x+0x7c>
    104e:	1f 16       	cp	r1, r31
    1050:	ba 0b       	sbc	r27, r26
    1052:	62 0b       	sbc	r22, r18
    1054:	73 0b       	sbc	r23, r19
    1056:	84 0b       	sbc	r24, r20
    1058:	ba f0       	brmi	.+46     	; 0x1088 <__addsf3x+0x98>
    105a:	91 50       	subi	r25, 0x01	; 1
    105c:	a1 f0       	breq	.+40     	; 0x1086 <__addsf3x+0x96>
    105e:	ff 0f       	add	r31, r31
    1060:	bb 1f       	adc	r27, r27
    1062:	66 1f       	adc	r22, r22
    1064:	77 1f       	adc	r23, r23
    1066:	88 1f       	adc	r24, r24
    1068:	c2 f7       	brpl	.-16     	; 0x105a <__addsf3x+0x6a>
    106a:	0e c0       	rjmp	.+28     	; 0x1088 <__addsf3x+0x98>
    106c:	ba 0f       	add	r27, r26
    106e:	62 1f       	adc	r22, r18
    1070:	73 1f       	adc	r23, r19
    1072:	84 1f       	adc	r24, r20
    1074:	48 f4       	brcc	.+18     	; 0x1088 <__addsf3x+0x98>
    1076:	87 95       	ror	r24
    1078:	77 95       	ror	r23
    107a:	67 95       	ror	r22
    107c:	b7 95       	ror	r27
    107e:	f7 95       	ror	r31
    1080:	9e 3f       	cpi	r25, 0xFE	; 254
    1082:	08 f0       	brcs	.+2      	; 0x1086 <__addsf3x+0x96>
    1084:	b3 cf       	rjmp	.-154    	; 0xfec <__addsf3+0x1e>
    1086:	93 95       	inc	r25
    1088:	88 0f       	add	r24, r24
    108a:	08 f0       	brcs	.+2      	; 0x108e <__addsf3x+0x9e>
    108c:	99 27       	eor	r25, r25
    108e:	ee 0f       	add	r30, r30
    1090:	97 95       	ror	r25
    1092:	87 95       	ror	r24
    1094:	08 95       	ret

00001096 <__cmpsf2>:
    1096:	d9 d0       	rcall	.+434    	; 0x124a <__fp_cmp>
    1098:	08 f4       	brcc	.+2      	; 0x109c <__cmpsf2+0x6>
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	08 95       	ret

0000109e <__divsf3>:
    109e:	0c d0       	rcall	.+24     	; 0x10b8 <__divsf3x>
    10a0:	0f c1       	rjmp	.+542    	; 0x12c0 <__fp_round>
    10a2:	07 d1       	rcall	.+526    	; 0x12b2 <__fp_pscB>
    10a4:	40 f0       	brcs	.+16     	; 0x10b6 <__divsf3+0x18>
    10a6:	fe d0       	rcall	.+508    	; 0x12a4 <__fp_pscA>
    10a8:	30 f0       	brcs	.+12     	; 0x10b6 <__divsf3+0x18>
    10aa:	21 f4       	brne	.+8      	; 0x10b4 <__divsf3+0x16>
    10ac:	5f 3f       	cpi	r21, 0xFF	; 255
    10ae:	19 f0       	breq	.+6      	; 0x10b6 <__divsf3+0x18>
    10b0:	f0 c0       	rjmp	.+480    	; 0x1292 <__fp_inf>
    10b2:	51 11       	cpse	r21, r1
    10b4:	39 c1       	rjmp	.+626    	; 0x1328 <__fp_szero>
    10b6:	f3 c0       	rjmp	.+486    	; 0x129e <__fp_nan>

000010b8 <__divsf3x>:
    10b8:	14 d1       	rcall	.+552    	; 0x12e2 <__fp_split3>
    10ba:	98 f3       	brcs	.-26     	; 0x10a2 <__divsf3+0x4>

000010bc <__divsf3_pse>:
    10bc:	99 23       	and	r25, r25
    10be:	c9 f3       	breq	.-14     	; 0x10b2 <__divsf3+0x14>
    10c0:	55 23       	and	r21, r21
    10c2:	b1 f3       	breq	.-20     	; 0x10b0 <__divsf3+0x12>
    10c4:	95 1b       	sub	r25, r21
    10c6:	55 0b       	sbc	r21, r21
    10c8:	bb 27       	eor	r27, r27
    10ca:	aa 27       	eor	r26, r26
    10cc:	62 17       	cp	r22, r18
    10ce:	73 07       	cpc	r23, r19
    10d0:	84 07       	cpc	r24, r20
    10d2:	38 f0       	brcs	.+14     	; 0x10e2 <__divsf3_pse+0x26>
    10d4:	9f 5f       	subi	r25, 0xFF	; 255
    10d6:	5f 4f       	sbci	r21, 0xFF	; 255
    10d8:	22 0f       	add	r18, r18
    10da:	33 1f       	adc	r19, r19
    10dc:	44 1f       	adc	r20, r20
    10de:	aa 1f       	adc	r26, r26
    10e0:	a9 f3       	breq	.-22     	; 0x10cc <__divsf3_pse+0x10>
    10e2:	33 d0       	rcall	.+102    	; 0x114a <__divsf3_pse+0x8e>
    10e4:	0e 2e       	mov	r0, r30
    10e6:	3a f0       	brmi	.+14     	; 0x10f6 <__divsf3_pse+0x3a>
    10e8:	e0 e8       	ldi	r30, 0x80	; 128
    10ea:	30 d0       	rcall	.+96     	; 0x114c <__divsf3_pse+0x90>
    10ec:	91 50       	subi	r25, 0x01	; 1
    10ee:	50 40       	sbci	r21, 0x00	; 0
    10f0:	e6 95       	lsr	r30
    10f2:	00 1c       	adc	r0, r0
    10f4:	ca f7       	brpl	.-14     	; 0x10e8 <__divsf3_pse+0x2c>
    10f6:	29 d0       	rcall	.+82     	; 0x114a <__divsf3_pse+0x8e>
    10f8:	fe 2f       	mov	r31, r30
    10fa:	27 d0       	rcall	.+78     	; 0x114a <__divsf3_pse+0x8e>
    10fc:	66 0f       	add	r22, r22
    10fe:	77 1f       	adc	r23, r23
    1100:	88 1f       	adc	r24, r24
    1102:	bb 1f       	adc	r27, r27
    1104:	26 17       	cp	r18, r22
    1106:	37 07       	cpc	r19, r23
    1108:	48 07       	cpc	r20, r24
    110a:	ab 07       	cpc	r26, r27
    110c:	b0 e8       	ldi	r27, 0x80	; 128
    110e:	09 f0       	breq	.+2      	; 0x1112 <__divsf3_pse+0x56>
    1110:	bb 0b       	sbc	r27, r27
    1112:	80 2d       	mov	r24, r0
    1114:	bf 01       	movw	r22, r30
    1116:	ff 27       	eor	r31, r31
    1118:	93 58       	subi	r25, 0x83	; 131
    111a:	5f 4f       	sbci	r21, 0xFF	; 255
    111c:	2a f0       	brmi	.+10     	; 0x1128 <__divsf3_pse+0x6c>
    111e:	9e 3f       	cpi	r25, 0xFE	; 254
    1120:	51 05       	cpc	r21, r1
    1122:	68 f0       	brcs	.+26     	; 0x113e <__divsf3_pse+0x82>
    1124:	b6 c0       	rjmp	.+364    	; 0x1292 <__fp_inf>
    1126:	00 c1       	rjmp	.+512    	; 0x1328 <__fp_szero>
    1128:	5f 3f       	cpi	r21, 0xFF	; 255
    112a:	ec f3       	brlt	.-6      	; 0x1126 <__divsf3_pse+0x6a>
    112c:	98 3e       	cpi	r25, 0xE8	; 232
    112e:	dc f3       	brlt	.-10     	; 0x1126 <__divsf3_pse+0x6a>
    1130:	86 95       	lsr	r24
    1132:	77 95       	ror	r23
    1134:	67 95       	ror	r22
    1136:	b7 95       	ror	r27
    1138:	f7 95       	ror	r31
    113a:	9f 5f       	subi	r25, 0xFF	; 255
    113c:	c9 f7       	brne	.-14     	; 0x1130 <__divsf3_pse+0x74>
    113e:	88 0f       	add	r24, r24
    1140:	91 1d       	adc	r25, r1
    1142:	96 95       	lsr	r25
    1144:	87 95       	ror	r24
    1146:	97 f9       	bld	r25, 7
    1148:	08 95       	ret
    114a:	e1 e0       	ldi	r30, 0x01	; 1
    114c:	66 0f       	add	r22, r22
    114e:	77 1f       	adc	r23, r23
    1150:	88 1f       	adc	r24, r24
    1152:	bb 1f       	adc	r27, r27
    1154:	62 17       	cp	r22, r18
    1156:	73 07       	cpc	r23, r19
    1158:	84 07       	cpc	r24, r20
    115a:	ba 07       	cpc	r27, r26
    115c:	20 f0       	brcs	.+8      	; 0x1166 <__divsf3_pse+0xaa>
    115e:	62 1b       	sub	r22, r18
    1160:	73 0b       	sbc	r23, r19
    1162:	84 0b       	sbc	r24, r20
    1164:	ba 0b       	sbc	r27, r26
    1166:	ee 1f       	adc	r30, r30
    1168:	88 f7       	brcc	.-30     	; 0x114c <__divsf3_pse+0x90>
    116a:	e0 95       	com	r30
    116c:	08 95       	ret

0000116e <__fixsfsi>:
    116e:	04 d0       	rcall	.+8      	; 0x1178 <__fixunssfsi>
    1170:	68 94       	set
    1172:	b1 11       	cpse	r27, r1
    1174:	d9 c0       	rjmp	.+434    	; 0x1328 <__fp_szero>
    1176:	08 95       	ret

00001178 <__fixunssfsi>:
    1178:	bc d0       	rcall	.+376    	; 0x12f2 <__fp_splitA>
    117a:	88 f0       	brcs	.+34     	; 0x119e <__fixunssfsi+0x26>
    117c:	9f 57       	subi	r25, 0x7F	; 127
    117e:	90 f0       	brcs	.+36     	; 0x11a4 <__fixunssfsi+0x2c>
    1180:	b9 2f       	mov	r27, r25
    1182:	99 27       	eor	r25, r25
    1184:	b7 51       	subi	r27, 0x17	; 23
    1186:	a0 f0       	brcs	.+40     	; 0x11b0 <__fixunssfsi+0x38>
    1188:	d1 f0       	breq	.+52     	; 0x11be <__fixunssfsi+0x46>
    118a:	66 0f       	add	r22, r22
    118c:	77 1f       	adc	r23, r23
    118e:	88 1f       	adc	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	1a f0       	brmi	.+6      	; 0x119a <__fixunssfsi+0x22>
    1194:	ba 95       	dec	r27
    1196:	c9 f7       	brne	.-14     	; 0x118a <__fixunssfsi+0x12>
    1198:	12 c0       	rjmp	.+36     	; 0x11be <__fixunssfsi+0x46>
    119a:	b1 30       	cpi	r27, 0x01	; 1
    119c:	81 f0       	breq	.+32     	; 0x11be <__fixunssfsi+0x46>
    119e:	c3 d0       	rcall	.+390    	; 0x1326 <__fp_zero>
    11a0:	b1 e0       	ldi	r27, 0x01	; 1
    11a2:	08 95       	ret
    11a4:	c0 c0       	rjmp	.+384    	; 0x1326 <__fp_zero>
    11a6:	67 2f       	mov	r22, r23
    11a8:	78 2f       	mov	r23, r24
    11aa:	88 27       	eor	r24, r24
    11ac:	b8 5f       	subi	r27, 0xF8	; 248
    11ae:	39 f0       	breq	.+14     	; 0x11be <__fixunssfsi+0x46>
    11b0:	b9 3f       	cpi	r27, 0xF9	; 249
    11b2:	cc f3       	brlt	.-14     	; 0x11a6 <__fixunssfsi+0x2e>
    11b4:	86 95       	lsr	r24
    11b6:	77 95       	ror	r23
    11b8:	67 95       	ror	r22
    11ba:	b3 95       	inc	r27
    11bc:	d9 f7       	brne	.-10     	; 0x11b4 <__fixunssfsi+0x3c>
    11be:	3e f4       	brtc	.+14     	; 0x11ce <__fixunssfsi+0x56>
    11c0:	90 95       	com	r25
    11c2:	80 95       	com	r24
    11c4:	70 95       	com	r23
    11c6:	61 95       	neg	r22
    11c8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ca:	8f 4f       	sbci	r24, 0xFF	; 255
    11cc:	9f 4f       	sbci	r25, 0xFF	; 255
    11ce:	08 95       	ret

000011d0 <__floatunsisf>:
    11d0:	e8 94       	clt
    11d2:	09 c0       	rjmp	.+18     	; 0x11e6 <__floatsisf+0x12>

000011d4 <__floatsisf>:
    11d4:	97 fb       	bst	r25, 7
    11d6:	3e f4       	brtc	.+14     	; 0x11e6 <__floatsisf+0x12>
    11d8:	90 95       	com	r25
    11da:	80 95       	com	r24
    11dc:	70 95       	com	r23
    11de:	61 95       	neg	r22
    11e0:	7f 4f       	sbci	r23, 0xFF	; 255
    11e2:	8f 4f       	sbci	r24, 0xFF	; 255
    11e4:	9f 4f       	sbci	r25, 0xFF	; 255
    11e6:	99 23       	and	r25, r25
    11e8:	a9 f0       	breq	.+42     	; 0x1214 <__floatsisf+0x40>
    11ea:	f9 2f       	mov	r31, r25
    11ec:	96 e9       	ldi	r25, 0x96	; 150
    11ee:	bb 27       	eor	r27, r27
    11f0:	93 95       	inc	r25
    11f2:	f6 95       	lsr	r31
    11f4:	87 95       	ror	r24
    11f6:	77 95       	ror	r23
    11f8:	67 95       	ror	r22
    11fa:	b7 95       	ror	r27
    11fc:	f1 11       	cpse	r31, r1
    11fe:	f8 cf       	rjmp	.-16     	; 0x11f0 <__floatsisf+0x1c>
    1200:	fa f4       	brpl	.+62     	; 0x1240 <__floatsisf+0x6c>
    1202:	bb 0f       	add	r27, r27
    1204:	11 f4       	brne	.+4      	; 0x120a <__floatsisf+0x36>
    1206:	60 ff       	sbrs	r22, 0
    1208:	1b c0       	rjmp	.+54     	; 0x1240 <__floatsisf+0x6c>
    120a:	6f 5f       	subi	r22, 0xFF	; 255
    120c:	7f 4f       	sbci	r23, 0xFF	; 255
    120e:	8f 4f       	sbci	r24, 0xFF	; 255
    1210:	9f 4f       	sbci	r25, 0xFF	; 255
    1212:	16 c0       	rjmp	.+44     	; 0x1240 <__floatsisf+0x6c>
    1214:	88 23       	and	r24, r24
    1216:	11 f0       	breq	.+4      	; 0x121c <__floatsisf+0x48>
    1218:	96 e9       	ldi	r25, 0x96	; 150
    121a:	11 c0       	rjmp	.+34     	; 0x123e <__floatsisf+0x6a>
    121c:	77 23       	and	r23, r23
    121e:	21 f0       	breq	.+8      	; 0x1228 <__floatsisf+0x54>
    1220:	9e e8       	ldi	r25, 0x8E	; 142
    1222:	87 2f       	mov	r24, r23
    1224:	76 2f       	mov	r23, r22
    1226:	05 c0       	rjmp	.+10     	; 0x1232 <__floatsisf+0x5e>
    1228:	66 23       	and	r22, r22
    122a:	71 f0       	breq	.+28     	; 0x1248 <__floatsisf+0x74>
    122c:	96 e8       	ldi	r25, 0x86	; 134
    122e:	86 2f       	mov	r24, r22
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	2a f0       	brmi	.+10     	; 0x1240 <__floatsisf+0x6c>
    1236:	9a 95       	dec	r25
    1238:	66 0f       	add	r22, r22
    123a:	77 1f       	adc	r23, r23
    123c:	88 1f       	adc	r24, r24
    123e:	da f7       	brpl	.-10     	; 0x1236 <__floatsisf+0x62>
    1240:	88 0f       	add	r24, r24
    1242:	96 95       	lsr	r25
    1244:	87 95       	ror	r24
    1246:	97 f9       	bld	r25, 7
    1248:	08 95       	ret

0000124a <__fp_cmp>:
    124a:	99 0f       	add	r25, r25
    124c:	00 08       	sbc	r0, r0
    124e:	55 0f       	add	r21, r21
    1250:	aa 0b       	sbc	r26, r26
    1252:	e0 e8       	ldi	r30, 0x80	; 128
    1254:	fe ef       	ldi	r31, 0xFE	; 254
    1256:	16 16       	cp	r1, r22
    1258:	17 06       	cpc	r1, r23
    125a:	e8 07       	cpc	r30, r24
    125c:	f9 07       	cpc	r31, r25
    125e:	c0 f0       	brcs	.+48     	; 0x1290 <__fp_cmp+0x46>
    1260:	12 16       	cp	r1, r18
    1262:	13 06       	cpc	r1, r19
    1264:	e4 07       	cpc	r30, r20
    1266:	f5 07       	cpc	r31, r21
    1268:	98 f0       	brcs	.+38     	; 0x1290 <__fp_cmp+0x46>
    126a:	62 1b       	sub	r22, r18
    126c:	73 0b       	sbc	r23, r19
    126e:	84 0b       	sbc	r24, r20
    1270:	95 0b       	sbc	r25, r21
    1272:	39 f4       	brne	.+14     	; 0x1282 <__fp_cmp+0x38>
    1274:	0a 26       	eor	r0, r26
    1276:	61 f0       	breq	.+24     	; 0x1290 <__fp_cmp+0x46>
    1278:	23 2b       	or	r18, r19
    127a:	24 2b       	or	r18, r20
    127c:	25 2b       	or	r18, r21
    127e:	21 f4       	brne	.+8      	; 0x1288 <__fp_cmp+0x3e>
    1280:	08 95       	ret
    1282:	0a 26       	eor	r0, r26
    1284:	09 f4       	brne	.+2      	; 0x1288 <__fp_cmp+0x3e>
    1286:	a1 40       	sbci	r26, 0x01	; 1
    1288:	a6 95       	lsr	r26
    128a:	8f ef       	ldi	r24, 0xFF	; 255
    128c:	81 1d       	adc	r24, r1
    128e:	81 1d       	adc	r24, r1
    1290:	08 95       	ret

00001292 <__fp_inf>:
    1292:	97 f9       	bld	r25, 7
    1294:	9f 67       	ori	r25, 0x7F	; 127
    1296:	80 e8       	ldi	r24, 0x80	; 128
    1298:	70 e0       	ldi	r23, 0x00	; 0
    129a:	60 e0       	ldi	r22, 0x00	; 0
    129c:	08 95       	ret

0000129e <__fp_nan>:
    129e:	9f ef       	ldi	r25, 0xFF	; 255
    12a0:	80 ec       	ldi	r24, 0xC0	; 192
    12a2:	08 95       	ret

000012a4 <__fp_pscA>:
    12a4:	00 24       	eor	r0, r0
    12a6:	0a 94       	dec	r0
    12a8:	16 16       	cp	r1, r22
    12aa:	17 06       	cpc	r1, r23
    12ac:	18 06       	cpc	r1, r24
    12ae:	09 06       	cpc	r0, r25
    12b0:	08 95       	ret

000012b2 <__fp_pscB>:
    12b2:	00 24       	eor	r0, r0
    12b4:	0a 94       	dec	r0
    12b6:	12 16       	cp	r1, r18
    12b8:	13 06       	cpc	r1, r19
    12ba:	14 06       	cpc	r1, r20
    12bc:	05 06       	cpc	r0, r21
    12be:	08 95       	ret

000012c0 <__fp_round>:
    12c0:	09 2e       	mov	r0, r25
    12c2:	03 94       	inc	r0
    12c4:	00 0c       	add	r0, r0
    12c6:	11 f4       	brne	.+4      	; 0x12cc <__fp_round+0xc>
    12c8:	88 23       	and	r24, r24
    12ca:	52 f0       	brmi	.+20     	; 0x12e0 <__fp_round+0x20>
    12cc:	bb 0f       	add	r27, r27
    12ce:	40 f4       	brcc	.+16     	; 0x12e0 <__fp_round+0x20>
    12d0:	bf 2b       	or	r27, r31
    12d2:	11 f4       	brne	.+4      	; 0x12d8 <__fp_round+0x18>
    12d4:	60 ff       	sbrs	r22, 0
    12d6:	04 c0       	rjmp	.+8      	; 0x12e0 <__fp_round+0x20>
    12d8:	6f 5f       	subi	r22, 0xFF	; 255
    12da:	7f 4f       	sbci	r23, 0xFF	; 255
    12dc:	8f 4f       	sbci	r24, 0xFF	; 255
    12de:	9f 4f       	sbci	r25, 0xFF	; 255
    12e0:	08 95       	ret

000012e2 <__fp_split3>:
    12e2:	57 fd       	sbrc	r21, 7
    12e4:	90 58       	subi	r25, 0x80	; 128
    12e6:	44 0f       	add	r20, r20
    12e8:	55 1f       	adc	r21, r21
    12ea:	59 f0       	breq	.+22     	; 0x1302 <__fp_splitA+0x10>
    12ec:	5f 3f       	cpi	r21, 0xFF	; 255
    12ee:	71 f0       	breq	.+28     	; 0x130c <__fp_splitA+0x1a>
    12f0:	47 95       	ror	r20

000012f2 <__fp_splitA>:
    12f2:	88 0f       	add	r24, r24
    12f4:	97 fb       	bst	r25, 7
    12f6:	99 1f       	adc	r25, r25
    12f8:	61 f0       	breq	.+24     	; 0x1312 <__fp_splitA+0x20>
    12fa:	9f 3f       	cpi	r25, 0xFF	; 255
    12fc:	79 f0       	breq	.+30     	; 0x131c <__fp_splitA+0x2a>
    12fe:	87 95       	ror	r24
    1300:	08 95       	ret
    1302:	12 16       	cp	r1, r18
    1304:	13 06       	cpc	r1, r19
    1306:	14 06       	cpc	r1, r20
    1308:	55 1f       	adc	r21, r21
    130a:	f2 cf       	rjmp	.-28     	; 0x12f0 <__fp_split3+0xe>
    130c:	46 95       	lsr	r20
    130e:	f1 df       	rcall	.-30     	; 0x12f2 <__fp_splitA>
    1310:	08 c0       	rjmp	.+16     	; 0x1322 <__fp_splitA+0x30>
    1312:	16 16       	cp	r1, r22
    1314:	17 06       	cpc	r1, r23
    1316:	18 06       	cpc	r1, r24
    1318:	99 1f       	adc	r25, r25
    131a:	f1 cf       	rjmp	.-30     	; 0x12fe <__fp_splitA+0xc>
    131c:	86 95       	lsr	r24
    131e:	71 05       	cpc	r23, r1
    1320:	61 05       	cpc	r22, r1
    1322:	08 94       	sec
    1324:	08 95       	ret

00001326 <__fp_zero>:
    1326:	e8 94       	clt

00001328 <__fp_szero>:
    1328:	bb 27       	eor	r27, r27
    132a:	66 27       	eor	r22, r22
    132c:	77 27       	eor	r23, r23
    132e:	cb 01       	movw	r24, r22
    1330:	97 f9       	bld	r25, 7
    1332:	08 95       	ret

00001334 <__gesf2>:
    1334:	8a df       	rcall	.-236    	; 0x124a <__fp_cmp>
    1336:	08 f4       	brcc	.+2      	; 0x133a <__gesf2+0x6>
    1338:	8f ef       	ldi	r24, 0xFF	; 255
    133a:	08 95       	ret

0000133c <__mulsf3>:
    133c:	0b d0       	rcall	.+22     	; 0x1354 <__mulsf3x>
    133e:	c0 cf       	rjmp	.-128    	; 0x12c0 <__fp_round>
    1340:	b1 df       	rcall	.-158    	; 0x12a4 <__fp_pscA>
    1342:	28 f0       	brcs	.+10     	; 0x134e <__mulsf3+0x12>
    1344:	b6 df       	rcall	.-148    	; 0x12b2 <__fp_pscB>
    1346:	18 f0       	brcs	.+6      	; 0x134e <__mulsf3+0x12>
    1348:	95 23       	and	r25, r21
    134a:	09 f0       	breq	.+2      	; 0x134e <__mulsf3+0x12>
    134c:	a2 cf       	rjmp	.-188    	; 0x1292 <__fp_inf>
    134e:	a7 cf       	rjmp	.-178    	; 0x129e <__fp_nan>
    1350:	11 24       	eor	r1, r1
    1352:	ea cf       	rjmp	.-44     	; 0x1328 <__fp_szero>

00001354 <__mulsf3x>:
    1354:	c6 df       	rcall	.-116    	; 0x12e2 <__fp_split3>
    1356:	a0 f3       	brcs	.-24     	; 0x1340 <__mulsf3+0x4>

00001358 <__mulsf3_pse>:
    1358:	95 9f       	mul	r25, r21
    135a:	d1 f3       	breq	.-12     	; 0x1350 <__mulsf3+0x14>
    135c:	95 0f       	add	r25, r21
    135e:	50 e0       	ldi	r21, 0x00	; 0
    1360:	55 1f       	adc	r21, r21
    1362:	62 9f       	mul	r22, r18
    1364:	f0 01       	movw	r30, r0
    1366:	72 9f       	mul	r23, r18
    1368:	bb 27       	eor	r27, r27
    136a:	f0 0d       	add	r31, r0
    136c:	b1 1d       	adc	r27, r1
    136e:	63 9f       	mul	r22, r19
    1370:	aa 27       	eor	r26, r26
    1372:	f0 0d       	add	r31, r0
    1374:	b1 1d       	adc	r27, r1
    1376:	aa 1f       	adc	r26, r26
    1378:	64 9f       	mul	r22, r20
    137a:	66 27       	eor	r22, r22
    137c:	b0 0d       	add	r27, r0
    137e:	a1 1d       	adc	r26, r1
    1380:	66 1f       	adc	r22, r22
    1382:	82 9f       	mul	r24, r18
    1384:	22 27       	eor	r18, r18
    1386:	b0 0d       	add	r27, r0
    1388:	a1 1d       	adc	r26, r1
    138a:	62 1f       	adc	r22, r18
    138c:	73 9f       	mul	r23, r19
    138e:	b0 0d       	add	r27, r0
    1390:	a1 1d       	adc	r26, r1
    1392:	62 1f       	adc	r22, r18
    1394:	83 9f       	mul	r24, r19
    1396:	a0 0d       	add	r26, r0
    1398:	61 1d       	adc	r22, r1
    139a:	22 1f       	adc	r18, r18
    139c:	74 9f       	mul	r23, r20
    139e:	33 27       	eor	r19, r19
    13a0:	a0 0d       	add	r26, r0
    13a2:	61 1d       	adc	r22, r1
    13a4:	23 1f       	adc	r18, r19
    13a6:	84 9f       	mul	r24, r20
    13a8:	60 0d       	add	r22, r0
    13aa:	21 1d       	adc	r18, r1
    13ac:	82 2f       	mov	r24, r18
    13ae:	76 2f       	mov	r23, r22
    13b0:	6a 2f       	mov	r22, r26
    13b2:	11 24       	eor	r1, r1
    13b4:	9f 57       	subi	r25, 0x7F	; 127
    13b6:	50 40       	sbci	r21, 0x00	; 0
    13b8:	8a f0       	brmi	.+34     	; 0x13dc <__mulsf3_pse+0x84>
    13ba:	e1 f0       	breq	.+56     	; 0x13f4 <__mulsf3_pse+0x9c>
    13bc:	88 23       	and	r24, r24
    13be:	4a f0       	brmi	.+18     	; 0x13d2 <__mulsf3_pse+0x7a>
    13c0:	ee 0f       	add	r30, r30
    13c2:	ff 1f       	adc	r31, r31
    13c4:	bb 1f       	adc	r27, r27
    13c6:	66 1f       	adc	r22, r22
    13c8:	77 1f       	adc	r23, r23
    13ca:	88 1f       	adc	r24, r24
    13cc:	91 50       	subi	r25, 0x01	; 1
    13ce:	50 40       	sbci	r21, 0x00	; 0
    13d0:	a9 f7       	brne	.-22     	; 0x13bc <__mulsf3_pse+0x64>
    13d2:	9e 3f       	cpi	r25, 0xFE	; 254
    13d4:	51 05       	cpc	r21, r1
    13d6:	70 f0       	brcs	.+28     	; 0x13f4 <__mulsf3_pse+0x9c>
    13d8:	5c cf       	rjmp	.-328    	; 0x1292 <__fp_inf>
    13da:	a6 cf       	rjmp	.-180    	; 0x1328 <__fp_szero>
    13dc:	5f 3f       	cpi	r21, 0xFF	; 255
    13de:	ec f3       	brlt	.-6      	; 0x13da <__mulsf3_pse+0x82>
    13e0:	98 3e       	cpi	r25, 0xE8	; 232
    13e2:	dc f3       	brlt	.-10     	; 0x13da <__mulsf3_pse+0x82>
    13e4:	86 95       	lsr	r24
    13e6:	77 95       	ror	r23
    13e8:	67 95       	ror	r22
    13ea:	b7 95       	ror	r27
    13ec:	f7 95       	ror	r31
    13ee:	e7 95       	ror	r30
    13f0:	9f 5f       	subi	r25, 0xFF	; 255
    13f2:	c1 f7       	brne	.-16     	; 0x13e4 <__mulsf3_pse+0x8c>
    13f4:	fe 2b       	or	r31, r30
    13f6:	88 0f       	add	r24, r24
    13f8:	91 1d       	adc	r25, r1
    13fa:	96 95       	lsr	r25
    13fc:	87 95       	ror	r24
    13fe:	97 f9       	bld	r25, 7
    1400:	08 95       	ret
    1402:	11 f4       	brne	.+4      	; 0x1408 <__mulsf3_pse+0xb0>
    1404:	0e f4       	brtc	.+2      	; 0x1408 <__mulsf3_pse+0xb0>
    1406:	4b cf       	rjmp	.-362    	; 0x129e <__fp_nan>
    1408:	3e c0       	rjmp	.+124    	; 0x1486 <__fp_mpack>

0000140a <sqrt>:
    140a:	73 df       	rcall	.-282    	; 0x12f2 <__fp_splitA>
    140c:	d0 f3       	brcs	.-12     	; 0x1402 <__mulsf3_pse+0xaa>
    140e:	99 23       	and	r25, r25
    1410:	d9 f3       	breq	.-10     	; 0x1408 <__mulsf3_pse+0xb0>
    1412:	ce f3       	brts	.-14     	; 0x1406 <__mulsf3_pse+0xae>
    1414:	9f 57       	subi	r25, 0x7F	; 127
    1416:	55 0b       	sbc	r21, r21
    1418:	87 ff       	sbrs	r24, 7
    141a:	43 d0       	rcall	.+134    	; 0x14a2 <__fp_norm2>
    141c:	00 24       	eor	r0, r0
    141e:	a0 e6       	ldi	r26, 0x60	; 96
    1420:	40 ea       	ldi	r20, 0xA0	; 160
    1422:	90 01       	movw	r18, r0
    1424:	80 58       	subi	r24, 0x80	; 128
    1426:	56 95       	lsr	r21
    1428:	97 95       	ror	r25
    142a:	28 f4       	brcc	.+10     	; 0x1436 <sqrt+0x2c>
    142c:	80 5c       	subi	r24, 0xC0	; 192
    142e:	66 0f       	add	r22, r22
    1430:	77 1f       	adc	r23, r23
    1432:	88 1f       	adc	r24, r24
    1434:	20 f0       	brcs	.+8      	; 0x143e <sqrt+0x34>
    1436:	26 17       	cp	r18, r22
    1438:	37 07       	cpc	r19, r23
    143a:	48 07       	cpc	r20, r24
    143c:	30 f4       	brcc	.+12     	; 0x144a <sqrt+0x40>
    143e:	62 1b       	sub	r22, r18
    1440:	73 0b       	sbc	r23, r19
    1442:	84 0b       	sbc	r24, r20
    1444:	20 29       	or	r18, r0
    1446:	31 29       	or	r19, r1
    1448:	4a 2b       	or	r20, r26
    144a:	a6 95       	lsr	r26
    144c:	17 94       	ror	r1
    144e:	07 94       	ror	r0
    1450:	20 25       	eor	r18, r0
    1452:	31 25       	eor	r19, r1
    1454:	4a 27       	eor	r20, r26
    1456:	58 f7       	brcc	.-42     	; 0x142e <sqrt+0x24>
    1458:	66 0f       	add	r22, r22
    145a:	77 1f       	adc	r23, r23
    145c:	88 1f       	adc	r24, r24
    145e:	20 f0       	brcs	.+8      	; 0x1468 <sqrt+0x5e>
    1460:	26 17       	cp	r18, r22
    1462:	37 07       	cpc	r19, r23
    1464:	48 07       	cpc	r20, r24
    1466:	30 f4       	brcc	.+12     	; 0x1474 <sqrt+0x6a>
    1468:	62 0b       	sbc	r22, r18
    146a:	73 0b       	sbc	r23, r19
    146c:	84 0b       	sbc	r24, r20
    146e:	20 0d       	add	r18, r0
    1470:	31 1d       	adc	r19, r1
    1472:	41 1d       	adc	r20, r1
    1474:	a0 95       	com	r26
    1476:	81 f7       	brne	.-32     	; 0x1458 <sqrt+0x4e>
    1478:	b9 01       	movw	r22, r18
    147a:	84 2f       	mov	r24, r20
    147c:	91 58       	subi	r25, 0x81	; 129
    147e:	88 0f       	add	r24, r24
    1480:	96 95       	lsr	r25
    1482:	87 95       	ror	r24
    1484:	08 95       	ret

00001486 <__fp_mpack>:
    1486:	9f 3f       	cpi	r25, 0xFF	; 255
    1488:	31 f0       	breq	.+12     	; 0x1496 <__fp_mpack_finite+0xc>

0000148a <__fp_mpack_finite>:
    148a:	91 50       	subi	r25, 0x01	; 1
    148c:	20 f4       	brcc	.+8      	; 0x1496 <__fp_mpack_finite+0xc>
    148e:	87 95       	ror	r24
    1490:	77 95       	ror	r23
    1492:	67 95       	ror	r22
    1494:	b7 95       	ror	r27
    1496:	88 0f       	add	r24, r24
    1498:	91 1d       	adc	r25, r1
    149a:	96 95       	lsr	r25
    149c:	87 95       	ror	r24
    149e:	97 f9       	bld	r25, 7
    14a0:	08 95       	ret

000014a2 <__fp_norm2>:
    14a2:	91 50       	subi	r25, 0x01	; 1
    14a4:	50 40       	sbci	r21, 0x00	; 0
    14a6:	66 0f       	add	r22, r22
    14a8:	77 1f       	adc	r23, r23
    14aa:	88 1f       	adc	r24, r24
    14ac:	d2 f7       	brpl	.-12     	; 0x14a2 <__fp_norm2>
    14ae:	08 95       	ret

000014b0 <__divmodhi4>:
    14b0:	97 fb       	bst	r25, 7
    14b2:	07 2e       	mov	r0, r23
    14b4:	16 f4       	brtc	.+4      	; 0x14ba <__divmodhi4+0xa>
    14b6:	00 94       	com	r0
    14b8:	06 d0       	rcall	.+12     	; 0x14c6 <__divmodhi4_neg1>
    14ba:	77 fd       	sbrc	r23, 7
    14bc:	08 d0       	rcall	.+16     	; 0x14ce <__divmodhi4_neg2>
    14be:	0b d0       	rcall	.+22     	; 0x14d6 <__udivmodhi4>
    14c0:	07 fc       	sbrc	r0, 7
    14c2:	05 d0       	rcall	.+10     	; 0x14ce <__divmodhi4_neg2>
    14c4:	3e f4       	brtc	.+14     	; 0x14d4 <__divmodhi4_exit>

000014c6 <__divmodhi4_neg1>:
    14c6:	90 95       	com	r25
    14c8:	81 95       	neg	r24
    14ca:	9f 4f       	sbci	r25, 0xFF	; 255
    14cc:	08 95       	ret

000014ce <__divmodhi4_neg2>:
    14ce:	70 95       	com	r23
    14d0:	61 95       	neg	r22
    14d2:	7f 4f       	sbci	r23, 0xFF	; 255

000014d4 <__divmodhi4_exit>:
    14d4:	08 95       	ret

000014d6 <__udivmodhi4>:
    14d6:	aa 1b       	sub	r26, r26
    14d8:	bb 1b       	sub	r27, r27
    14da:	51 e1       	ldi	r21, 0x11	; 17
    14dc:	07 c0       	rjmp	.+14     	; 0x14ec <__udivmodhi4_ep>

000014de <__udivmodhi4_loop>:
    14de:	aa 1f       	adc	r26, r26
    14e0:	bb 1f       	adc	r27, r27
    14e2:	a6 17       	cp	r26, r22
    14e4:	b7 07       	cpc	r27, r23
    14e6:	10 f0       	brcs	.+4      	; 0x14ec <__udivmodhi4_ep>
    14e8:	a6 1b       	sub	r26, r22
    14ea:	b7 0b       	sbc	r27, r23

000014ec <__udivmodhi4_ep>:
    14ec:	88 1f       	adc	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	5a 95       	dec	r21
    14f2:	a9 f7       	brne	.-22     	; 0x14de <__udivmodhi4_loop>
    14f4:	80 95       	com	r24
    14f6:	90 95       	com	r25
    14f8:	bc 01       	movw	r22, r24
    14fa:	cd 01       	movw	r24, r26
    14fc:	08 95       	ret

000014fe <__tablejump2__>:
    14fe:	ee 0f       	add	r30, r30
    1500:	ff 1f       	adc	r31, r31
    1502:	05 90       	lpm	r0, Z+
    1504:	f4 91       	lpm	r31, Z
    1506:	e0 2d       	mov	r30, r0
    1508:	09 94       	ijmp

0000150a <_exit>:
    150a:	f8 94       	cli

0000150c <__stop_program>:
    150c:	ff cf       	rjmp	.-2      	; 0x150c <__stop_program>
