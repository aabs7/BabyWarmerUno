
BabyWarmerUno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000012aa  0000133e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  00800104  00800104  00001342  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001342  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001374  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b62  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d9d  00000000  00000000  000051a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001301  00000000  00000000  00005f43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000664  00000000  00000000  00007244  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e78  00000000  00000000  000078a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000137e  00000000  00000000  00008720  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  00009a9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	34 c0       	rjmp	.+104    	; 0x6a <__ctors_end>
       2:	00 00       	nop
       4:	59 c0       	rjmp	.+178    	; 0xb8 <__bad_interrupt>
       6:	00 00       	nop
       8:	57 c0       	rjmp	.+174    	; 0xb8 <__bad_interrupt>
       a:	00 00       	nop
       c:	55 c0       	rjmp	.+170    	; 0xb8 <__bad_interrupt>
       e:	00 00       	nop
      10:	53 c0       	rjmp	.+166    	; 0xb8 <__bad_interrupt>
      12:	00 00       	nop
      14:	51 c0       	rjmp	.+162    	; 0xb8 <__bad_interrupt>
      16:	00 00       	nop
      18:	4f c0       	rjmp	.+158    	; 0xb8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	4d c0       	rjmp	.+154    	; 0xb8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	4b c0       	rjmp	.+150    	; 0xb8 <__bad_interrupt>
      22:	00 00       	nop
      24:	49 c0       	rjmp	.+146    	; 0xb8 <__bad_interrupt>
      26:	00 00       	nop
      28:	47 c0       	rjmp	.+142    	; 0xb8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a9 c0       	rjmp	.+338    	; 0x180 <__vector_11>
      2e:	00 00       	nop
      30:	43 c0       	rjmp	.+134    	; 0xb8 <__bad_interrupt>
      32:	00 00       	nop
      34:	41 c0       	rjmp	.+130    	; 0xb8 <__bad_interrupt>
      36:	00 00       	nop
      38:	3f c0       	rjmp	.+126    	; 0xb8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	3d c0       	rjmp	.+122    	; 0xb8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3b c0       	rjmp	.+118    	; 0xb8 <__bad_interrupt>
      42:	00 00       	nop
      44:	39 c0       	rjmp	.+114    	; 0xb8 <__bad_interrupt>
      46:	00 00       	nop
      48:	37 c0       	rjmp	.+110    	; 0xb8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	35 c0       	rjmp	.+106    	; 0xb8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	33 c0       	rjmp	.+102    	; 0xb8 <__bad_interrupt>
      52:	00 00       	nop
      54:	31 c0       	rjmp	.+98     	; 0xb8 <__bad_interrupt>
      56:	00 00       	nop
      58:	2f c0       	rjmp	.+94     	; 0xb8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	2d c0       	rjmp	.+90     	; 0xb8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2b c0       	rjmp	.+86     	; 0xb8 <__bad_interrupt>
      62:	00 00       	nop
      64:	29 c0       	rjmp	.+82     	; 0xb8 <__bad_interrupt>
	...

00000068 <__ctors_start>:
      68:	dc 03       	fmulsu	r21, r20

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	ea ea       	ldi	r30, 0xAA	; 170
      7e:	f2 e1       	ldi	r31, 0x12	; 18
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	a4 30       	cpi	r26, 0x04	; 4
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	21 e0       	ldi	r18, 0x01	; 1
      8e:	a4 e0       	ldi	r26, 0x04	; 4
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	a4 33       	cpi	r26, 0x34	; 52
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	c5 e3       	ldi	r28, 0x35	; 53
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	21 97       	sbiw	r28, 0x01	; 1
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 4d 09 	call	0x129a	; 0x129a <__tablejump2__>
      ac:	c4 33       	cpi	r28, 0x34	; 52
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	ea d2       	rcall	.+1492   	; 0x688 <main>
      b4:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <_exit>

000000b8 <__bad_interrupt>:
      b8:	a3 cf       	rjmp	.-186    	; 0x0 <__vectors>

000000ba <_Z12init_devicesv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ba:	78 94       	sei
      bc:	8a e0       	ldi	r24, 0x0A	; 10
      be:	91 e0       	ldi	r25, 0x01	; 1
      c0:	98 d3       	rcall	.+1840   	; 0x7f2 <_ZN3led8led_initEv>
      c2:	8d e2       	ldi	r24, 0x2D	; 45
      c4:	91 e0       	ldi	r25, 0x01	; 1
      c6:	89 d3       	rcall	.+1810   	; 0x7da <_ZN8Controls12initControlsEv>
      c8:	8a e0       	ldi	r24, 0x0A	; 10
      ca:	91 e0       	ldi	r25, 0x01	; 1
      cc:	92 d3       	rcall	.+1828   	; 0x7f2 <_ZN3led8led_initEv>
      ce:	61 e0       	ldi	r22, 0x01	; 1
      d0:	70 e0       	ldi	r23, 0x00	; 0
      d2:	8f e2       	ldi	r24, 0x2F	; 47
      d4:	91 e0       	ldi	r25, 0x01	; 1
      d6:	1d d6       	rcall	.+3130   	; 0xd12 <_ZN6Timerr11setTimerNumEi>
      d8:	8f e2       	ldi	r24, 0x2F	; 47
      da:	91 e0       	ldi	r25, 0x01	; 1
      dc:	1e d6       	rcall	.+3132   	; 0xd1a <_ZN6Timerr19setCompareInterruptEv>
      de:	68 ee       	ldi	r22, 0xE8	; 232
      e0:	73 e0       	ldi	r23, 0x03	; 3
      e2:	8f e2       	ldi	r24, 0x2F	; 47
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	1f d6       	rcall	.+3134   	; 0xd26 <_ZN6Timerr16startCustomTimerEi>
      e8:	81 e1       	ldi	r24, 0x11	; 17
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	d6 d5       	rcall	.+2988   	; 0xc9a <_ZN7max721912MAX7219_initEv>
      ee:	24 e0       	ldi	r18, 0x04	; 4
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	44 e0       	ldi	r20, 0x04	; 4
      f4:	50 e0       	ldi	r21, 0x00	; 0
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	70 e0       	ldi	r23, 0x00	; 0
      fa:	81 e1       	ldi	r24, 0x11	; 17
      fc:	91 e0       	ldi	r25, 0x01	; 1
      fe:	a2 d5       	rcall	.+2884   	; 0xc44 <_ZN7max721911MAX7219_setEiii>
     100:	8f e3       	ldi	r24, 0x3F	; 63
     102:	9c e9       	ldi	r25, 0x9C	; 156
     104:	01 97       	sbiw	r24, 0x01	; 1
     106:	f1 f7       	brne	.-4      	; 0x104 <_Z12init_devicesv+0x4a>
     108:	00 c0       	rjmp	.+0      	; 0x10a <_Z12init_devicesv+0x50>
     10a:	00 00       	nop
     10c:	24 e0       	ldi	r18, 0x04	; 4
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	44 e0       	ldi	r20, 0x04	; 4
     112:	50 e0       	ldi	r21, 0x00	; 0
     114:	61 e0       	ldi	r22, 0x01	; 1
     116:	70 e0       	ldi	r23, 0x00	; 0
     118:	8b e0       	ldi	r24, 0x0B	; 11
     11a:	91 e0       	ldi	r25, 0x01	; 1
     11c:	93 d5       	rcall	.+2854   	; 0xc44 <_ZN7max721911MAX7219_setEiii>
     11e:	8f e3       	ldi	r24, 0x3F	; 63
     120:	9c e9       	ldi	r25, 0x9C	; 156
     122:	01 97       	sbiw	r24, 0x01	; 1
     124:	f1 f7       	brne	.-4      	; 0x122 <_Z12init_devicesv+0x68>
     126:	00 c0       	rjmp	.+0      	; 0x128 <_Z12init_devicesv+0x6e>
     128:	00 00       	nop
     12a:	81 e1       	ldi	r24, 0x11	; 17
     12c:	91 e0       	ldi	r25, 0x01	; 1
     12e:	b5 d5       	rcall	.+2922   	; 0xc9a <_ZN7max721912MAX7219_initEv>
     130:	8f e3       	ldi	r24, 0x3F	; 63
     132:	9c e9       	ldi	r25, 0x9C	; 156
     134:	01 97       	sbiw	r24, 0x01	; 1
     136:	f1 f7       	brne	.-4      	; 0x134 <_Z12init_devicesv+0x7a>
     138:	00 c0       	rjmp	.+0      	; 0x13a <_Z12init_devicesv+0x80>
     13a:	00 00       	nop
     13c:	8b e0       	ldi	r24, 0x0B	; 11
     13e:	91 e0       	ldi	r25, 0x01	; 1
     140:	ac d5       	rcall	.+2904   	; 0xc9a <_ZN7max721912MAX7219_initEv>
     142:	8f e3       	ldi	r24, 0x3F	; 63
     144:	9c e9       	ldi	r25, 0x9C	; 156
     146:	01 97       	sbiw	r24, 0x01	; 1
     148:	f1 f7       	brne	.-4      	; 0x146 <_Z12init_devicesv+0x8c>
     14a:	00 c0       	rjmp	.+0      	; 0x14c <_Z12init_devicesv+0x92>
     14c:	00 00       	nop
     14e:	81 e1       	ldi	r24, 0x11	; 17
     150:	91 e0       	ldi	r25, 0x01	; 1
     152:	be d5       	rcall	.+2940   	; 0xcd0 <_ZN7max721920MAX7219_clearDisplayEv>
     154:	9f ef       	ldi	r25, 0xFF	; 255
     156:	26 e7       	ldi	r18, 0x76	; 118
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	91 50       	subi	r25, 0x01	; 1
     15c:	20 40       	sbci	r18, 0x00	; 0
     15e:	80 40       	sbci	r24, 0x00	; 0
     160:	e1 f7       	brne	.-8      	; 0x15a <_Z12init_devicesv+0xa0>
     162:	00 c0       	rjmp	.+0      	; 0x164 <_Z12init_devicesv+0xaa>
     164:	00 00       	nop
     166:	8b e0       	ldi	r24, 0x0B	; 11
     168:	91 e0       	ldi	r25, 0x01	; 1
     16a:	b2 d5       	rcall	.+2916   	; 0xcd0 <_ZN7max721920MAX7219_clearDisplayEv>
     16c:	9f ef       	ldi	r25, 0xFF	; 255
     16e:	26 e7       	ldi	r18, 0x76	; 118
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	91 50       	subi	r25, 0x01	; 1
     174:	20 40       	sbci	r18, 0x00	; 0
     176:	80 40       	sbci	r24, 0x00	; 0
     178:	e1 f7       	brne	.-8      	; 0x172 <_Z12init_devicesv+0xb8>
     17a:	00 c0       	rjmp	.+0      	; 0x17c <_Z12init_devicesv+0xc2>
     17c:	00 00       	nop
     17e:	08 95       	ret

00000180 <__vector_11>:
     180:	1f 92       	push	r1
     182:	0f 92       	push	r0
     184:	0f b6       	in	r0, 0x3f	; 63
     186:	0f 92       	push	r0
     188:	11 24       	eor	r1, r1
     18a:	8f 93       	push	r24
     18c:	9f 93       	push	r25
     18e:	10 92 85 00 	sts	0x0085, r1
     192:	10 92 84 00 	sts	0x0084, r1
     196:	80 91 33 01 	lds	r24, 0x0133
     19a:	88 23       	and	r24, r24
     19c:	49 f0       	breq	.+18     	; 0x1b0 <__vector_11+0x30>
     19e:	80 91 31 01 	lds	r24, 0x0131
     1a2:	90 91 32 01 	lds	r25, 0x0132
     1a6:	01 96       	adiw	r24, 0x01	; 1
     1a8:	90 93 32 01 	sts	0x0132, r25
     1ac:	80 93 31 01 	sts	0x0131, r24
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	80 93 2e 01 	sts	0x012E, r24
     1b6:	9f 91       	pop	r25
     1b8:	8f 91       	pop	r24
     1ba:	0f 90       	pop	r0
     1bc:	0f be       	out	0x3f, r0	; 63
     1be:	0f 90       	pop	r0
     1c0:	1f 90       	pop	r1
     1c2:	18 95       	reti

000001c4 <_Z13sendToDisplayfff>:
     1c4:	4f 92       	push	r4
     1c6:	5f 92       	push	r5
     1c8:	6f 92       	push	r6
     1ca:	7f 92       	push	r7
     1cc:	8f 92       	push	r8
     1ce:	9f 92       	push	r9
     1d0:	af 92       	push	r10
     1d2:	bf 92       	push	r11
     1d4:	cf 92       	push	r12
     1d6:	df 92       	push	r13
     1d8:	ef 92       	push	r14
     1da:	ff 92       	push	r15
     1dc:	0f 93       	push	r16
     1de:	1f 93       	push	r17
     1e0:	cf 93       	push	r28
     1e2:	df 93       	push	r29
     1e4:	2b 01       	movw	r4, r22
     1e6:	3c 01       	movw	r6, r24
     1e8:	49 01       	movw	r8, r18
     1ea:	5a 01       	movw	r10, r20
     1ec:	67 01       	movw	r12, r14
     1ee:	78 01       	movw	r14, r16
     1f0:	4f ef       	ldi	r20, 0xFF	; 255
     1f2:	69 e0       	ldi	r22, 0x09	; 9
     1f4:	81 e1       	ldi	r24, 0x11	; 17
     1f6:	91 e0       	ldi	r25, 0x01	; 1
     1f8:	2d d5       	rcall	.+2650   	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
     1fa:	4f ef       	ldi	r20, 0xFF	; 255
     1fc:	69 e0       	ldi	r22, 0x09	; 9
     1fe:	8b e0       	ldi	r24, 0x0B	; 11
     200:	91 e0       	ldi	r25, 0x01	; 1
     202:	28 d5       	rcall	.+2640   	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
     204:	40 e0       	ldi	r20, 0x00	; 0
     206:	64 e0       	ldi	r22, 0x04	; 4
     208:	81 e1       	ldi	r24, 0x11	; 17
     20a:	91 e0       	ldi	r25, 0x01	; 1
     20c:	23 d5       	rcall	.+2630   	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	40 e2       	ldi	r20, 0x20	; 32
     214:	51 e4       	ldi	r21, 0x41	; 65
     216:	c3 01       	movw	r24, r6
     218:	b2 01       	movw	r22, r4
     21a:	0f d6       	rcall	.+3102   	; 0xe3a <__divsf3>
     21c:	7b d6       	rcall	.+3318   	; 0xf14 <__fixunssfsi>
     21e:	46 2f       	mov	r20, r22
     220:	68 e0       	ldi	r22, 0x08	; 8
     222:	81 e1       	ldi	r24, 0x11	; 17
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	16 d5       	rcall	.+2604   	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
     228:	c3 01       	movw	r24, r6
     22a:	b2 01       	movw	r22, r4
     22c:	6e d6       	rcall	.+3292   	; 0xf0a <__fixsfsi>
     22e:	ca e0       	ldi	r28, 0x0A	; 10
     230:	d0 e0       	ldi	r29, 0x00	; 0
     232:	cb 01       	movw	r24, r22
     234:	be 01       	movw	r22, r28
     236:	0e 94 26 09 	call	0x124c	; 0x124c <__divmodhi4>
     23a:	48 2f       	mov	r20, r24
     23c:	40 68       	ori	r20, 0x80	; 128
     23e:	66 e0       	ldi	r22, 0x06	; 6
     240:	81 e1       	ldi	r24, 0x11	; 17
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	07 d5       	rcall	.+2574   	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	40 e2       	ldi	r20, 0x20	; 32
     24c:	51 e4       	ldi	r21, 0x41	; 65
     24e:	c3 01       	movw	r24, r6
     250:	b2 01       	movw	r22, r4
     252:	42 d7       	rcall	.+3716   	; 0x10d8 <__mulsf3>
     254:	5a d6       	rcall	.+3252   	; 0xf0a <__fixsfsi>
     256:	cb 01       	movw	r24, r22
     258:	be 01       	movw	r22, r28
     25a:	f8 d7       	rcall	.+4080   	; 0x124c <__divmodhi4>
     25c:	48 2f       	mov	r20, r24
     25e:	62 e0       	ldi	r22, 0x02	; 2
     260:	81 e1       	ldi	r24, 0x11	; 17
     262:	91 e0       	ldi	r25, 0x01	; 1
     264:	f7 d4       	rcall	.+2542   	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
     266:	40 e0       	ldi	r20, 0x00	; 0
     268:	63 e0       	ldi	r22, 0x03	; 3
     26a:	81 e1       	ldi	r24, 0x11	; 17
     26c:	91 e0       	ldi	r25, 0x01	; 1
     26e:	f2 d4       	rcall	.+2532   	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
     270:	20 e0       	ldi	r18, 0x00	; 0
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	40 e2       	ldi	r20, 0x20	; 32
     276:	51 e4       	ldi	r21, 0x41	; 65
     278:	c5 01       	movw	r24, r10
     27a:	b4 01       	movw	r22, r8
     27c:	de d5       	rcall	.+3004   	; 0xe3a <__divsf3>
     27e:	4a d6       	rcall	.+3220   	; 0xf14 <__fixunssfsi>
     280:	46 2f       	mov	r20, r22
     282:	67 e0       	ldi	r22, 0x07	; 7
     284:	81 e1       	ldi	r24, 0x11	; 17
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	e5 d4       	rcall	.+2506   	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
     28a:	c5 01       	movw	r24, r10
     28c:	b4 01       	movw	r22, r8
     28e:	3d d6       	rcall	.+3194   	; 0xf0a <__fixsfsi>
     290:	cb 01       	movw	r24, r22
     292:	be 01       	movw	r22, r28
     294:	db d7       	rcall	.+4022   	; 0x124c <__divmodhi4>
     296:	48 2f       	mov	r20, r24
     298:	40 68       	ori	r20, 0x80	; 128
     29a:	65 e0       	ldi	r22, 0x05	; 5
     29c:	81 e1       	ldi	r24, 0x11	; 17
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	d9 d4       	rcall	.+2482   	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
     2a2:	20 e0       	ldi	r18, 0x00	; 0
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	40 e2       	ldi	r20, 0x20	; 32
     2a8:	51 e4       	ldi	r21, 0x41	; 65
     2aa:	c5 01       	movw	r24, r10
     2ac:	b4 01       	movw	r22, r8
     2ae:	14 d7       	rcall	.+3624   	; 0x10d8 <__mulsf3>
     2b0:	2c d6       	rcall	.+3160   	; 0xf0a <__fixsfsi>
     2b2:	cb 01       	movw	r24, r22
     2b4:	be 01       	movw	r22, r28
     2b6:	ca d7       	rcall	.+3988   	; 0x124c <__divmodhi4>
     2b8:	48 2f       	mov	r20, r24
     2ba:	61 e0       	ldi	r22, 0x01	; 1
     2bc:	81 e1       	ldi	r24, 0x11	; 17
     2be:	91 e0       	ldi	r25, 0x01	; 1
     2c0:	c9 d4       	rcall	.+2450   	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
     2c2:	20 e0       	ldi	r18, 0x00	; 0
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	40 e2       	ldi	r20, 0x20	; 32
     2c8:	51 e4       	ldi	r21, 0x41	; 65
     2ca:	c7 01       	movw	r24, r14
     2cc:	b6 01       	movw	r22, r12
     2ce:	b5 d5       	rcall	.+2922   	; 0xe3a <__divsf3>
     2d0:	21 d6       	rcall	.+3138   	; 0xf14 <__fixunssfsi>
     2d2:	46 2f       	mov	r20, r22
     2d4:	66 e0       	ldi	r22, 0x06	; 6
     2d6:	8b e0       	ldi	r24, 0x0B	; 11
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	bc d4       	rcall	.+2424   	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
     2dc:	c7 01       	movw	r24, r14
     2de:	b6 01       	movw	r22, r12
     2e0:	14 d6       	rcall	.+3112   	; 0xf0a <__fixsfsi>
     2e2:	cb 01       	movw	r24, r22
     2e4:	be 01       	movw	r22, r28
     2e6:	b2 d7       	rcall	.+3940   	; 0x124c <__divmodhi4>
     2e8:	48 2f       	mov	r20, r24
     2ea:	40 68       	ori	r20, 0x80	; 128
     2ec:	68 e0       	ldi	r22, 0x08	; 8
     2ee:	8b e0       	ldi	r24, 0x0B	; 11
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	b0 d4       	rcall	.+2400   	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	40 e2       	ldi	r20, 0x20	; 32
     2fa:	51 e4       	ldi	r21, 0x41	; 65
     2fc:	c7 01       	movw	r24, r14
     2fe:	b6 01       	movw	r22, r12
     300:	eb d6       	rcall	.+3542   	; 0x10d8 <__mulsf3>
     302:	03 d6       	rcall	.+3078   	; 0xf0a <__fixsfsi>
     304:	cb 01       	movw	r24, r22
     306:	be 01       	movw	r22, r28
     308:	a1 d7       	rcall	.+3906   	; 0x124c <__divmodhi4>
     30a:	48 2f       	mov	r20, r24
     30c:	62 e0       	ldi	r22, 0x02	; 2
     30e:	8b e0       	ldi	r24, 0x0B	; 11
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	a0 d4       	rcall	.+2368   	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	1f 91       	pop	r17
     31a:	0f 91       	pop	r16
     31c:	ff 90       	pop	r15
     31e:	ef 90       	pop	r14
     320:	df 90       	pop	r13
     322:	cf 90       	pop	r12
     324:	bf 90       	pop	r11
     326:	af 90       	pop	r10
     328:	9f 90       	pop	r9
     32a:	8f 90       	pop	r8
     32c:	7f 90       	pop	r7
     32e:	6f 90       	pop	r6
     330:	5f 90       	pop	r5
     332:	4f 90       	pop	r4
     334:	08 95       	ret

00000336 <_Z18sendToDisplayBelowf>:
     336:	cf 92       	push	r12
     338:	df 92       	push	r13
     33a:	ef 92       	push	r14
     33c:	ff 92       	push	r15
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	6b 01       	movw	r12, r22
     344:	7c 01       	movw	r14, r24
     346:	4f ef       	ldi	r20, 0xFF	; 255
     348:	69 e0       	ldi	r22, 0x09	; 9
     34a:	8b e0       	ldi	r24, 0x0B	; 11
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	82 d4       	rcall	.+2308   	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
     350:	20 e0       	ldi	r18, 0x00	; 0
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	40 e2       	ldi	r20, 0x20	; 32
     356:	51 e4       	ldi	r21, 0x41	; 65
     358:	c7 01       	movw	r24, r14
     35a:	b6 01       	movw	r22, r12
     35c:	6e d5       	rcall	.+2780   	; 0xe3a <__divsf3>
     35e:	da d5       	rcall	.+2996   	; 0xf14 <__fixunssfsi>
     360:	46 2f       	mov	r20, r22
     362:	66 e0       	ldi	r22, 0x06	; 6
     364:	8b e0       	ldi	r24, 0x0B	; 11
     366:	91 e0       	ldi	r25, 0x01	; 1
     368:	75 d4       	rcall	.+2282   	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
     36a:	c7 01       	movw	r24, r14
     36c:	b6 01       	movw	r22, r12
     36e:	cd d5       	rcall	.+2970   	; 0xf0a <__fixsfsi>
     370:	ca e0       	ldi	r28, 0x0A	; 10
     372:	d0 e0       	ldi	r29, 0x00	; 0
     374:	cb 01       	movw	r24, r22
     376:	be 01       	movw	r22, r28
     378:	69 d7       	rcall	.+3794   	; 0x124c <__divmodhi4>
     37a:	48 2f       	mov	r20, r24
     37c:	40 68       	ori	r20, 0x80	; 128
     37e:	68 e0       	ldi	r22, 0x08	; 8
     380:	8b e0       	ldi	r24, 0x0B	; 11
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	67 d4       	rcall	.+2254   	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	40 e2       	ldi	r20, 0x20	; 32
     38c:	51 e4       	ldi	r21, 0x41	; 65
     38e:	c7 01       	movw	r24, r14
     390:	b6 01       	movw	r22, r12
     392:	a2 d6       	rcall	.+3396   	; 0x10d8 <__mulsf3>
     394:	ba d5       	rcall	.+2932   	; 0xf0a <__fixsfsi>
     396:	cb 01       	movw	r24, r22
     398:	be 01       	movw	r22, r28
     39a:	58 d7       	rcall	.+3760   	; 0x124c <__divmodhi4>
     39c:	48 2f       	mov	r20, r24
     39e:	62 e0       	ldi	r22, 0x02	; 2
     3a0:	8b e0       	ldi	r24, 0x0B	; 11
     3a2:	91 e0       	ldi	r25, 0x01	; 1
     3a4:	57 d4       	rcall	.+2222   	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	ff 90       	pop	r15
     3ac:	ef 90       	pop	r14
     3ae:	df 90       	pop	r13
     3b0:	cf 90       	pop	r12
     3b2:	08 95       	ret

000003b4 <_Z21displaySetTemperaturev>:
     3b4:	40 e0       	ldi	r20, 0x00	; 0
     3b6:	69 e0       	ldi	r22, 0x09	; 9
     3b8:	81 e1       	ldi	r24, 0x11	; 17
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	4b d4       	rcall	.+2198   	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
     3be:	40 e0       	ldi	r20, 0x00	; 0
     3c0:	63 e0       	ldi	r22, 0x03	; 3
     3c2:	81 e1       	ldi	r24, 0x11	; 17
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	46 d4       	rcall	.+2188   	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
     3c8:	4b e5       	ldi	r20, 0x5B	; 91
     3ca:	67 e0       	ldi	r22, 0x07	; 7
     3cc:	81 e1       	ldi	r24, 0x11	; 17
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	41 d4       	rcall	.+2178   	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
     3d2:	4f e4       	ldi	r20, 0x4F	; 79
     3d4:	65 e0       	ldi	r22, 0x05	; 5
     3d6:	81 e1       	ldi	r24, 0x11	; 17
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	3c d4       	rcall	.+2168   	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
     3dc:	4f e0       	ldi	r20, 0x0F	; 15
     3de:	61 e0       	ldi	r22, 0x01	; 1
     3e0:	81 e1       	ldi	r24, 0x11	; 17
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	37 d4       	rcall	.+2158   	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
     3e6:	4f e0       	ldi	r20, 0x0F	; 15
     3e8:	64 e0       	ldi	r22, 0x04	; 4
     3ea:	81 e1       	ldi	r24, 0x11	; 17
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	32 d4       	rcall	.+2148   	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
     3f0:	47 e6       	ldi	r20, 0x67	; 103
     3f2:	68 e0       	ldi	r22, 0x08	; 8
     3f4:	81 e1       	ldi	r24, 0x11	; 17
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	2d d4       	rcall	.+2138   	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	66 e0       	ldi	r22, 0x06	; 6
     3fe:	81 e1       	ldi	r24, 0x11	; 17
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	28 d4       	rcall	.+2128   	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
     404:	40 e0       	ldi	r20, 0x00	; 0
     406:	62 e0       	ldi	r22, 0x02	; 2
     408:	81 e1       	ldi	r24, 0x11	; 17
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	23 c4       	rjmp	.+2118   	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
     40e:	08 95       	ret

00000410 <_Z4titiv>:
	controls.startBuzzer();
	_delay_ms(100);
}

void titi(){
	controls.startBuzzer();
     410:	8d e2       	ldi	r24, 0x2D	; 45
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	ea d1       	rcall	.+980    	; 0x7ea <_ZN8Controls11startBuzzerEv>
     416:	2f ef       	ldi	r18, 0xFF	; 255
     418:	81 ee       	ldi	r24, 0xE1	; 225
     41a:	94 e0       	ldi	r25, 0x04	; 4
     41c:	21 50       	subi	r18, 0x01	; 1
     41e:	80 40       	sbci	r24, 0x00	; 0
     420:	90 40       	sbci	r25, 0x00	; 0
     422:	e1 f7       	brne	.-8      	; 0x41c <_Z4titiv+0xc>
     424:	00 c0       	rjmp	.+0      	; 0x426 <_Z4titiv+0x16>
     426:	00 00       	nop
	_delay_ms(100);
	controls.stopBuzzer();
     428:	8d e2       	ldi	r24, 0x2D	; 45
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	e0 d1       	rcall	.+960    	; 0x7ee <_ZN8Controls10stopBuzzerEv>
     42e:	2f ef       	ldi	r18, 0xFF	; 255
     430:	81 ee       	ldi	r24, 0xE1	; 225
     432:	94 e0       	ldi	r25, 0x04	; 4
     434:	21 50       	subi	r18, 0x01	; 1
     436:	80 40       	sbci	r24, 0x00	; 0
     438:	90 40       	sbci	r25, 0x00	; 0
     43a:	e1 f7       	brne	.-8      	; 0x434 <_Z4titiv+0x24>
     43c:	00 c0       	rjmp	.+0      	; 0x43e <_Z4titiv+0x2e>
     43e:	00 00       	nop
	_delay_ms(100);
	controls.startBuzzer();
     440:	8d e2       	ldi	r24, 0x2D	; 45
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	d2 d1       	rcall	.+932    	; 0x7ea <_ZN8Controls11startBuzzerEv>
     446:	2f ef       	ldi	r18, 0xFF	; 255
     448:	81 ee       	ldi	r24, 0xE1	; 225
     44a:	94 e0       	ldi	r25, 0x04	; 4
     44c:	21 50       	subi	r18, 0x01	; 1
     44e:	80 40       	sbci	r24, 0x00	; 0
     450:	90 40       	sbci	r25, 0x00	; 0
     452:	e1 f7       	brne	.-8      	; 0x44c <_Z4titiv+0x3c>
     454:	00 c0       	rjmp	.+0      	; 0x456 <_Z4titiv+0x46>
     456:	00 00       	nop
	_delay_ms(100);
	controls.stopBuzzer();
     458:	8d e2       	ldi	r24, 0x2D	; 45
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	c8 d1       	rcall	.+912    	; 0x7ee <_ZN8Controls10stopBuzzerEv>
     45e:	2f ef       	ldi	r18, 0xFF	; 255
     460:	81 ee       	ldi	r24, 0xE1	; 225
     462:	94 e0       	ldi	r25, 0x04	; 4
     464:	21 50       	subi	r18, 0x01	; 1
     466:	80 40       	sbci	r24, 0x00	; 0
     468:	90 40       	sbci	r25, 0x00	; 0
     46a:	e1 f7       	brne	.-8      	; 0x464 <_Z4titiv+0x54>
     46c:	00 c0       	rjmp	.+0      	; 0x46e <_Z4titiv+0x5e>
     46e:	00 00       	nop
     470:	08 95       	ret

00000472 <_Z5checkv>:
}


void check() {
	
	if(skin_temperature >= (set_temperature+0.2)) {
     472:	2d ec       	ldi	r18, 0xCD	; 205
     474:	3c ec       	ldi	r19, 0xCC	; 204
     476:	4c e4       	ldi	r20, 0x4C	; 76
     478:	5e e3       	ldi	r21, 0x3E	; 62
     47a:	60 91 00 01 	lds	r22, 0x0100
     47e:	70 91 01 01 	lds	r23, 0x0101
     482:	80 91 02 01 	lds	r24, 0x0102
     486:	90 91 03 01 	lds	r25, 0x0103
     48a:	6f d4       	rcall	.+2270   	; 0xd6a <__addsf3>
     48c:	20 91 1f 01 	lds	r18, 0x011F
     490:	30 91 20 01 	lds	r19, 0x0120
     494:	40 91 21 01 	lds	r20, 0x0121
     498:	50 91 22 01 	lds	r21, 0x0122
     49c:	ca d4       	rcall	.+2452   	; 0xe32 <__cmpsf2>
     49e:	18 16       	cp	r1, r24
     4a0:	54 f1       	brlt	.+84     	; 0x4f6 <_Z5checkv+0x84>
		if(!startMonitor) {
     4a2:	80 91 33 01 	lds	r24, 0x0133
     4a6:	81 11       	cpse	r24, r1
     4a8:	17 c0       	rjmp	.+46     	; 0x4d8 <_Z5checkv+0x66>
			controls.startBuzzer();	
     4aa:	8d e2       	ldi	r24, 0x2D	; 45
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	9d d1       	rcall	.+826    	; 0x7ea <_ZN8Controls11startBuzzerEv>
		}	
		
		if(stop_buzzer && !startMonitor) {
     4b0:	80 91 05 01 	lds	r24, 0x0105
     4b4:	88 23       	and	r24, r24
     4b6:	81 f0       	breq	.+32     	; 0x4d8 <_Z5checkv+0x66>
     4b8:	80 91 33 01 	lds	r24, 0x0133
     4bc:	81 11       	cpse	r24, r1
     4be:	0c c0       	rjmp	.+24     	; 0x4d8 <_Z5checkv+0x66>
			startMonitor = true;
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	80 93 33 01 	sts	0x0133, r24
			second = 0;
     4c6:	10 92 32 01 	sts	0x0132, r1
     4ca:	10 92 31 01 	sts	0x0131, r1
			stop_buzzer = false;
     4ce:	10 92 05 01 	sts	0x0105, r1
			controls.stopBuzzer();
     4d2:	8d e2       	ldi	r24, 0x2D	; 45
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	8b d1       	rcall	.+790    	; 0x7ee <_ZN8Controls10stopBuzzerEv>
		}
		
		Led.led_do(TS_HIGH_LED, 1);
     4d8:	41 e0       	ldi	r20, 0x01	; 1
     4da:	50 e0       	ldi	r21, 0x00	; 0
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	8a e0       	ldi	r24, 0x0A	; 10
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	8d d1       	rcall	.+794    	; 0x800 <_ZN3led6led_doEii>
		controls.stopBuzzer();
		Led.led_do(TS_HIGH_LED, 0);
		startMonitor = false;
		second = 0;
	}
	if(second >=120) {
     4e6:	80 91 31 01 	lds	r24, 0x0131
     4ea:	90 91 32 01 	lds	r25, 0x0132
     4ee:	88 37       	cpi	r24, 0x78	; 120
     4f0:	91 05       	cpc	r25, r1
     4f2:	94 f4       	brge	.+36     	; 0x518 <_Z5checkv+0xa6>
     4f4:	17 c0       	rjmp	.+46     	; 0x524 <_Z5checkv+0xb2>
		}
		
		Led.led_do(TS_HIGH_LED, 1);
		//Led.led_do(TA_HIGH_LED, 1);
	} else {
		controls.stopBuzzer();
     4f6:	8d e2       	ldi	r24, 0x2D	; 45
     4f8:	91 e0       	ldi	r25, 0x01	; 1
     4fa:	79 d1       	rcall	.+754    	; 0x7ee <_ZN8Controls10stopBuzzerEv>
		Led.led_do(TS_HIGH_LED, 0);
     4fc:	40 e0       	ldi	r20, 0x00	; 0
     4fe:	50 e0       	ldi	r21, 0x00	; 0
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	8a e0       	ldi	r24, 0x0A	; 10
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	7b d1       	rcall	.+758    	; 0x800 <_ZN3led6led_doEii>
		startMonitor = false;
     50a:	10 92 33 01 	sts	0x0133, r1
		second = 0;
     50e:	10 92 32 01 	sts	0x0132, r1
     512:	10 92 31 01 	sts	0x0131, r1
     516:	06 c0       	rjmp	.+12     	; 0x524 <_Z5checkv+0xb2>
	}
	if(second >=120) {
		//why this below line needed when if startMonitor = false, and skin temperature still set_temperature + 0.2 
		//controls.startBuzzer();
		startMonitor = false;
     518:	10 92 33 01 	sts	0x0133, r1
		second = 0;
     51c:	10 92 32 01 	sts	0x0132, r1
     520:	10 92 31 01 	sts	0x0131, r1
	}
		
	if(air_temperature > 37) {
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	44 e1       	ldi	r20, 0x14	; 20
     52a:	52 e4       	ldi	r21, 0x42	; 66
     52c:	60 91 1b 01 	lds	r22, 0x011B
     530:	70 91 1c 01 	lds	r23, 0x011C
     534:	80 91 1d 01 	lds	r24, 0x011D
     538:	90 91 1e 01 	lds	r25, 0x011E
     53c:	c9 d5       	rcall	.+2962   	; 0x10d0 <__gesf2>
     53e:	18 16       	cp	r1, r24
     540:	44 f4       	brge	.+16     	; 0x552 <_Z5checkv+0xe0>
		//controls.startBuzzer();
		//Led.led_do(TS_HIGH_LED, 1);
		Led.led_do(TA_HIGH_LED, 1);
     542:	41 e0       	ldi	r20, 0x01	; 1
     544:	50 e0       	ldi	r21, 0x00	; 0
     546:	61 e0       	ldi	r22, 0x01	; 1
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	8a e0       	ldi	r24, 0x0A	; 10
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	58 d1       	rcall	.+688    	; 0x800 <_ZN3led6led_doEii>
     550:	07 c0       	rjmp	.+14     	; 0x560 <_Z5checkv+0xee>
	} else{
		//controls.stopBuzzer();
		Led.led_do(TS_HIGH_LED, 0);
     552:	40 e0       	ldi	r20, 0x00	; 0
     554:	50 e0       	ldi	r21, 0x00	; 0
     556:	60 e0       	ldi	r22, 0x00	; 0
     558:	70 e0       	ldi	r23, 0x00	; 0
     55a:	8a e0       	ldi	r24, 0x0A	; 10
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	50 d1       	rcall	.+672    	; 0x800 <_ZN3led6led_doEii>
	} 
	
	//buzzer stop button
	if(bit_is_clear(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN) && !buzzer_stop_pressed ) {
     560:	34 99       	sbic	0x06, 4	; 6
     562:	73 c0       	rjmp	.+230    	; 0x64a <_Z5checkv+0x1d8>
     564:	80 91 06 01 	lds	r24, 0x0106
     568:	81 11       	cpse	r24, r1
     56a:	6f c0       	rjmp	.+222    	; 0x64a <_Z5checkv+0x1d8>
     56c:	65 c0       	rjmp	.+202    	; 0x638 <_Z5checkv+0x1c6>
		stop_buzzer = true;
		buzzer_stop_pressed = true;
	}
	
	else if(bit_is_set(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN)) {
		buzzer_stop_pressed = false;
     56e:	10 92 06 01 	sts	0x0106, r1
	}
	
	//set up button
	
	if(bit_is_clear(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN) && !set_up_pressed) {
     572:	33 99       	sbic	0x06, 3	; 6
     574:	6d c0       	rjmp	.+218    	; 0x650 <_Z5checkv+0x1de>
     576:	80 91 09 01 	lds	r24, 0x0109
     57a:	81 11       	cpse	r24, r1
     57c:	69 c0       	rjmp	.+210    	; 0x650 <_Z5checkv+0x1de>
     57e:	6b c0       	rjmp	.+214    	; 0x656 <_Z5checkv+0x1e4>
		
		if(button_change) {
			set_temperature_copy += 0.1; 
     580:	2d ec       	ldi	r18, 0xCD	; 205
     582:	3c ec       	ldi	r19, 0xCC	; 204
     584:	4c ec       	ldi	r20, 0xCC	; 204
     586:	5d e3       	ldi	r21, 0x3D	; 61
     588:	60 91 17 01 	lds	r22, 0x0117
     58c:	70 91 18 01 	lds	r23, 0x0118
     590:	80 91 19 01 	lds	r24, 0x0119
     594:	90 91 1a 01 	lds	r25, 0x011A
     598:	e8 d3       	rcall	.+2000   	; 0xd6a <__addsf3>
     59a:	60 93 17 01 	sts	0x0117, r22
     59e:	70 93 18 01 	sts	0x0118, r23
     5a2:	80 93 19 01 	sts	0x0119, r24
     5a6:	90 93 1a 01 	sts	0x011A, r25
		}
		set_up_pressed = true;
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	80 93 09 01 	sts	0x0109, r24
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <_Z5checkv+0x144>
	}
	
	else if(bit_is_set(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN)) {
		set_up_pressed = false;
     5b2:	10 92 09 01 	sts	0x0109, r1
	}
	
	
	//set down button
	if(bit_is_clear(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN) && !set_down_pressed) {
     5b6:	4a 99       	sbic	0x09, 2	; 9
     5b8:	58 c0       	rjmp	.+176    	; 0x66a <_Z5checkv+0x1f8>
     5ba:	80 91 07 01 	lds	r24, 0x0107
     5be:	81 11       	cpse	r24, r1
     5c0:	54 c0       	rjmp	.+168    	; 0x66a <_Z5checkv+0x1f8>
     5c2:	4e c0       	rjmp	.+156    	; 0x660 <_Z5checkv+0x1ee>
		
		if(button_change) {
			set_temperature_copy -= 0.1;
     5c4:	2d ec       	ldi	r18, 0xCD	; 205
     5c6:	3c ec       	ldi	r19, 0xCC	; 204
     5c8:	4c ec       	ldi	r20, 0xCC	; 204
     5ca:	5d e3       	ldi	r21, 0x3D	; 61
     5cc:	60 91 17 01 	lds	r22, 0x0117
     5d0:	70 91 18 01 	lds	r23, 0x0118
     5d4:	80 91 19 01 	lds	r24, 0x0119
     5d8:	90 91 1a 01 	lds	r25, 0x011A
     5dc:	c5 d3       	rcall	.+1930   	; 0xd68 <__subsf3>
     5de:	60 93 17 01 	sts	0x0117, r22
     5e2:	70 93 18 01 	sts	0x0118, r23
     5e6:	80 93 19 01 	sts	0x0119, r24
     5ea:	90 93 1a 01 	sts	0x011A, r25
		}
		
		set_down_pressed= true;
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	80 93 07 01 	sts	0x0107, r24
     5f4:	02 c0       	rjmp	.+4      	; 0x5fa <_Z5checkv+0x188>
	}
	
	else if(bit_is_set(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN)) {
		set_down_pressed = false;
     5f6:	10 92 07 01 	sts	0x0107, r1
	}
	
	//set button
	if(bit_is_clear(SET_BUTTON_PORT, SET_BUTTON_PIN) && !set_pressed) {
     5fa:	18 99       	sbic	0x03, 0	; 3
     5fc:	42 c0       	rjmp	.+132    	; 0x682 <_Z5checkv+0x210>
     5fe:	80 91 08 01 	lds	r24, 0x0108
     602:	81 11       	cpse	r24, r1
     604:	3e c0       	rjmp	.+124    	; 0x682 <_Z5checkv+0x210>
     606:	34 c0       	rjmp	.+104    	; 0x670 <_Z5checkv+0x1fe>
			button_change = !button_change;
			if(!button_change) {
				set_temperature = set_temperature_copy;
     608:	80 91 17 01 	lds	r24, 0x0117
     60c:	90 91 18 01 	lds	r25, 0x0118
     610:	a0 91 19 01 	lds	r26, 0x0119
     614:	b0 91 1a 01 	lds	r27, 0x011A
     618:	80 93 00 01 	sts	0x0100, r24
     61c:	90 93 01 01 	sts	0x0101, r25
     620:	a0 93 02 01 	sts	0x0102, r26
     624:	b0 93 03 01 	sts	0x0103, r27
				titi();
     628:	f3 de       	rcall	.-538    	; 0x410 <_Z4titiv>
			}
			
			set_pressed = true;
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	80 93 08 01 	sts	0x0108, r24
     630:	08 95       	ret
		}
	
	
	
	else if(bit_is_set(SET_BUTTON_PORT, SET_BUTTON_PIN)) {
		set_pressed = false;
     632:	10 92 08 01 	sts	0x0108, r1
     636:	08 95       	ret
	} 
	
	//buzzer stop button
	if(bit_is_clear(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN) && !buzzer_stop_pressed ) {
		
		controls.stopBuzzer();
     638:	8d e2       	ldi	r24, 0x2D	; 45
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	d8 d0       	rcall	.+432    	; 0x7ee <_ZN8Controls10stopBuzzerEv>
		stop_buzzer = true;
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	80 93 05 01 	sts	0x0105, r24
		buzzer_stop_pressed = true;
     644:	80 93 06 01 	sts	0x0106, r24
     648:	94 cf       	rjmp	.-216    	; 0x572 <_Z5checkv+0x100>
	}
	
	else if(bit_is_set(BUZZER_STOP_BUTTON_PORT, BUZZER_STOP_BUTTON_PIN)) {
     64a:	34 99       	sbic	0x06, 4	; 6
     64c:	90 cf       	rjmp	.-224    	; 0x56e <_Z5checkv+0xfc>
     64e:	91 cf       	rjmp	.-222    	; 0x572 <_Z5checkv+0x100>
			set_temperature_copy += 0.1; 
		}
		set_up_pressed = true;
	}
	
	else if(bit_is_set(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN)) {
     650:	33 99       	sbic	0x06, 3	; 6
     652:	af cf       	rjmp	.-162    	; 0x5b2 <_Z5checkv+0x140>
     654:	b0 cf       	rjmp	.-160    	; 0x5b6 <_Z5checkv+0x144>
	
	//set up button
	
	if(bit_is_clear(SET_UP_BUTTON_PORT, SET_UP_BUTTON_PIN) && !set_up_pressed) {
		
		if(button_change) {
     656:	80 91 04 01 	lds	r24, 0x0104
     65a:	81 11       	cpse	r24, r1
     65c:	91 cf       	rjmp	.-222    	; 0x580 <_Z5checkv+0x10e>
     65e:	a5 cf       	rjmp	.-182    	; 0x5aa <_Z5checkv+0x138>
	
	
	//set down button
	if(bit_is_clear(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN) && !set_down_pressed) {
		
		if(button_change) {
     660:	80 91 04 01 	lds	r24, 0x0104
     664:	81 11       	cpse	r24, r1
     666:	ae cf       	rjmp	.-164    	; 0x5c4 <_Z5checkv+0x152>
     668:	c2 cf       	rjmp	.-124    	; 0x5ee <_Z5checkv+0x17c>
		}
		
		set_down_pressed= true;
	}
	
	else if(bit_is_set(SET_DOWN_BUTTON_PORT, SET_DOWN_BUTTON_PIN)) {
     66a:	4a 99       	sbic	0x09, 2	; 9
     66c:	c4 cf       	rjmp	.-120    	; 0x5f6 <_Z5checkv+0x184>
     66e:	c5 cf       	rjmp	.-118    	; 0x5fa <_Z5checkv+0x188>
		set_down_pressed = false;
	}
	
	//set button
	if(bit_is_clear(SET_BUTTON_PORT, SET_BUTTON_PIN) && !set_pressed) {
			button_change = !button_change;
     670:	90 91 04 01 	lds	r25, 0x0104
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	89 27       	eor	r24, r25
     678:	80 93 04 01 	sts	0x0104, r24
			if(!button_change) {
     67c:	81 11       	cpse	r24, r1
     67e:	d5 cf       	rjmp	.-86     	; 0x62a <_Z5checkv+0x1b8>
     680:	c3 cf       	rjmp	.-122    	; 0x608 <_Z5checkv+0x196>
			set_pressed = true;
		}
	
	
	
	else if(bit_is_set(SET_BUTTON_PORT, SET_BUTTON_PIN)) {
     682:	18 99       	sbic	0x03, 0	; 3
     684:	d6 cf       	rjmp	.-84     	; 0x632 <_Z5checkv+0x1c0>
     686:	08 95       	ret

00000688 <main>:
uint32_t countpreheat = 0;


int main(void)
{	
	initUART0();
     688:	63 d3       	rcall	.+1734   	; 0xd50 <_Z9initUART0v>
	init_devices();
     68a:	17 dd       	rcall	.-1490   	; 0xba <_Z12init_devicesv>
// 		}
// 		
// 	}
// 	//
	// ti ti ti ti
	titi();
     68c:	c1 de       	rcall	.-638    	; 0x410 <_Z4titiv>
//   	}
	while(1)
	
	{
		
 		check();
     68e:	f1 de       	rcall	.-542    	; 0x472 <_Z5checkv>
 		if(displayUpdate) {
     690:	80 91 2e 01 	lds	r24, 0x012E
     694:	88 23       	and	r24, r24
     696:	d9 f3       	breq	.-10     	; 0x68e <main+0x6>
 			//spi for max7219 for display
 			max1.MAX7219_init(); // these are init
     698:	81 e1       	ldi	r24, 0x11	; 17
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	fe d2       	rcall	.+1532   	; 0xc9a <_ZN7max721912MAX7219_initEv>
 			max2.MAX7219_init();
     69e:	8b e0       	ldi	r24, 0x0B	; 11
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	fb d2       	rcall	.+1526   	; 0xc9a <_ZN7max721912MAX7219_initEv>
			 // sending this
			 if(button_change){
     6a4:	80 91 04 01 	lds	r24, 0x0104
     6a8:	88 23       	and	r24, r24
     6aa:	59 f0       	breq	.+22     	; 0x6c2 <main+0x3a>
				 sendToDisplayBelow(set_temperature_copy);
     6ac:	60 91 17 01 	lds	r22, 0x0117
     6b0:	70 91 18 01 	lds	r23, 0x0118
     6b4:	80 91 19 01 	lds	r24, 0x0119
     6b8:	90 91 1a 01 	lds	r25, 0x011A
     6bc:	3c de       	rcall	.-904    	; 0x336 <_Z18sendToDisplayBelowf>
				 displaySetTemperature();
     6be:	7a de       	rcall	.-780    	; 0x3b4 <_Z21displaySetTemperaturev>
     6c0:	19 c0       	rjmp	.+50     	; 0x6f4 <main+0x6c>
			 }
			 
			 else{
				 sendToDisplay(air_temperature, skin_temperature, set_temperature);
     6c2:	e0 90 00 01 	lds	r14, 0x0100
     6c6:	f0 90 01 01 	lds	r15, 0x0101
     6ca:	00 91 02 01 	lds	r16, 0x0102
     6ce:	10 91 03 01 	lds	r17, 0x0103
     6d2:	20 91 1f 01 	lds	r18, 0x011F
     6d6:	30 91 20 01 	lds	r19, 0x0120
     6da:	40 91 21 01 	lds	r20, 0x0121
     6de:	50 91 22 01 	lds	r21, 0x0122
     6e2:	60 91 1b 01 	lds	r22, 0x011B
     6e6:	70 91 1c 01 	lds	r23, 0x011C
     6ea:	80 91 1d 01 	lds	r24, 0x011D
     6ee:	90 91 1e 01 	lds	r25, 0x011E
     6f2:	68 dd       	rcall	.-1328   	; 0x1c4 <_Z13sendToDisplayfff>
			 }
			 	
 			//spi for temperature pt100
 			maxAir.begin(0); //these are init 
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	88 e2       	ldi	r24, 0x28	; 40
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	8f d1       	rcall	.+798    	; 0xa1a <_ZN17Adafruit_MAX318655beginEh>
 			maxSkin.begin(1);
     6fc:	61 e0       	ldi	r22, 0x01	; 1
     6fe:	83 e2       	ldi	r24, 0x23	; 35
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	8b d1       	rcall	.+790    	; 0xa1a <_ZN17Adafruit_MAX318655beginEh>
 			skin_temperature = maxSkin.temperature(100.0, 430.0);
     704:	00 e0       	ldi	r16, 0x00	; 0
     706:	10 e0       	ldi	r17, 0x00	; 0
     708:	27 ed       	ldi	r18, 0xD7	; 215
     70a:	33 e4       	ldi	r19, 0x43	; 67
     70c:	40 e0       	ldi	r20, 0x00	; 0
     70e:	50 e0       	ldi	r21, 0x00	; 0
     710:	68 ec       	ldi	r22, 0xC8	; 200
     712:	72 e4       	ldi	r23, 0x42	; 66
     714:	83 e2       	ldi	r24, 0x23	; 35
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	bf d1       	rcall	.+894    	; 0xa98 <_ZN17Adafruit_MAX3186511temperatureEff>
     71a:	60 93 1f 01 	sts	0x011F, r22
     71e:	70 93 20 01 	sts	0x0120, r23
     722:	80 93 21 01 	sts	0x0121, r24
     726:	90 93 22 01 	sts	0x0122, r25
			air_temperature = maxAir.temperature(100.0, 430.0);
     72a:	00 e0       	ldi	r16, 0x00	; 0
     72c:	10 e0       	ldi	r17, 0x00	; 0
     72e:	27 ed       	ldi	r18, 0xD7	; 215
     730:	33 e4       	ldi	r19, 0x43	; 67
     732:	40 e0       	ldi	r20, 0x00	; 0
     734:	50 e0       	ldi	r21, 0x00	; 0
     736:	68 ec       	ldi	r22, 0xC8	; 200
     738:	72 e4       	ldi	r23, 0x42	; 66
     73a:	88 e2       	ldi	r24, 0x28	; 40
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	ac d1       	rcall	.+856    	; 0xa98 <_ZN17Adafruit_MAX3186511temperatureEff>
     740:	60 93 1b 01 	sts	0x011B, r22
     744:	70 93 1c 01 	sts	0x011C, r23
     748:	80 93 1d 01 	sts	0x011D, r24
     74c:	90 93 1e 01 	sts	0x011E, r25
				controls.startHeater();
			 }
			 else{
				 emergencyAlert =  false;
				 controls.stopBuzzer();*/
				 if(skin_temperature >= (set_temperature-0.1)) {
     750:	80 90 00 01 	lds	r8, 0x0100
     754:	90 90 01 01 	lds	r9, 0x0101
     758:	a0 90 02 01 	lds	r10, 0x0102
     75c:	b0 90 03 01 	lds	r11, 0x0103
     760:	c0 90 1f 01 	lds	r12, 0x011F
     764:	d0 90 20 01 	lds	r13, 0x0120
     768:	e0 90 21 01 	lds	r14, 0x0121
     76c:	f0 90 22 01 	lds	r15, 0x0122
     770:	2d ec       	ldi	r18, 0xCD	; 205
     772:	3c ec       	ldi	r19, 0xCC	; 204
     774:	4c ec       	ldi	r20, 0xCC	; 204
     776:	5d e3       	ldi	r21, 0x3D	; 61
     778:	c5 01       	movw	r24, r10
     77a:	b4 01       	movw	r22, r8
     77c:	f5 d2       	rcall	.+1514   	; 0xd68 <__subsf3>
     77e:	a7 01       	movw	r20, r14
     780:	96 01       	movw	r18, r12
     782:	57 d3       	rcall	.+1710   	; 0xe32 <__cmpsf2>
     784:	18 16       	cp	r1, r24
     786:	24 f0       	brlt	.+8      	; 0x790 <main+0x108>
					 controls.stopHeater();
     788:	8d e2       	ldi	r24, 0x2D	; 45
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	2c d0       	rcall	.+88     	; 0x7e6 <_ZN8Controls10stopHeaterEv>
     78e:	11 c0       	rjmp	.+34     	; 0x7b2 <main+0x12a>
					 }else if(skin_temperature <= (set_temperature - 0.2)) {
     790:	2d ec       	ldi	r18, 0xCD	; 205
     792:	3c ec       	ldi	r19, 0xCC	; 204
     794:	4c e4       	ldi	r20, 0x4C	; 76
     796:	5e e3       	ldi	r21, 0x3E	; 62
     798:	c5 01       	movw	r24, r10
     79a:	b4 01       	movw	r22, r8
     79c:	e5 d2       	rcall	.+1482   	; 0xd68 <__subsf3>
     79e:	9b 01       	movw	r18, r22
     7a0:	ac 01       	movw	r20, r24
     7a2:	c7 01       	movw	r24, r14
     7a4:	b6 01       	movw	r22, r12
     7a6:	45 d3       	rcall	.+1674   	; 0xe32 <__cmpsf2>
     7a8:	18 16       	cp	r1, r24
     7aa:	1c f0       	brlt	.+6      	; 0x7b2 <main+0x12a>
					 controls.startHeater();
     7ac:	8d e2       	ldi	r24, 0x2D	; 45
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	18 d0       	rcall	.+48     	; 0x7e2 <_ZN8Controls11startHeaterEv>
				 }
			 //}
				 
 			
 			                                                                                                                                                                                                                               
 			displayUpdate = false;
     7b2:	10 92 2e 01 	sts	0x012E, r1
     7b6:	6b cf       	rjmp	.-298    	; 0x68e <main+0x6>

000007b8 <_GLOBAL__sub_I_startMonitor>:
Adafruit_MAX31865 maxSkin;

float skin_temperature = 0.0;
float air_temperature = 0.0;
float set_temperature = 33.50;
float set_temperature_copy = set_temperature;
     7b8:	80 91 00 01 	lds	r24, 0x0100
     7bc:	90 91 01 01 	lds	r25, 0x0101
     7c0:	a0 91 02 01 	lds	r26, 0x0102
     7c4:	b0 91 03 01 	lds	r27, 0x0103
     7c8:	80 93 17 01 	sts	0x0117, r24
     7cc:	90 93 18 01 	sts	0x0118, r25
     7d0:	a0 93 19 01 	sts	0x0119, r26
     7d4:	b0 93 1a 01 	sts	0x011A, r27
     7d8:	08 95       	ret

000007da <_ZN8Controls12initControlsEv>:

void Controls::startHeater() {
	HEATER_PORT |= (1 << HEATER_PIN);
}

void Controls::stopFan() {
     7da:	53 9a       	sbi	0x0a, 3	; 10
     7dc:	3d 9a       	sbi	0x07, 5	; 7
     7de:	5b 98       	cbi	0x0b, 3	; 11
     7e0:	08 95       	ret

000007e2 <_ZN8Controls11startHeaterEv>:
     7e2:	5b 9a       	sbi	0x0b, 3	; 11
     7e4:	08 95       	ret

000007e6 <_ZN8Controls10stopHeaterEv>:
	//FAN_PORT &=~ (1 << FAN_PIN);
	//PORTB &=~ ((1 << PINB7) | (1 << PINB4));
}

void Controls::stopHeater() {
	HEATER_PORT &=~ (1 << HEATER_PIN);
     7e6:	5b 98       	cbi	0x0b, 3	; 11
     7e8:	08 95       	ret

000007ea <_ZN8Controls11startBuzzerEv>:
}

void Controls::startBuzzer() {
	BUZZER_PORT |= (1 << BUZZER_PIN);
     7ea:	45 9a       	sbi	0x08, 5	; 8
     7ec:	08 95       	ret

000007ee <_ZN8Controls10stopBuzzerEv>:
}

void Controls::stopBuzzer() {
	BUZZER_PORT &=~ (1 << BUZZER_PIN);
     7ee:	45 98       	cbi	0x08, 5	; 8
     7f0:	08 95       	ret

000007f2 <_ZN3led8led_initEv>:
#include <avr/io.h>

#define DDR(x) (*(&x - 1))      /* address of data direction register of port x */

void led::led_init() {
	DDR(TS_HIGH_PORT) |= (1 << TS_HIGH_PIN);
     7f2:	56 9a       	sbi	0x0a, 6	; 10
	DDR(TA_HIGH_PORT) |= (1 << TA_HIGH_PIN);
     7f4:	50 9a       	sbi	0x0a, 0	; 10
	DDR(SET_TEMP_PORT) |= (1 << SET_TEMP_PIN);
     7f6:	51 9a       	sbi	0x0a, 1	; 10
	DDR(SENSOR_FAIL_PORT) |= (1 << SENSOR_FAIL_PIN);
     7f8:	51 9a       	sbi	0x0a, 1	; 10
	DDR(HEATER_FAIL_PORT) |= (1 << HEATER_FAIL_PIN);
     7fa:	57 9a       	sbi	0x0a, 7	; 10
	DDR(POWER_PORT) |= (1 << POWER_PIN);
     7fc:	50 9a       	sbi	0x0a, 0	; 10
     7fe:	08 95       	ret

00000800 <_ZN3led6led_doEii>:
	
}


void led::led_do(int led_num, int state) {
	switch(led_num) {
     800:	62 30       	cpi	r22, 0x02	; 2
     802:	71 05       	cpc	r23, r1
     804:	41 f1       	breq	.+80     	; 0x856 <_ZN3led6led_doEii+0x56>
     806:	3c f4       	brge	.+14     	; 0x816 <_ZN3led6led_doEii+0x16>
     808:	61 15       	cp	r22, r1
     80a:	71 05       	cpc	r23, r1
     80c:	61 f0       	breq	.+24     	; 0x826 <_ZN3led6led_doEii+0x26>
     80e:	61 30       	cpi	r22, 0x01	; 1
     810:	71 05       	cpc	r23, r1
     812:	79 f0       	breq	.+30     	; 0x832 <_ZN3led6led_doEii+0x32>
     814:	08 95       	ret
     816:	64 30       	cpi	r22, 0x04	; 4
     818:	71 05       	cpc	r23, r1
     81a:	b9 f0       	breq	.+46     	; 0x84a <_ZN3led6led_doEii+0x4a>
     81c:	14 f1       	brlt	.+68     	; 0x862 <_ZN3led6led_doEii+0x62>
     81e:	65 30       	cpi	r22, 0x05	; 5
     820:	71 05       	cpc	r23, r1
     822:	69 f0       	breq	.+26     	; 0x83e <_ZN3led6led_doEii+0x3e>
     824:	08 95       	ret
		case TS_HIGH_LED:
		REGISTER_LED(TS_HIGH_PORT, TS_HIGH_PIN, state);
     826:	45 2b       	or	r20, r21
     828:	11 f0       	breq	.+4      	; 0x82e <_ZN3led6led_doEii+0x2e>
     82a:	5e 9a       	sbi	0x0b, 6	; 11
     82c:	08 95       	ret
     82e:	5e 98       	cbi	0x0b, 6	; 11
     830:	08 95       	ret
		break;
	
		case TA_HIGH_LED:
		REGISTER_LED(TA_HIGH_PORT, TA_HIGH_PIN, state);
     832:	45 2b       	or	r20, r21
     834:	11 f0       	breq	.+4      	; 0x83a <_ZN3led6led_doEii+0x3a>
     836:	58 9a       	sbi	0x0b, 0	; 11
     838:	08 95       	ret
     83a:	58 98       	cbi	0x0b, 0	; 11
     83c:	08 95       	ret
		break;
		
		case SENSOR_FAIL_LED:
		REGISTER_LED(SENSOR_FAIL_PORT, SENSOR_FAIL_PIN, state);
     83e:	45 2b       	or	r20, r21
     840:	11 f0       	breq	.+4      	; 0x846 <_ZN3led6led_doEii+0x46>
     842:	59 9a       	sbi	0x0b, 1	; 11
     844:	08 95       	ret
     846:	59 98       	cbi	0x0b, 1	; 11
     848:	08 95       	ret
		break;
		
		case HEATER_FAIL_LED:
		REGISTER_LED(HEATER_FAIL_PORT, HEATER_FAIL_PIN, state);
     84a:	45 2b       	or	r20, r21
     84c:	11 f0       	breq	.+4      	; 0x852 <_ZN3led6led_doEii+0x52>
     84e:	5f 9a       	sbi	0x0b, 7	; 11
     850:	08 95       	ret
     852:	5f 98       	cbi	0x0b, 7	; 11
     854:	08 95       	ret
		break;
		
		case SET_TEMP_LED:
		REGISTER_LED(SET_TEMP_PORT, SET_TEMP_PIN, state);
     856:	45 2b       	or	r20, r21
     858:	11 f0       	breq	.+4      	; 0x85e <_ZN3led6led_doEii+0x5e>
     85a:	59 9a       	sbi	0x0b, 1	; 11
     85c:	08 95       	ret
     85e:	59 98       	cbi	0x0b, 1	; 11
     860:	08 95       	ret
		break;
		
		case POWER_LED:
		REGISTER_LED(POWER_PORT, POWER_PIN, state);
     862:	45 2b       	or	r20, r21
     864:	11 f0       	breq	.+4      	; 0x86a <_ZN3led6led_doEii+0x6a>
     866:	58 9a       	sbi	0x0b, 0	; 11
     868:	08 95       	ret
     86a:	58 98       	cbi	0x0b, 0	; 11
     86c:	08 95       	ret

0000086e <_ZN17Adafruit_MAX318657spixferEh>:
}


uint8_t Adafruit_MAX31865::readFault(void) {
	return readRegister8(MAX31856_FAULTSTAT_REG);
}
     86e:	6e bd       	out	0x2e, r22	; 46
     870:	0d b4       	in	r0, 0x2d	; 45
     872:	07 fe       	sbrs	r0, 7
     874:	fd cf       	rjmp	.-6      	; 0x870 <_ZN17Adafruit_MAX318657spixferEh+0x2>
     876:	8e b5       	in	r24, 0x2e	; 46
     878:	08 95       	ret

0000087a <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>:
     87a:	ef 92       	push	r14
     87c:	ff 92       	push	r15
     87e:	0f 93       	push	r16
     880:	1f 93       	push	r17
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	7c 01       	movw	r14, r24
     888:	ea 01       	movw	r28, r20
     88a:	12 2f       	mov	r17, r18
     88c:	fc 01       	movw	r30, r24
     88e:	80 81       	ld	r24, Z
     890:	88 23       	and	r24, r24
     892:	19 f0       	breq	.+6      	; 0x89a <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x20>
     894:	81 30       	cpi	r24, 0x01	; 1
     896:	21 f0       	breq	.+8      	; 0x8a0 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x26>
     898:	05 c0       	rjmp	.+10     	; 0x8a4 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x2a>
     89a:	29 98       	cbi	0x05, 1	; 5
     89c:	2a 9a       	sbi	0x05, 2	; 5
     89e:	02 c0       	rjmp	.+4      	; 0x8a4 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x2a>
     8a0:	2a 98       	cbi	0x05, 2	; 5
     8a2:	29 9a       	sbi	0x05, 1	; 5
     8a4:	6f 77       	andi	r22, 0x7F	; 127
     8a6:	c7 01       	movw	r24, r14
     8a8:	e2 df       	rcall	.-60     	; 0x86e <_ZN17Adafruit_MAX318657spixferEh>
     8aa:	0f ef       	ldi	r16, 0xFF	; 255
     8ac:	01 0f       	add	r16, r17
     8ae:	11 23       	and	r17, r17
     8b0:	61 f0       	breq	.+24     	; 0x8ca <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x50>
     8b2:	10 e0       	ldi	r17, 0x00	; 0
     8b4:	0f 5f       	subi	r16, 0xFF	; 255
     8b6:	1f 4f       	sbci	r17, 0xFF	; 255
     8b8:	0c 0f       	add	r16, r28
     8ba:	1d 1f       	adc	r17, r29
     8bc:	6f ef       	ldi	r22, 0xFF	; 255
     8be:	c7 01       	movw	r24, r14
     8c0:	d6 df       	rcall	.-84     	; 0x86e <_ZN17Adafruit_MAX318657spixferEh>
     8c2:	89 93       	st	Y+, r24
     8c4:	c0 17       	cp	r28, r16
     8c6:	d1 07       	cpc	r29, r17
     8c8:	c9 f7       	brne	.-14     	; 0x8bc <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x42>
     8ca:	f7 01       	movw	r30, r14
     8cc:	80 81       	ld	r24, Z
     8ce:	88 23       	and	r24, r24
     8d0:	19 f0       	breq	.+6      	; 0x8d8 <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x5e>
     8d2:	81 30       	cpi	r24, 0x01	; 1
     8d4:	19 f0       	breq	.+6      	; 0x8dc <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x62>
     8d6:	03 c0       	rjmp	.+6      	; 0x8de <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x64>
     8d8:	29 9a       	sbi	0x05, 1	; 5
     8da:	01 c0       	rjmp	.+2      	; 0x8de <_ZN17Adafruit_MAX3186513readRegisterNEhPhh+0x64>
     8dc:	2a 9a       	sbi	0x05, 2	; 5
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	ff 90       	pop	r15
     8e8:	ef 90       	pop	r14
     8ea:	08 95       	ret

000008ec <_ZN17Adafruit_MAX3186513readRegister8Eh>:
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	1f 92       	push	r1
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
     8f6:	19 82       	std	Y+1, r1	; 0x01
     8f8:	21 e0       	ldi	r18, 0x01	; 1
     8fa:	ae 01       	movw	r20, r28
     8fc:	4f 5f       	subi	r20, 0xFF	; 255
     8fe:	5f 4f       	sbci	r21, 0xFF	; 255
     900:	bc df       	rcall	.-136    	; 0x87a <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>
     902:	89 81       	ldd	r24, Y+1	; 0x01
     904:	0f 90       	pop	r0
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	08 95       	ret

0000090c <_ZN17Adafruit_MAX3186514readRegister16Eh>:
	readRegisterN(addr, &ret, 1);
	
	return ret;
}

uint16_t Adafruit_MAX31865::readRegister16(uint8_t addr) {
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	00 d0       	rcall	.+0      	; 0x912 <_ZN17Adafruit_MAX3186514readRegister16Eh+0x6>
     912:	cd b7       	in	r28, 0x3d	; 61
     914:	de b7       	in	r29, 0x3e	; 62
uint8_t buffer[2] = {0, 0};
     916:	19 82       	std	Y+1, r1	; 0x01
     918:	1a 82       	std	Y+2, r1	; 0x02
readRegisterN(addr, buffer, 2);
     91a:	22 e0       	ldi	r18, 0x02	; 2
     91c:	ae 01       	movw	r20, r28
     91e:	4f 5f       	subi	r20, 0xFF	; 255
     920:	5f 4f       	sbci	r21, 0xFF	; 255
     922:	ab df       	rcall	.-170    	; 0x87a <_ZN17Adafruit_MAX3186513readRegisterNEhPhh>

uint16_t ret = buffer[0];
     924:	89 81       	ldd	r24, Y+1	; 0x01
     926:	90 e0       	ldi	r25, 0x00	; 0
ret <<= 8;
     928:	98 2f       	mov	r25, r24
     92a:	88 27       	eor	r24, r24
ret |=  buffer[1];
     92c:	2a 81       	ldd	r18, Y+2	; 0x02

return ret;
}
     92e:	82 2b       	or	r24, r18
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	08 95       	ret

0000093a <_ZN17Adafruit_MAX3186514writeRegister8Ehh>:

 
}


void Adafruit_MAX31865::writeRegister8(uint8_t addr, uint8_t data) {
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	ec 01       	movw	r28, r24
     942:	14 2f       	mov	r17, r20
 
  switch(choose) {
     944:	88 81       	ld	r24, Y
     946:	88 23       	and	r24, r24
     948:	19 f0       	breq	.+6      	; 0x950 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x16>
     94a:	81 30       	cpi	r24, 0x01	; 1
     94c:	21 f0       	breq	.+8      	; 0x956 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x1c>
     94e:	05 c0       	rjmp	.+10     	; 0x95a <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x20>
	  case 0:
		TEMP_I_PORT &=~ (1 << PINB1);
     950:	29 98       	cbi	0x05, 1	; 5
		TEMP_II_PORT |= (1 << PINB2);
     952:	2a 9a       	sbi	0x05, 2	; 5
		break;
     954:	02 c0       	rjmp	.+4      	; 0x95a <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x20>
	  case 1:
		TEMP_II_PORT &=~ (1 << PINB2);
     956:	2a 98       	cbi	0x05, 2	; 5
		TEMP_I_PORT |= (1 << PINB1);
     958:	29 9a       	sbi	0x05, 1	; 5
		break;
  }
  spixfer(addr | 0x80);   // make sure top bit is set
     95a:	60 68       	ori	r22, 0x80	; 128
     95c:	ce 01       	movw	r24, r28
     95e:	87 df       	rcall	.-242    	; 0x86e <_ZN17Adafruit_MAX318657spixferEh>
  spixfer(data);
     960:	61 2f       	mov	r22, r17
     962:	ce 01       	movw	r24, r28
     964:	84 df       	rcall	.-248    	; 0x86e <_ZN17Adafruit_MAX318657spixferEh>

  //Serial.print("$"); Serial.print(addr, HEX); Serial.print(" = 0x"); Serial.println(data, HEX);

switch(choose) {
     966:	88 81       	ld	r24, Y
     968:	88 23       	and	r24, r24
     96a:	19 f0       	breq	.+6      	; 0x972 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x38>
     96c:	81 30       	cpi	r24, 0x01	; 1
     96e:	19 f0       	breq	.+6      	; 0x976 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x3c>
     970:	03 c0       	rjmp	.+6      	; 0x978 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x3e>
   case 0:
	TEMP_I_PORT |= (1 << PINB1);
     972:	29 9a       	sbi	0x05, 1	; 5
	break;
     974:	01 c0       	rjmp	.+2      	; 0x978 <_ZN17Adafruit_MAX3186514writeRegister8Ehh+0x3e>
  case 1:
	TEMP_II_PORT |= (1 << PINB2);
     976:	2a 9a       	sbi	0x05, 2	; 5
	break;
}
}
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	1f 91       	pop	r17
     97e:	08 95       	ret

00000980 <_ZN17Adafruit_MAX3186510clearFaultEv>:

uint8_t Adafruit_MAX31865::readFault(void) {
	return readRegister8(MAX31856_FAULTSTAT_REG);
}

void Adafruit_MAX31865::clearFault(void) {
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	ec 01       	movw	r28, r24
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	b1 df       	rcall	.-158    	; 0x8ec <_ZN17Adafruit_MAX3186513readRegister8Eh>
	t &= ~0x2C;
     98a:	83 7d       	andi	r24, 0xD3	; 211
	t |= MAX31856_CONFIG_FAULTSTAT;
     98c:	48 2f       	mov	r20, r24
     98e:	42 60       	ori	r20, 0x02	; 2
	writeRegister8(MAX31856_CONFIG_REG, t);
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	ce 01       	movw	r24, r28
     994:	d2 df       	rcall	.-92     	; 0x93a <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	08 95       	ret

0000099c <_ZN17Adafruit_MAX3186510enableBiasEb>:

void Adafruit_MAX31865::enableBias(bool b) {
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	ec 01       	movw	r28, r24
     9a4:	16 2f       	mov	r17, r22
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	a1 df       	rcall	.-190    	; 0x8ec <_ZN17Adafruit_MAX3186513readRegister8Eh>
	if (b) {
     9aa:	11 23       	and	r17, r17
     9ac:	19 f0       	breq	.+6      	; 0x9b4 <_ZN17Adafruit_MAX3186510enableBiasEb+0x18>
		t |= MAX31856_CONFIG_BIAS;       // enable bias
     9ae:	48 2f       	mov	r20, r24
     9b0:	40 68       	ori	r20, 0x80	; 128
     9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <_ZN17Adafruit_MAX3186510enableBiasEb+0x1c>
	} else {
		t &= ~MAX31856_CONFIG_BIAS;       // disable bias
     9b4:	48 2f       	mov	r20, r24
     9b6:	4f 77       	andi	r20, 0x7F	; 127
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	ce 01       	movw	r24, r28
     9bc:	be df       	rcall	.-132    	; 0x93a <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	08 95       	ret

000009c6 <_ZN17Adafruit_MAX3186511autoConvertEb>:

void Adafruit_MAX31865::autoConvert(bool b) {
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	ec 01       	movw	r28, r24
     9ce:	16 2f       	mov	r17, r22
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
     9d0:	60 e0       	ldi	r22, 0x00	; 0
     9d2:	8c df       	rcall	.-232    	; 0x8ec <_ZN17Adafruit_MAX3186513readRegister8Eh>
	if (b) {
     9d4:	11 23       	and	r17, r17
     9d6:	19 f0       	breq	.+6      	; 0x9de <_ZN17Adafruit_MAX3186511autoConvertEb+0x18>
		t |= MAX31856_CONFIG_MODEAUTO;       // enable autoconvert
     9d8:	48 2f       	mov	r20, r24
     9da:	40 64       	ori	r20, 0x40	; 64
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <_ZN17Adafruit_MAX3186511autoConvertEb+0x1c>
	} else {
		t &= ~MAX31856_CONFIG_MODEAUTO;       // disable autoconvert
     9de:	48 2f       	mov	r20, r24
     9e0:	4f 7b       	andi	r20, 0xBF	; 191
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
     9e2:	60 e0       	ldi	r22, 0x00	; 0
     9e4:	ce 01       	movw	r24, r28
     9e6:	a9 df       	rcall	.-174    	; 0x93a <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	1f 91       	pop	r17
     9ee:	08 95       	ret

000009f0 <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires>:

void Adafruit_MAX31865::setWires(max31865_numwires_t wires ) {
     9f0:	1f 93       	push	r17
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
     9f6:	ec 01       	movw	r28, r24
     9f8:	16 2f       	mov	r17, r22
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	77 df       	rcall	.-274    	; 0x8ec <_ZN17Adafruit_MAX3186513readRegister8Eh>
	if (wires == MAX31865_3WIRE) {
     9fe:	11 30       	cpi	r17, 0x01	; 1
     a00:	19 f4       	brne	.+6      	; 0xa08 <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires+0x18>
		t |= MAX31856_CONFIG_3WIRE;
     a02:	48 2f       	mov	r20, r24
     a04:	40 61       	ori	r20, 0x10	; 16
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires+0x1c>
	} else {
		// 2 or 4 wire
		t &= ~MAX31856_CONFIG_3WIRE;
     a08:	48 2f       	mov	r20, r24
     a0a:	4f 7e       	andi	r20, 0xEF	; 239
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
     a0c:	60 e0       	ldi	r22, 0x00	; 0
     a0e:	ce 01       	movw	r24, r28
     a10:	94 df       	rcall	.-216    	; 0x93a <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
}
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	1f 91       	pop	r17
     a18:	08 95       	ret

00000a1a <_ZN17Adafruit_MAX318655beginEh>:
#include <stdlib.h>
#include "header.h"
#include <util/delay.h>


bool Adafruit_MAX31865::begin(uint8_t choose1) {
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	ec 01       	movw	r28, r24
     a22:	16 2f       	mov	r17, r22
	
	DISPLAY_I_PORT |= (1 << DISPLAY_I_PIN) | (1 << DISPLAY_II_PIN);
     a24:	8b b1       	in	r24, 0x0b	; 11
     a26:	80 63       	ori	r24, 0x30	; 48
     a28:	8b b9       	out	0x0b, r24	; 11
	SPI.begin();
     a2a:	64 d1       	rcall	.+712    	; 0xcf4 <_ZN8SPIClass5beginEv>
  static void begin();
  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    SPCR = settings.spcr;
     a2c:	85 e5       	ldi	r24, 0x55	; 85
     a2e:	8c bd       	out	0x2c, r24	; 44
	SPI.beginTransaction(SPISettings(1000000,MSBFIRST,SPI_MODE1));
	for (uint8_t i=0; i<16; i++) {
		// readRegister8(i);
	}
	choose = choose1;
     a30:	18 83       	st	Y, r17
	setWires(MAX31865_3WIRE);
     a32:	61 e0       	ldi	r22, 0x01	; 1
     a34:	ce 01       	movw	r24, r28
     a36:	dc df       	rcall	.-72     	; 0x9f0 <_ZN17Adafruit_MAX318658setWiresE17max31865_numwires>
	enableBias(false);
     a38:	60 e0       	ldi	r22, 0x00	; 0
     a3a:	ce 01       	movw	r24, r28
     a3c:	af df       	rcall	.-162    	; 0x99c <_ZN17Adafruit_MAX3186510enableBiasEb>
	autoConvert(false);
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	ce 01       	movw	r24, r28
     a42:	c1 df       	rcall	.-126    	; 0x9c6 <_ZN17Adafruit_MAX3186511autoConvertEb>
	clearFault();
     a44:	ce 01       	movw	r24, r28
     a46:	9c df       	rcall	.-200    	; 0x980 <_ZN17Adafruit_MAX3186510clearFaultEv>
	
	//Serial.print("config: "); Serial.println(readRegister8(MAX31856_CONFIG_REG), HEX);
	return true;
}
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	08 95       	ret

00000a52 <_ZN17Adafruit_MAX318657readRTDEv>:
	temp += 1.5243e-10 * rpoly;

	return temp;
}

uint16_t Adafruit_MAX31865::readRTD (void) {
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	ec 01       	movw	r28, r24
	clearFault();
     a58:	93 df       	rcall	.-218    	; 0x980 <_ZN17Adafruit_MAX3186510clearFaultEv>
	enableBias(true);
     a5a:	61 e0       	ldi	r22, 0x01	; 1
     a5c:	ce 01       	movw	r24, r28
     a5e:	9e df       	rcall	.-196    	; 0x99c <_ZN17Adafruit_MAX3186510enableBiasEb>
     a60:	83 ec       	ldi	r24, 0xC3	; 195
     a62:	99 e0       	ldi	r25, 0x09	; 9
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	f1 f7       	brne	.-4      	; 0xa64 <_ZN17Adafruit_MAX318657readRTDEv+0x12>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <_ZN17Adafruit_MAX318657readRTDEv+0x18>
     a6a:	00 00       	nop
	_delay_ms(10);
	uint8_t t = readRegister8(MAX31856_CONFIG_REG);
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	ce 01       	movw	r24, r28
     a70:	3d df       	rcall	.-390    	; 0x8ec <_ZN17Adafruit_MAX3186513readRegister8Eh>
	t |= MAX31856_CONFIG_1SHOT;
     a72:	48 2f       	mov	r20, r24
     a74:	40 62       	ori	r20, 0x20	; 32
	writeRegister8(MAX31856_CONFIG_REG, t);
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	ce 01       	movw	r24, r28
     a7a:	5f df       	rcall	.-322    	; 0x93a <_ZN17Adafruit_MAX3186514writeRegister8Ehh>
     a7c:	89 e7       	ldi	r24, 0x79	; 121
     a7e:	9f e3       	ldi	r25, 0x3F	; 63
     a80:	01 97       	sbiw	r24, 0x01	; 1
     a82:	f1 f7       	brne	.-4      	; 0xa80 <_ZN17Adafruit_MAX318657readRTDEv+0x2e>
     a84:	00 c0       	rjmp	.+0      	; 0xa86 <_ZN17Adafruit_MAX318657readRTDEv+0x34>
     a86:	00 00       	nop
	_delay_ms(65);

	uint16_t rtd = readRegister16(MAX31856_RTDMSB_REG);
     a88:	61 e0       	ldi	r22, 0x01	; 1
     a8a:	ce 01       	movw	r24, r28
     a8c:	3f df       	rcall	.-386    	; 0x90c <_ZN17Adafruit_MAX3186514readRegister16Eh>

	// remove fault
	rtd >>= 1;

	return rtd;
}
     a8e:	96 95       	lsr	r25
     a90:	87 95       	ror	r24
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	08 95       	ret

00000a98 <_ZN17Adafruit_MAX3186511temperatureEff>:
		t &= ~MAX31856_CONFIG_3WIRE;
	}
	writeRegister8(MAX31856_CONFIG_REG, t);
}

float  Adafruit_MAX31865::temperature(float RTDnominal, float refResistor) {
     a98:	4f 92       	push	r4
     a9a:	5f 92       	push	r5
     a9c:	6f 92       	push	r6
     a9e:	7f 92       	push	r7
     aa0:	8f 92       	push	r8
     aa2:	9f 92       	push	r9
     aa4:	af 92       	push	r10
     aa6:	bf 92       	push	r11
     aa8:	cf 92       	push	r12
     aaa:	df 92       	push	r13
     aac:	ef 92       	push	r14
     aae:	ff 92       	push	r15
     ab0:	0f 93       	push	r16
     ab2:	1f 93       	push	r17
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	4a 01       	movw	r8, r20
     aba:	5b 01       	movw	r10, r22
     abc:	68 01       	movw	r12, r16
     abe:	79 01       	movw	r14, r18
	// http://www.analog.com/media/en/technical-documentation/application-notes/AN709_0.pdf

	float Z1, Z2, Z3, Z4, Rt, temp;

	Rt = readRTD();
     ac0:	c8 df       	rcall	.-112    	; 0xa52 <_ZN17Adafruit_MAX318657readRTDEv>
     ac2:	bc 01       	movw	r22, r24
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	51 d2       	rcall	.+1186   	; 0xf6c <__floatunsisf>
	Rt /= 32768;
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	40 e0       	ldi	r20, 0x00	; 0
     ad0:	58 e3       	ldi	r21, 0x38	; 56
     ad2:	02 d3       	rcall	.+1540   	; 0x10d8 <__mulsf3>
	Rt *= refResistor;
     ad4:	a7 01       	movw	r20, r14
     ad6:	96 01       	movw	r18, r12
     ad8:	ff d2       	rcall	.+1534   	; 0x10d8 <__mulsf3>
     ada:	2b 01       	movw	r4, r22
     adc:	3c 01       	movw	r6, r24
	
	// Serial.print("\nResistance: "); Serial.println(Rt, 8);

	Z1 = -RTD_A;
	Z2 = RTD_A * RTD_A - (4 * RTD_B);
	Z3 = (4 * RTD_B) / RTDnominal;
     ade:	a5 01       	movw	r20, r10
     ae0:	94 01       	movw	r18, r8
     ae2:	6f e7       	ldi	r22, 0x7F	; 127
     ae4:	75 e0       	ldi	r23, 0x05	; 5
     ae6:	8b e1       	ldi	r24, 0x1B	; 27
     ae8:	96 eb       	ldi	r25, 0xB6	; 182
     aea:	a7 d1       	rcall	.+846    	; 0xe3a <__divsf3>
     aec:	6b 01       	movw	r12, r22
     aee:	7c 01       	movw	r14, r24
	Z4 = 2 * RTD_B;

	temp = Z2 + (Z3 * Rt);
     af0:	a3 01       	movw	r20, r6
     af2:	92 01       	movw	r18, r4
     af4:	c7 01       	movw	r24, r14
     af6:	b6 01       	movw	r22, r12
     af8:	ef d2       	rcall	.+1502   	; 0x10d8 <__mulsf3>
     afa:	26 e1       	ldi	r18, 0x16	; 22
     afc:	33 e8       	ldi	r19, 0x83	; 131
     afe:	43 e9       	ldi	r20, 0x93	; 147
     b00:	57 e3       	ldi	r21, 0x37	; 55
     b02:	33 d1       	rcall	.+614    	; 0xd6a <__addsf3>
	temp = (sqrt(temp) + Z1) / Z4;
     b04:	50 d3       	rcall	.+1696   	; 0x11a6 <sqrt>
     b06:	22 e3       	ldi	r18, 0x32	; 50
     b08:	31 e1       	ldi	r19, 0x11	; 17
     b0a:	40 e8       	ldi	r20, 0x80	; 128
     b0c:	5b e3       	ldi	r21, 0x3B	; 59
     b0e:	2c d1       	rcall	.+600    	; 0xd68 <__subsf3>
     b10:	2f e7       	ldi	r18, 0x7F	; 127
     b12:	35 e0       	ldi	r19, 0x05	; 5
     b14:	4b e9       	ldi	r20, 0x9B	; 155
     b16:	55 eb       	ldi	r21, 0xB5	; 181
     b18:	90 d1       	rcall	.+800    	; 0xe3a <__divsf3>
     b1a:	06 2f       	mov	r16, r22
     b1c:	17 2f       	mov	r17, r23
     b1e:	d8 2f       	mov	r29, r24
     b20:	c9 2f       	mov	r28, r25
	
	if (temp >= 0) return temp;
     b22:	20 e0       	ldi	r18, 0x00	; 0
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	a9 01       	movw	r20, r18
     b28:	d3 d2       	rcall	.+1446   	; 0x10d0 <__gesf2>
     b2a:	88 23       	and	r24, r24
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <_ZN17Adafruit_MAX3186511temperatureEff+0x98>
     b2e:	60 c0       	rjmp	.+192    	; 0xbf0 <_ZN17Adafruit_MAX3186511temperatureEff+0x158>

	// ugh.
	Rt /= RTDnominal;
     b30:	a5 01       	movw	r20, r10
     b32:	94 01       	movw	r18, r8
     b34:	c3 01       	movw	r24, r6
     b36:	b2 01       	movw	r22, r4
     b38:	80 d1       	rcall	.+768    	; 0xe3a <__divsf3>
	Rt *= 100;      // normalize to 100 ohm
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	48 ec       	ldi	r20, 0xC8	; 200
     b40:	52 e4       	ldi	r21, 0x42	; 66
     b42:	ca d2       	rcall	.+1428   	; 0x10d8 <__mulsf3>
     b44:	6b 01       	movw	r12, r22
     b46:	7c 01       	movw	r14, r24

	float rpoly = Rt;

	temp = -242.02;
	temp += 2.2228 * rpoly;
     b48:	2b e5       	ldi	r18, 0x5B	; 91
     b4a:	32 e4       	ldi	r19, 0x42	; 66
     b4c:	4e e0       	ldi	r20, 0x0E	; 14
     b4e:	50 e4       	ldi	r21, 0x40	; 64
     b50:	c3 d2       	rcall	.+1414   	; 0x10d8 <__mulsf3>
     b52:	2f e1       	ldi	r18, 0x1F	; 31
     b54:	35 e0       	ldi	r19, 0x05	; 5
     b56:	42 e7       	ldi	r20, 0x72	; 114
     b58:	53 ec       	ldi	r21, 0xC3	; 195
     b5a:	07 d1       	rcall	.+526    	; 0xd6a <__addsf3>
     b5c:	2b 01       	movw	r4, r22
     b5e:	3c 01       	movw	r6, r24
	rpoly *= Rt;  // square
     b60:	a7 01       	movw	r20, r14
     b62:	96 01       	movw	r18, r12
     b64:	c7 01       	movw	r24, r14
     b66:	b6 01       	movw	r22, r12
     b68:	b7 d2       	rcall	.+1390   	; 0x10d8 <__mulsf3>
     b6a:	4b 01       	movw	r8, r22
     b6c:	5c 01       	movw	r10, r24
	temp += 2.5859e-3 * rpoly;
     b6e:	24 e3       	ldi	r18, 0x34	; 52
     b70:	38 e7       	ldi	r19, 0x78	; 120
     b72:	49 e2       	ldi	r20, 0x29	; 41
     b74:	5b e3       	ldi	r21, 0x3B	; 59
     b76:	b0 d2       	rcall	.+1376   	; 0x10d8 <__mulsf3>
     b78:	a3 01       	movw	r20, r6
     b7a:	92 01       	movw	r18, r4
     b7c:	f6 d0       	rcall	.+492    	; 0xd6a <__addsf3>
     b7e:	2b 01       	movw	r4, r22
     b80:	3c 01       	movw	r6, r24
	rpoly *= Rt;  // ^3
     b82:	a7 01       	movw	r20, r14
     b84:	96 01       	movw	r18, r12
     b86:	c5 01       	movw	r24, r10
     b88:	b4 01       	movw	r22, r8
     b8a:	a6 d2       	rcall	.+1356   	; 0x10d8 <__mulsf3>
     b8c:	4b 01       	movw	r8, r22
     b8e:	5c 01       	movw	r10, r24
	temp -= 4.8260e-6 * rpoly;
     b90:	26 e0       	ldi	r18, 0x06	; 6
     b92:	3f ee       	ldi	r19, 0xEF	; 239
     b94:	41 ea       	ldi	r20, 0xA1	; 161
     b96:	56 e3       	ldi	r21, 0x36	; 54
     b98:	9f d2       	rcall	.+1342   	; 0x10d8 <__mulsf3>
     b9a:	9b 01       	movw	r18, r22
     b9c:	ac 01       	movw	r20, r24
     b9e:	c3 01       	movw	r24, r6
     ba0:	b2 01       	movw	r22, r4
     ba2:	e2 d0       	rcall	.+452    	; 0xd68 <__subsf3>
     ba4:	2b 01       	movw	r4, r22
     ba6:	3c 01       	movw	r6, r24
	rpoly *= Rt;  // ^4
     ba8:	a7 01       	movw	r20, r14
     baa:	96 01       	movw	r18, r12
     bac:	c5 01       	movw	r24, r10
     bae:	b4 01       	movw	r22, r8
     bb0:	93 d2       	rcall	.+1318   	; 0x10d8 <__mulsf3>
     bb2:	4b 01       	movw	r8, r22
     bb4:	5c 01       	movw	r10, r24
	temp -= 2.8183e-8 * rpoly;
     bb6:	23 e1       	ldi	r18, 0x13	; 19
     bb8:	37 e1       	ldi	r19, 0x17	; 23
     bba:	42 ef       	ldi	r20, 0xF2	; 242
     bbc:	52 e3       	ldi	r21, 0x32	; 50
     bbe:	8c d2       	rcall	.+1304   	; 0x10d8 <__mulsf3>
     bc0:	9b 01       	movw	r18, r22
     bc2:	ac 01       	movw	r20, r24
     bc4:	c3 01       	movw	r24, r6
     bc6:	b2 01       	movw	r22, r4
     bc8:	cf d0       	rcall	.+414    	; 0xd68 <__subsf3>
     bca:	2b 01       	movw	r4, r22
     bcc:	3c 01       	movw	r6, r24
	rpoly *= Rt;  // ^5
     bce:	a7 01       	movw	r20, r14
     bd0:	96 01       	movw	r18, r12
     bd2:	c5 01       	movw	r24, r10
     bd4:	b4 01       	movw	r22, r8
     bd6:	80 d2       	rcall	.+1280   	; 0x10d8 <__mulsf3>
	temp += 1.5243e-10 * rpoly;
     bd8:	2b e3       	ldi	r18, 0x3B	; 59
     bda:	39 e9       	ldi	r19, 0x99	; 153
     bdc:	47 e2       	ldi	r20, 0x27	; 39
     bde:	5f e2       	ldi	r21, 0x2F	; 47
     be0:	7b d2       	rcall	.+1270   	; 0x10d8 <__mulsf3>
     be2:	a3 01       	movw	r20, r6
     be4:	92 01       	movw	r18, r4
     be6:	c1 d0       	rcall	.+386    	; 0xd6a <__addsf3>

	return temp;
     be8:	06 2f       	mov	r16, r22
     bea:	17 2f       	mov	r17, r23
     bec:	d8 2f       	mov	r29, r24
     bee:	c9 2f       	mov	r28, r25
}
     bf0:	60 2f       	mov	r22, r16
     bf2:	71 2f       	mov	r23, r17
     bf4:	8d 2f       	mov	r24, r29
     bf6:	9c 2f       	mov	r25, r28
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	1f 91       	pop	r17
     bfe:	0f 91       	pop	r16
     c00:	ff 90       	pop	r15
     c02:	ef 90       	pop	r14
     c04:	df 90       	pop	r13
     c06:	cf 90       	pop	r12
     c08:	bf 90       	pop	r11
     c0a:	af 90       	pop	r10
     c0c:	9f 90       	pop	r9
     c0e:	8f 90       	pop	r8
     c10:	7f 90       	pop	r7
     c12:	6f 90       	pop	r6
     c14:	5f 90       	pop	r5
     c16:	4f 90       	pop	r4
     c18:	08 95       	ret

00000c1a <_Z8spi_initv>:

#include <avr/io.h>

void spi_init() {
	// SPI Enable, Master mode
	SPCR |= (1 << SPE) | (1 << MSTR)| (1<<SPR1);
     c1a:	8c b5       	in	r24, 0x2c	; 44
     c1c:	82 65       	ori	r24, 0x52	; 82
     c1e:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ ((1 << SPR0) | (1<< CPHA));
     c20:	8c b5       	in	r24, 0x2c	; 44
     c22:	8a 7f       	andi	r24, 0xFA	; 250
     c24:	8c bd       	out	0x2c, r24	; 44
	
	// SCK MOSI CS/LOAD/SS
	DDRB |= (1 << PIN_SCK) | (1 << PIN_MOSI) ;
     c26:	84 b1       	in	r24, 0x04	; 4
     c28:	88 62       	ori	r24, 0x28	; 40
     c2a:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1  << PIN_SS);
     c2c:	22 9a       	sbi	0x04, 2	; 4
	
	//slave pins
	DDR(DISPLAY_I_PORT) |= (1 << DISPLAY_I_PIN) | (1 << DISPLAY_II_PIN);
     c2e:	8a b1       	in	r24, 0x0a	; 10
     c30:	80 63       	ori	r24, 0x30	; 48
     c32:	8a b9       	out	0x0a, r24	; 10
	
	DISPLAY_I_PORT |= (1 << DISPLAY_I_PIN); 
     c34:	5d 9a       	sbi	0x0b, 5	; 11
	DISPLAY_II_PORT |= (1 << DISPLAY_II_PIN);
     c36:	5c 9a       	sbi	0x0b, 4	; 11
     c38:	08 95       	ret

00000c3a <_Z11spiSendBytec>:
}

void spiSendByte (char databyte)
{
	// Copy data into the SPI data register
	SPDR = databyte;
     c3a:	8e bd       	out	0x2e, r24	; 46
	// Wait until transfer is complete
	while (!(SPSR & (1 << SPIF)));
     c3c:	0d b4       	in	r0, 0x2d	; 45
     c3e:	07 fe       	sbrs	r0, 7
     c40:	fd cf       	rjmp	.-6      	; 0xc3c <_Z11spiSendBytec+0x2>
}
     c42:	08 95       	ret

00000c44 <_ZN7max721911MAX7219_setEiii>:
 *  Author: swain
 */ 
#include "max7219.h"
#include "spiD.h"

void max7219::MAX7219_set(int numm, int ii, int jj) {
     c44:	fc 01       	movw	r30, r24
	num = numm;
     c46:	71 83       	std	Z+1, r23	; 0x01
     c48:	60 83       	st	Z, r22
	digits1 = ii;
     c4a:	53 83       	std	Z+3, r21	; 0x03
     c4c:	42 83       	std	Z+2, r20	; 0x02
	digits2 = jj;
     c4e:	35 83       	std	Z+5, r19	; 0x05
     c50:	24 83       	std	Z+4, r18	; 0x04
     c52:	08 95       	ret

00000c54 <_ZN7max721917MAX7219_writeDataEcc>:
	max7219::MAX7219_writeData(MAX7219_MODE_INTENSITY, 0x0f);
	max7219::MAX7219_writeData(MAX7219_MODE_POWER, ON);
}

void max7219::MAX7219_writeData(char data_register, char data)
{
     c54:	1f 93       	push	r17
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	ec 01       	movw	r28, r24
     c5c:	14 2f       	mov	r17, r20
	
	switch(max7219::num){
     c5e:	28 81       	ld	r18, Y
     c60:	39 81       	ldd	r19, Y+1	; 0x01
     c62:	21 15       	cp	r18, r1
     c64:	31 05       	cpc	r19, r1
     c66:	21 f0       	breq	.+8      	; 0xc70 <_ZN7max721917MAX7219_writeDataEcc+0x1c>
     c68:	21 30       	cpi	r18, 0x01	; 1
     c6a:	31 05       	cpc	r19, r1
     c6c:	19 f0       	breq	.+6      	; 0xc74 <_ZN7max721917MAX7219_writeDataEcc+0x20>
     c6e:	03 c0       	rjmp	.+6      	; 0xc76 <_ZN7max721917MAX7219_writeDataEcc+0x22>
		case 0:
		MAX7219_LOAD_ON_1(0);
     c70:	5d 98       	cbi	0x0b, 5	; 11
		break;
     c72:	01 c0       	rjmp	.+2      	; 0xc76 <_ZN7max721917MAX7219_writeDataEcc+0x22>
		case 1:
		MAX7219_LOAD_ON_2(1);
     c74:	5c 98       	cbi	0x0b, 4	; 11
		break;
	}		
		
	// Send the register where the data will be stored
	spiSendByte(data_register);
     c76:	86 2f       	mov	r24, r22
     c78:	e0 df       	rcall	.-64     	; 0xc3a <_Z11spiSendBytec>
	// Send the data to be stored
	spiSendByte(data);
     c7a:	81 2f       	mov	r24, r17
     c7c:	de df       	rcall	.-68     	; 0xc3a <_Z11spiSendBytec>
	
	switch(max7219::num){
     c7e:	88 81       	ld	r24, Y
     c80:	99 81       	ldd	r25, Y+1	; 0x01
     c82:	00 97       	sbiw	r24, 0x00	; 0
     c84:	19 f0       	breq	.+6      	; 0xc8c <_ZN7max721917MAX7219_writeDataEcc+0x38>
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	19 f0       	breq	.+6      	; 0xc90 <_ZN7max721917MAX7219_writeDataEcc+0x3c>
     c8a:	03 c0       	rjmp	.+6      	; 0xc92 <_ZN7max721917MAX7219_writeDataEcc+0x3e>
		case 0:
		MAX7219_LOAD_OFF_1(0);
     c8c:	5d 9a       	sbi	0x0b, 5	; 11
		break;
     c8e:	01 c0       	rjmp	.+2      	; 0xc92 <_ZN7max721917MAX7219_writeDataEcc+0x3e>
		case 1:
		MAX7219_LOAD_OFF_2(1);
     c90:	5c 9a       	sbi	0x0b, 4	; 11
		break;
	}
	
}
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	1f 91       	pop	r17
     c98:	08 95       	ret

00000c9a <_ZN7max721912MAX7219_initEv>:
	num = numm;
	digits1 = ii;
	digits2 = jj;
}

void max7219::MAX7219_init() {
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	ec 01       	movw	r28, r24
	spi_init();
     ca0:	bc df       	rcall	.-136    	; 0xc1a <_Z8spi_initv>
	// Decode mode to "Font Code-B"
	max7219::MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
     ca2:	4f ef       	ldi	r20, 0xFF	; 255
     ca4:	69 e0       	ldi	r22, 0x09	; 9
     ca6:	ce 01       	movw	r24, r28
     ca8:	d5 df       	rcall	.-86     	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(MAX7219_MODE_TEST,0);
     caa:	40 e0       	ldi	r20, 0x00	; 0
     cac:	6f e0       	ldi	r22, 0x0F	; 15
     cae:	ce 01       	movw	r24, r28
     cb0:	d1 df       	rcall	.-94     	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
	// Scan limit runs from 0.
	max7219::MAX7219_writeData(MAX7219_MODE_SCAN_LIMIT, 7); //7 or 8?
     cb2:	47 e0       	ldi	r20, 0x07	; 7
     cb4:	6b e0       	ldi	r22, 0x0B	; 11
     cb6:	ce 01       	movw	r24, r28
     cb8:	cd df       	rcall	.-102    	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(MAX7219_MODE_INTENSITY, 0x0f);
     cba:	4f e0       	ldi	r20, 0x0F	; 15
     cbc:	6a e0       	ldi	r22, 0x0A	; 10
     cbe:	ce 01       	movw	r24, r28
     cc0:	c9 df       	rcall	.-110    	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(MAX7219_MODE_POWER, ON);
     cc2:	41 e0       	ldi	r20, 0x01	; 1
     cc4:	6c e0       	ldi	r22, 0x0C	; 12
     cc6:	ce 01       	movw	r24, r28
     cc8:	c5 df       	rcall	.-118    	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
}
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	08 95       	ret

00000cd0 <_ZN7max721920MAX7219_clearDisplayEv>:
	}
	
}

void max7219::MAX7219_clearDisplay()
{
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	cf 93       	push	r28
     cd6:	8c 01       	movw	r16, r24
	//char i = digitsInUse;
	char i = max7219::digits1 + max7219::digits2 ;
     cd8:	fc 01       	movw	r30, r24
     cda:	c4 81       	ldd	r28, Z+4	; 0x04
     cdc:	92 81       	ldd	r25, Z+2	; 0x02
     cde:	c9 0f       	add	r28, r25
	// Loop until 0, but don't run for zero
	do {
		// Set each display in use to blank
		max7219::MAX7219_writeData(i, MAX7219_CHAR_BLANK);
     ce0:	4f e0       	ldi	r20, 0x0F	; 15
     ce2:	6c 2f       	mov	r22, r28
     ce4:	c8 01       	movw	r24, r16
     ce6:	b6 df       	rcall	.-148    	; 0xc54 <_ZN7max721917MAX7219_writeDataEcc>
void max7219::MAX7219_clearDisplay()
{
	//char i = digitsInUse;
	char i = max7219::digits1 + max7219::digits2 ;
	// Loop until 0, but don't run for zero
	do {
     ce8:	c1 50       	subi	r28, 0x01	; 1
     cea:	d1 f7       	brne	.-12     	; 0xce0 <_ZN7max721920MAX7219_clearDisplayEv+0x10>
		// Set each display in use to blank
		max7219::MAX7219_writeData(i, MAX7219_CHAR_BLANK);
	} while (--i);
}
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	08 95       	ret

00000cf4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
  
    //pinMode(SS, OUTPUT);
	DDRB |= (1 << PINB2);
     cf4:	22 9a       	sbi	0x04, 2	; 4
    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
     cf6:	8c b5       	in	r24, 0x2c	; 44
     cf8:	80 61       	ori	r24, 0x10	; 16
     cfa:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
     cfc:	8c b5       	in	r24, 0x2c	; 44
     cfe:	80 64       	ori	r24, 0x40	; 64
     d00:	8c bd       	out	0x2c, r24	; 44
	SPCR &=~ ((1 << SPR1) | (1 << SPR0));
     d02:	8c b5       	in	r24, 0x2c	; 44
     d04:	8c 7f       	andi	r24, 0xFC	; 252
     d06:	8c bd       	out	0x2c, r24	; 44
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
	
    //pinMode(SCK, OUTPUT);
	DDRB |= (1 << PINB5);
     d08:	25 9a       	sbi	0x04, 5	; 4
    //pinMode(MOSI, OUTPUT);
	DDRB |= (1 << PINB3);
     d0a:	23 9a       	sbi	0x04, 3	; 4
	
	DDR(TEMP_I_PORT ) |= (1 << TEMP_I_PIN ) | (1 << TEMP_I_PIN );
     d0c:	21 9a       	sbi	0x04, 1	; 4
	TEMP_I_PORT  |= (1 << TEMP_I_PIN ) | (1 << TEMP_I_PIN );
     d0e:	29 9a       	sbi	0x05, 1	; 5
     d10:	08 95       	ret

00000d12 <_ZN6Timerr11setTimerNumEi>:
	SET_COMPARE(1, A);
}

void Timerr::resetTimer() {
	
	TCNT1 = 0;
     d12:	fc 01       	movw	r30, r24
     d14:	71 83       	std	Z+1, r23	; 0x01
     d16:	60 83       	st	Z, r22
     d18:	08 95       	ret

00000d1a <_ZN6Timerr19setCompareInterruptEv>:
     d1a:	ef e6       	ldi	r30, 0x6F	; 111
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	82 60       	ori	r24, 0x02	; 2
     d22:	80 83       	st	Z, r24
     d24:	08 95       	ret

00000d26 <_ZN6Timerr16startCustomTimerEi>:
	
}
void Timerr::startCustomTimer(int milli_sec) {
	
		int ocr = (15.625 * milli_sec);
     d26:	07 2e       	mov	r0, r23
     d28:	00 0c       	add	r0, r0
     d2a:	88 0b       	sbc	r24, r24
     d2c:	99 0b       	sbc	r25, r25
     d2e:	20 d1       	rcall	.+576    	; 0xf70 <__floatsisf>
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	4a e7       	ldi	r20, 0x7A	; 122
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	cf d1       	rcall	.+926    	; 0x10d8 <__mulsf3>
     d3a:	e7 d0       	rcall	.+462    	; 0xf0a <__fixsfsi>
		OCR1A = ocr;
     d3c:	70 93 89 00 	sts	0x0089, r23
     d40:	60 93 88 00 	sts	0x0088, r22
		START_TIMERR(1,0,2); //for proteus use 5,0,1 and for real life use 5,0,2
     d44:	e1 e8       	ldi	r30, 0x81	; 129
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	85 60       	ori	r24, 0x05	; 5
     d4c:	80 83       	st	Z, r24
     d4e:	08 95       	ret

00000d50 <_Z9initUART0v>:
char buffer=0,buffer1=0,buffer2=0;

void initUART0(void)
{
	//set baud rate
	UBRR0H=(MYUBRR0)>>8;
     d50:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L=MYUBRR0;
     d54:	87 e6       	ldi	r24, 0x67	; 103
     d56:	80 93 c4 00 	sts	0x00C4, r24

	//Enable Receiver and Transmitter
	UCSR0B = ((1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0));
     d5a:	88 e9       	ldi	r24, 0x98	; 152
     d5c:	80 93 c1 00 	sts	0x00C1, r24
	
	//set frame format
	UCSR0C=((1<<UCSZ00)|(1<<UCSZ01));
     d60:	86 e0       	ldi	r24, 0x06	; 6
     d62:	80 93 c2 00 	sts	0x00C2, r24
     d66:	08 95       	ret

00000d68 <__subsf3>:
     d68:	50 58       	subi	r21, 0x80	; 128

00000d6a <__addsf3>:
     d6a:	bb 27       	eor	r27, r27
     d6c:	aa 27       	eor	r26, r26
     d6e:	0e d0       	rcall	.+28     	; 0xd8c <__addsf3x>
     d70:	75 c1       	rjmp	.+746    	; 0x105c <__fp_round>
     d72:	66 d1       	rcall	.+716    	; 0x1040 <__fp_pscA>
     d74:	30 f0       	brcs	.+12     	; 0xd82 <__addsf3+0x18>
     d76:	6b d1       	rcall	.+726    	; 0x104e <__fp_pscB>
     d78:	20 f0       	brcs	.+8      	; 0xd82 <__addsf3+0x18>
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__addsf3+0x1e>
     d7c:	9f 3f       	cpi	r25, 0xFF	; 255
     d7e:	11 f4       	brne	.+4      	; 0xd84 <__addsf3+0x1a>
     d80:	1e f4       	brtc	.+6      	; 0xd88 <__addsf3+0x1e>
     d82:	5b c1       	rjmp	.+694    	; 0x103a <__fp_nan>
     d84:	0e f4       	brtc	.+2      	; 0xd88 <__addsf3+0x1e>
     d86:	e0 95       	com	r30
     d88:	e7 fb       	bst	r30, 7
     d8a:	51 c1       	rjmp	.+674    	; 0x102e <__fp_inf>

00000d8c <__addsf3x>:
     d8c:	e9 2f       	mov	r30, r25
     d8e:	77 d1       	rcall	.+750    	; 0x107e <__fp_split3>
     d90:	80 f3       	brcs	.-32     	; 0xd72 <__addsf3+0x8>
     d92:	ba 17       	cp	r27, r26
     d94:	62 07       	cpc	r22, r18
     d96:	73 07       	cpc	r23, r19
     d98:	84 07       	cpc	r24, r20
     d9a:	95 07       	cpc	r25, r21
     d9c:	18 f0       	brcs	.+6      	; 0xda4 <__addsf3x+0x18>
     d9e:	71 f4       	brne	.+28     	; 0xdbc <__addsf3x+0x30>
     da0:	9e f5       	brtc	.+102    	; 0xe08 <__addsf3x+0x7c>
     da2:	8f c1       	rjmp	.+798    	; 0x10c2 <__fp_zero>
     da4:	0e f4       	brtc	.+2      	; 0xda8 <__addsf3x+0x1c>
     da6:	e0 95       	com	r30
     da8:	0b 2e       	mov	r0, r27
     daa:	ba 2f       	mov	r27, r26
     dac:	a0 2d       	mov	r26, r0
     dae:	0b 01       	movw	r0, r22
     db0:	b9 01       	movw	r22, r18
     db2:	90 01       	movw	r18, r0
     db4:	0c 01       	movw	r0, r24
     db6:	ca 01       	movw	r24, r20
     db8:	a0 01       	movw	r20, r0
     dba:	11 24       	eor	r1, r1
     dbc:	ff 27       	eor	r31, r31
     dbe:	59 1b       	sub	r21, r25
     dc0:	99 f0       	breq	.+38     	; 0xde8 <__addsf3x+0x5c>
     dc2:	59 3f       	cpi	r21, 0xF9	; 249
     dc4:	50 f4       	brcc	.+20     	; 0xdda <__addsf3x+0x4e>
     dc6:	50 3e       	cpi	r21, 0xE0	; 224
     dc8:	68 f1       	brcs	.+90     	; 0xe24 <__addsf3x+0x98>
     dca:	1a 16       	cp	r1, r26
     dcc:	f0 40       	sbci	r31, 0x00	; 0
     dce:	a2 2f       	mov	r26, r18
     dd0:	23 2f       	mov	r18, r19
     dd2:	34 2f       	mov	r19, r20
     dd4:	44 27       	eor	r20, r20
     dd6:	58 5f       	subi	r21, 0xF8	; 248
     dd8:	f3 cf       	rjmp	.-26     	; 0xdc0 <__addsf3x+0x34>
     dda:	46 95       	lsr	r20
     ddc:	37 95       	ror	r19
     dde:	27 95       	ror	r18
     de0:	a7 95       	ror	r26
     de2:	f0 40       	sbci	r31, 0x00	; 0
     de4:	53 95       	inc	r21
     de6:	c9 f7       	brne	.-14     	; 0xdda <__addsf3x+0x4e>
     de8:	7e f4       	brtc	.+30     	; 0xe08 <__addsf3x+0x7c>
     dea:	1f 16       	cp	r1, r31
     dec:	ba 0b       	sbc	r27, r26
     dee:	62 0b       	sbc	r22, r18
     df0:	73 0b       	sbc	r23, r19
     df2:	84 0b       	sbc	r24, r20
     df4:	ba f0       	brmi	.+46     	; 0xe24 <__addsf3x+0x98>
     df6:	91 50       	subi	r25, 0x01	; 1
     df8:	a1 f0       	breq	.+40     	; 0xe22 <__addsf3x+0x96>
     dfa:	ff 0f       	add	r31, r31
     dfc:	bb 1f       	adc	r27, r27
     dfe:	66 1f       	adc	r22, r22
     e00:	77 1f       	adc	r23, r23
     e02:	88 1f       	adc	r24, r24
     e04:	c2 f7       	brpl	.-16     	; 0xdf6 <__addsf3x+0x6a>
     e06:	0e c0       	rjmp	.+28     	; 0xe24 <__addsf3x+0x98>
     e08:	ba 0f       	add	r27, r26
     e0a:	62 1f       	adc	r22, r18
     e0c:	73 1f       	adc	r23, r19
     e0e:	84 1f       	adc	r24, r20
     e10:	48 f4       	brcc	.+18     	; 0xe24 <__addsf3x+0x98>
     e12:	87 95       	ror	r24
     e14:	77 95       	ror	r23
     e16:	67 95       	ror	r22
     e18:	b7 95       	ror	r27
     e1a:	f7 95       	ror	r31
     e1c:	9e 3f       	cpi	r25, 0xFE	; 254
     e1e:	08 f0       	brcs	.+2      	; 0xe22 <__addsf3x+0x96>
     e20:	b3 cf       	rjmp	.-154    	; 0xd88 <__addsf3+0x1e>
     e22:	93 95       	inc	r25
     e24:	88 0f       	add	r24, r24
     e26:	08 f0       	brcs	.+2      	; 0xe2a <__addsf3x+0x9e>
     e28:	99 27       	eor	r25, r25
     e2a:	ee 0f       	add	r30, r30
     e2c:	97 95       	ror	r25
     e2e:	87 95       	ror	r24
     e30:	08 95       	ret

00000e32 <__cmpsf2>:
     e32:	d9 d0       	rcall	.+434    	; 0xfe6 <__fp_cmp>
     e34:	08 f4       	brcc	.+2      	; 0xe38 <__cmpsf2+0x6>
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	08 95       	ret

00000e3a <__divsf3>:
     e3a:	0c d0       	rcall	.+24     	; 0xe54 <__divsf3x>
     e3c:	0f c1       	rjmp	.+542    	; 0x105c <__fp_round>
     e3e:	07 d1       	rcall	.+526    	; 0x104e <__fp_pscB>
     e40:	40 f0       	brcs	.+16     	; 0xe52 <__divsf3+0x18>
     e42:	fe d0       	rcall	.+508    	; 0x1040 <__fp_pscA>
     e44:	30 f0       	brcs	.+12     	; 0xe52 <__divsf3+0x18>
     e46:	21 f4       	brne	.+8      	; 0xe50 <__divsf3+0x16>
     e48:	5f 3f       	cpi	r21, 0xFF	; 255
     e4a:	19 f0       	breq	.+6      	; 0xe52 <__divsf3+0x18>
     e4c:	f0 c0       	rjmp	.+480    	; 0x102e <__fp_inf>
     e4e:	51 11       	cpse	r21, r1
     e50:	39 c1       	rjmp	.+626    	; 0x10c4 <__fp_szero>
     e52:	f3 c0       	rjmp	.+486    	; 0x103a <__fp_nan>

00000e54 <__divsf3x>:
     e54:	14 d1       	rcall	.+552    	; 0x107e <__fp_split3>
     e56:	98 f3       	brcs	.-26     	; 0xe3e <__divsf3+0x4>

00000e58 <__divsf3_pse>:
     e58:	99 23       	and	r25, r25
     e5a:	c9 f3       	breq	.-14     	; 0xe4e <__divsf3+0x14>
     e5c:	55 23       	and	r21, r21
     e5e:	b1 f3       	breq	.-20     	; 0xe4c <__divsf3+0x12>
     e60:	95 1b       	sub	r25, r21
     e62:	55 0b       	sbc	r21, r21
     e64:	bb 27       	eor	r27, r27
     e66:	aa 27       	eor	r26, r26
     e68:	62 17       	cp	r22, r18
     e6a:	73 07       	cpc	r23, r19
     e6c:	84 07       	cpc	r24, r20
     e6e:	38 f0       	brcs	.+14     	; 0xe7e <__divsf3_pse+0x26>
     e70:	9f 5f       	subi	r25, 0xFF	; 255
     e72:	5f 4f       	sbci	r21, 0xFF	; 255
     e74:	22 0f       	add	r18, r18
     e76:	33 1f       	adc	r19, r19
     e78:	44 1f       	adc	r20, r20
     e7a:	aa 1f       	adc	r26, r26
     e7c:	a9 f3       	breq	.-22     	; 0xe68 <__divsf3_pse+0x10>
     e7e:	33 d0       	rcall	.+102    	; 0xee6 <__divsf3_pse+0x8e>
     e80:	0e 2e       	mov	r0, r30
     e82:	3a f0       	brmi	.+14     	; 0xe92 <__divsf3_pse+0x3a>
     e84:	e0 e8       	ldi	r30, 0x80	; 128
     e86:	30 d0       	rcall	.+96     	; 0xee8 <__divsf3_pse+0x90>
     e88:	91 50       	subi	r25, 0x01	; 1
     e8a:	50 40       	sbci	r21, 0x00	; 0
     e8c:	e6 95       	lsr	r30
     e8e:	00 1c       	adc	r0, r0
     e90:	ca f7       	brpl	.-14     	; 0xe84 <__divsf3_pse+0x2c>
     e92:	29 d0       	rcall	.+82     	; 0xee6 <__divsf3_pse+0x8e>
     e94:	fe 2f       	mov	r31, r30
     e96:	27 d0       	rcall	.+78     	; 0xee6 <__divsf3_pse+0x8e>
     e98:	66 0f       	add	r22, r22
     e9a:	77 1f       	adc	r23, r23
     e9c:	88 1f       	adc	r24, r24
     e9e:	bb 1f       	adc	r27, r27
     ea0:	26 17       	cp	r18, r22
     ea2:	37 07       	cpc	r19, r23
     ea4:	48 07       	cpc	r20, r24
     ea6:	ab 07       	cpc	r26, r27
     ea8:	b0 e8       	ldi	r27, 0x80	; 128
     eaa:	09 f0       	breq	.+2      	; 0xeae <__divsf3_pse+0x56>
     eac:	bb 0b       	sbc	r27, r27
     eae:	80 2d       	mov	r24, r0
     eb0:	bf 01       	movw	r22, r30
     eb2:	ff 27       	eor	r31, r31
     eb4:	93 58       	subi	r25, 0x83	; 131
     eb6:	5f 4f       	sbci	r21, 0xFF	; 255
     eb8:	2a f0       	brmi	.+10     	; 0xec4 <__divsf3_pse+0x6c>
     eba:	9e 3f       	cpi	r25, 0xFE	; 254
     ebc:	51 05       	cpc	r21, r1
     ebe:	68 f0       	brcs	.+26     	; 0xeda <__divsf3_pse+0x82>
     ec0:	b6 c0       	rjmp	.+364    	; 0x102e <__fp_inf>
     ec2:	00 c1       	rjmp	.+512    	; 0x10c4 <__fp_szero>
     ec4:	5f 3f       	cpi	r21, 0xFF	; 255
     ec6:	ec f3       	brlt	.-6      	; 0xec2 <__divsf3_pse+0x6a>
     ec8:	98 3e       	cpi	r25, 0xE8	; 232
     eca:	dc f3       	brlt	.-10     	; 0xec2 <__divsf3_pse+0x6a>
     ecc:	86 95       	lsr	r24
     ece:	77 95       	ror	r23
     ed0:	67 95       	ror	r22
     ed2:	b7 95       	ror	r27
     ed4:	f7 95       	ror	r31
     ed6:	9f 5f       	subi	r25, 0xFF	; 255
     ed8:	c9 f7       	brne	.-14     	; 0xecc <__divsf3_pse+0x74>
     eda:	88 0f       	add	r24, r24
     edc:	91 1d       	adc	r25, r1
     ede:	96 95       	lsr	r25
     ee0:	87 95       	ror	r24
     ee2:	97 f9       	bld	r25, 7
     ee4:	08 95       	ret
     ee6:	e1 e0       	ldi	r30, 0x01	; 1
     ee8:	66 0f       	add	r22, r22
     eea:	77 1f       	adc	r23, r23
     eec:	88 1f       	adc	r24, r24
     eee:	bb 1f       	adc	r27, r27
     ef0:	62 17       	cp	r22, r18
     ef2:	73 07       	cpc	r23, r19
     ef4:	84 07       	cpc	r24, r20
     ef6:	ba 07       	cpc	r27, r26
     ef8:	20 f0       	brcs	.+8      	; 0xf02 <__divsf3_pse+0xaa>
     efa:	62 1b       	sub	r22, r18
     efc:	73 0b       	sbc	r23, r19
     efe:	84 0b       	sbc	r24, r20
     f00:	ba 0b       	sbc	r27, r26
     f02:	ee 1f       	adc	r30, r30
     f04:	88 f7       	brcc	.-30     	; 0xee8 <__divsf3_pse+0x90>
     f06:	e0 95       	com	r30
     f08:	08 95       	ret

00000f0a <__fixsfsi>:
     f0a:	04 d0       	rcall	.+8      	; 0xf14 <__fixunssfsi>
     f0c:	68 94       	set
     f0e:	b1 11       	cpse	r27, r1
     f10:	d9 c0       	rjmp	.+434    	; 0x10c4 <__fp_szero>
     f12:	08 95       	ret

00000f14 <__fixunssfsi>:
     f14:	bc d0       	rcall	.+376    	; 0x108e <__fp_splitA>
     f16:	88 f0       	brcs	.+34     	; 0xf3a <__fixunssfsi+0x26>
     f18:	9f 57       	subi	r25, 0x7F	; 127
     f1a:	90 f0       	brcs	.+36     	; 0xf40 <__fixunssfsi+0x2c>
     f1c:	b9 2f       	mov	r27, r25
     f1e:	99 27       	eor	r25, r25
     f20:	b7 51       	subi	r27, 0x17	; 23
     f22:	a0 f0       	brcs	.+40     	; 0xf4c <__fixunssfsi+0x38>
     f24:	d1 f0       	breq	.+52     	; 0xf5a <__fixunssfsi+0x46>
     f26:	66 0f       	add	r22, r22
     f28:	77 1f       	adc	r23, r23
     f2a:	88 1f       	adc	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	1a f0       	brmi	.+6      	; 0xf36 <__fixunssfsi+0x22>
     f30:	ba 95       	dec	r27
     f32:	c9 f7       	brne	.-14     	; 0xf26 <__fixunssfsi+0x12>
     f34:	12 c0       	rjmp	.+36     	; 0xf5a <__fixunssfsi+0x46>
     f36:	b1 30       	cpi	r27, 0x01	; 1
     f38:	81 f0       	breq	.+32     	; 0xf5a <__fixunssfsi+0x46>
     f3a:	c3 d0       	rcall	.+390    	; 0x10c2 <__fp_zero>
     f3c:	b1 e0       	ldi	r27, 0x01	; 1
     f3e:	08 95       	ret
     f40:	c0 c0       	rjmp	.+384    	; 0x10c2 <__fp_zero>
     f42:	67 2f       	mov	r22, r23
     f44:	78 2f       	mov	r23, r24
     f46:	88 27       	eor	r24, r24
     f48:	b8 5f       	subi	r27, 0xF8	; 248
     f4a:	39 f0       	breq	.+14     	; 0xf5a <__fixunssfsi+0x46>
     f4c:	b9 3f       	cpi	r27, 0xF9	; 249
     f4e:	cc f3       	brlt	.-14     	; 0xf42 <__fixunssfsi+0x2e>
     f50:	86 95       	lsr	r24
     f52:	77 95       	ror	r23
     f54:	67 95       	ror	r22
     f56:	b3 95       	inc	r27
     f58:	d9 f7       	brne	.-10     	; 0xf50 <__fixunssfsi+0x3c>
     f5a:	3e f4       	brtc	.+14     	; 0xf6a <__fixunssfsi+0x56>
     f5c:	90 95       	com	r25
     f5e:	80 95       	com	r24
     f60:	70 95       	com	r23
     f62:	61 95       	neg	r22
     f64:	7f 4f       	sbci	r23, 0xFF	; 255
     f66:	8f 4f       	sbci	r24, 0xFF	; 255
     f68:	9f 4f       	sbci	r25, 0xFF	; 255
     f6a:	08 95       	ret

00000f6c <__floatunsisf>:
     f6c:	e8 94       	clt
     f6e:	09 c0       	rjmp	.+18     	; 0xf82 <__floatsisf+0x12>

00000f70 <__floatsisf>:
     f70:	97 fb       	bst	r25, 7
     f72:	3e f4       	brtc	.+14     	; 0xf82 <__floatsisf+0x12>
     f74:	90 95       	com	r25
     f76:	80 95       	com	r24
     f78:	70 95       	com	r23
     f7a:	61 95       	neg	r22
     f7c:	7f 4f       	sbci	r23, 0xFF	; 255
     f7e:	8f 4f       	sbci	r24, 0xFF	; 255
     f80:	9f 4f       	sbci	r25, 0xFF	; 255
     f82:	99 23       	and	r25, r25
     f84:	a9 f0       	breq	.+42     	; 0xfb0 <__floatsisf+0x40>
     f86:	f9 2f       	mov	r31, r25
     f88:	96 e9       	ldi	r25, 0x96	; 150
     f8a:	bb 27       	eor	r27, r27
     f8c:	93 95       	inc	r25
     f8e:	f6 95       	lsr	r31
     f90:	87 95       	ror	r24
     f92:	77 95       	ror	r23
     f94:	67 95       	ror	r22
     f96:	b7 95       	ror	r27
     f98:	f1 11       	cpse	r31, r1
     f9a:	f8 cf       	rjmp	.-16     	; 0xf8c <__floatsisf+0x1c>
     f9c:	fa f4       	brpl	.+62     	; 0xfdc <__floatsisf+0x6c>
     f9e:	bb 0f       	add	r27, r27
     fa0:	11 f4       	brne	.+4      	; 0xfa6 <__floatsisf+0x36>
     fa2:	60 ff       	sbrs	r22, 0
     fa4:	1b c0       	rjmp	.+54     	; 0xfdc <__floatsisf+0x6c>
     fa6:	6f 5f       	subi	r22, 0xFF	; 255
     fa8:	7f 4f       	sbci	r23, 0xFF	; 255
     faa:	8f 4f       	sbci	r24, 0xFF	; 255
     fac:	9f 4f       	sbci	r25, 0xFF	; 255
     fae:	16 c0       	rjmp	.+44     	; 0xfdc <__floatsisf+0x6c>
     fb0:	88 23       	and	r24, r24
     fb2:	11 f0       	breq	.+4      	; 0xfb8 <__floatsisf+0x48>
     fb4:	96 e9       	ldi	r25, 0x96	; 150
     fb6:	11 c0       	rjmp	.+34     	; 0xfda <__floatsisf+0x6a>
     fb8:	77 23       	and	r23, r23
     fba:	21 f0       	breq	.+8      	; 0xfc4 <__floatsisf+0x54>
     fbc:	9e e8       	ldi	r25, 0x8E	; 142
     fbe:	87 2f       	mov	r24, r23
     fc0:	76 2f       	mov	r23, r22
     fc2:	05 c0       	rjmp	.+10     	; 0xfce <__floatsisf+0x5e>
     fc4:	66 23       	and	r22, r22
     fc6:	71 f0       	breq	.+28     	; 0xfe4 <__floatsisf+0x74>
     fc8:	96 e8       	ldi	r25, 0x86	; 134
     fca:	86 2f       	mov	r24, r22
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	60 e0       	ldi	r22, 0x00	; 0
     fd0:	2a f0       	brmi	.+10     	; 0xfdc <__floatsisf+0x6c>
     fd2:	9a 95       	dec	r25
     fd4:	66 0f       	add	r22, r22
     fd6:	77 1f       	adc	r23, r23
     fd8:	88 1f       	adc	r24, r24
     fda:	da f7       	brpl	.-10     	; 0xfd2 <__floatsisf+0x62>
     fdc:	88 0f       	add	r24, r24
     fde:	96 95       	lsr	r25
     fe0:	87 95       	ror	r24
     fe2:	97 f9       	bld	r25, 7
     fe4:	08 95       	ret

00000fe6 <__fp_cmp>:
     fe6:	99 0f       	add	r25, r25
     fe8:	00 08       	sbc	r0, r0
     fea:	55 0f       	add	r21, r21
     fec:	aa 0b       	sbc	r26, r26
     fee:	e0 e8       	ldi	r30, 0x80	; 128
     ff0:	fe ef       	ldi	r31, 0xFE	; 254
     ff2:	16 16       	cp	r1, r22
     ff4:	17 06       	cpc	r1, r23
     ff6:	e8 07       	cpc	r30, r24
     ff8:	f9 07       	cpc	r31, r25
     ffa:	c0 f0       	brcs	.+48     	; 0x102c <__fp_cmp+0x46>
     ffc:	12 16       	cp	r1, r18
     ffe:	13 06       	cpc	r1, r19
    1000:	e4 07       	cpc	r30, r20
    1002:	f5 07       	cpc	r31, r21
    1004:	98 f0       	brcs	.+38     	; 0x102c <__fp_cmp+0x46>
    1006:	62 1b       	sub	r22, r18
    1008:	73 0b       	sbc	r23, r19
    100a:	84 0b       	sbc	r24, r20
    100c:	95 0b       	sbc	r25, r21
    100e:	39 f4       	brne	.+14     	; 0x101e <__fp_cmp+0x38>
    1010:	0a 26       	eor	r0, r26
    1012:	61 f0       	breq	.+24     	; 0x102c <__fp_cmp+0x46>
    1014:	23 2b       	or	r18, r19
    1016:	24 2b       	or	r18, r20
    1018:	25 2b       	or	r18, r21
    101a:	21 f4       	brne	.+8      	; 0x1024 <__fp_cmp+0x3e>
    101c:	08 95       	ret
    101e:	0a 26       	eor	r0, r26
    1020:	09 f4       	brne	.+2      	; 0x1024 <__fp_cmp+0x3e>
    1022:	a1 40       	sbci	r26, 0x01	; 1
    1024:	a6 95       	lsr	r26
    1026:	8f ef       	ldi	r24, 0xFF	; 255
    1028:	81 1d       	adc	r24, r1
    102a:	81 1d       	adc	r24, r1
    102c:	08 95       	ret

0000102e <__fp_inf>:
    102e:	97 f9       	bld	r25, 7
    1030:	9f 67       	ori	r25, 0x7F	; 127
    1032:	80 e8       	ldi	r24, 0x80	; 128
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	08 95       	ret

0000103a <__fp_nan>:
    103a:	9f ef       	ldi	r25, 0xFF	; 255
    103c:	80 ec       	ldi	r24, 0xC0	; 192
    103e:	08 95       	ret

00001040 <__fp_pscA>:
    1040:	00 24       	eor	r0, r0
    1042:	0a 94       	dec	r0
    1044:	16 16       	cp	r1, r22
    1046:	17 06       	cpc	r1, r23
    1048:	18 06       	cpc	r1, r24
    104a:	09 06       	cpc	r0, r25
    104c:	08 95       	ret

0000104e <__fp_pscB>:
    104e:	00 24       	eor	r0, r0
    1050:	0a 94       	dec	r0
    1052:	12 16       	cp	r1, r18
    1054:	13 06       	cpc	r1, r19
    1056:	14 06       	cpc	r1, r20
    1058:	05 06       	cpc	r0, r21
    105a:	08 95       	ret

0000105c <__fp_round>:
    105c:	09 2e       	mov	r0, r25
    105e:	03 94       	inc	r0
    1060:	00 0c       	add	r0, r0
    1062:	11 f4       	brne	.+4      	; 0x1068 <__fp_round+0xc>
    1064:	88 23       	and	r24, r24
    1066:	52 f0       	brmi	.+20     	; 0x107c <__fp_round+0x20>
    1068:	bb 0f       	add	r27, r27
    106a:	40 f4       	brcc	.+16     	; 0x107c <__fp_round+0x20>
    106c:	bf 2b       	or	r27, r31
    106e:	11 f4       	brne	.+4      	; 0x1074 <__fp_round+0x18>
    1070:	60 ff       	sbrs	r22, 0
    1072:	04 c0       	rjmp	.+8      	; 0x107c <__fp_round+0x20>
    1074:	6f 5f       	subi	r22, 0xFF	; 255
    1076:	7f 4f       	sbci	r23, 0xFF	; 255
    1078:	8f 4f       	sbci	r24, 0xFF	; 255
    107a:	9f 4f       	sbci	r25, 0xFF	; 255
    107c:	08 95       	ret

0000107e <__fp_split3>:
    107e:	57 fd       	sbrc	r21, 7
    1080:	90 58       	subi	r25, 0x80	; 128
    1082:	44 0f       	add	r20, r20
    1084:	55 1f       	adc	r21, r21
    1086:	59 f0       	breq	.+22     	; 0x109e <__fp_splitA+0x10>
    1088:	5f 3f       	cpi	r21, 0xFF	; 255
    108a:	71 f0       	breq	.+28     	; 0x10a8 <__fp_splitA+0x1a>
    108c:	47 95       	ror	r20

0000108e <__fp_splitA>:
    108e:	88 0f       	add	r24, r24
    1090:	97 fb       	bst	r25, 7
    1092:	99 1f       	adc	r25, r25
    1094:	61 f0       	breq	.+24     	; 0x10ae <__fp_splitA+0x20>
    1096:	9f 3f       	cpi	r25, 0xFF	; 255
    1098:	79 f0       	breq	.+30     	; 0x10b8 <__fp_splitA+0x2a>
    109a:	87 95       	ror	r24
    109c:	08 95       	ret
    109e:	12 16       	cp	r1, r18
    10a0:	13 06       	cpc	r1, r19
    10a2:	14 06       	cpc	r1, r20
    10a4:	55 1f       	adc	r21, r21
    10a6:	f2 cf       	rjmp	.-28     	; 0x108c <__fp_split3+0xe>
    10a8:	46 95       	lsr	r20
    10aa:	f1 df       	rcall	.-30     	; 0x108e <__fp_splitA>
    10ac:	08 c0       	rjmp	.+16     	; 0x10be <__fp_splitA+0x30>
    10ae:	16 16       	cp	r1, r22
    10b0:	17 06       	cpc	r1, r23
    10b2:	18 06       	cpc	r1, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	f1 cf       	rjmp	.-30     	; 0x109a <__fp_splitA+0xc>
    10b8:	86 95       	lsr	r24
    10ba:	71 05       	cpc	r23, r1
    10bc:	61 05       	cpc	r22, r1
    10be:	08 94       	sec
    10c0:	08 95       	ret

000010c2 <__fp_zero>:
    10c2:	e8 94       	clt

000010c4 <__fp_szero>:
    10c4:	bb 27       	eor	r27, r27
    10c6:	66 27       	eor	r22, r22
    10c8:	77 27       	eor	r23, r23
    10ca:	cb 01       	movw	r24, r22
    10cc:	97 f9       	bld	r25, 7
    10ce:	08 95       	ret

000010d0 <__gesf2>:
    10d0:	8a df       	rcall	.-236    	; 0xfe6 <__fp_cmp>
    10d2:	08 f4       	brcc	.+2      	; 0x10d6 <__gesf2+0x6>
    10d4:	8f ef       	ldi	r24, 0xFF	; 255
    10d6:	08 95       	ret

000010d8 <__mulsf3>:
    10d8:	0b d0       	rcall	.+22     	; 0x10f0 <__mulsf3x>
    10da:	c0 cf       	rjmp	.-128    	; 0x105c <__fp_round>
    10dc:	b1 df       	rcall	.-158    	; 0x1040 <__fp_pscA>
    10de:	28 f0       	brcs	.+10     	; 0x10ea <__mulsf3+0x12>
    10e0:	b6 df       	rcall	.-148    	; 0x104e <__fp_pscB>
    10e2:	18 f0       	brcs	.+6      	; 0x10ea <__mulsf3+0x12>
    10e4:	95 23       	and	r25, r21
    10e6:	09 f0       	breq	.+2      	; 0x10ea <__mulsf3+0x12>
    10e8:	a2 cf       	rjmp	.-188    	; 0x102e <__fp_inf>
    10ea:	a7 cf       	rjmp	.-178    	; 0x103a <__fp_nan>
    10ec:	11 24       	eor	r1, r1
    10ee:	ea cf       	rjmp	.-44     	; 0x10c4 <__fp_szero>

000010f0 <__mulsf3x>:
    10f0:	c6 df       	rcall	.-116    	; 0x107e <__fp_split3>
    10f2:	a0 f3       	brcs	.-24     	; 0x10dc <__mulsf3+0x4>

000010f4 <__mulsf3_pse>:
    10f4:	95 9f       	mul	r25, r21
    10f6:	d1 f3       	breq	.-12     	; 0x10ec <__mulsf3+0x14>
    10f8:	95 0f       	add	r25, r21
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	55 1f       	adc	r21, r21
    10fe:	62 9f       	mul	r22, r18
    1100:	f0 01       	movw	r30, r0
    1102:	72 9f       	mul	r23, r18
    1104:	bb 27       	eor	r27, r27
    1106:	f0 0d       	add	r31, r0
    1108:	b1 1d       	adc	r27, r1
    110a:	63 9f       	mul	r22, r19
    110c:	aa 27       	eor	r26, r26
    110e:	f0 0d       	add	r31, r0
    1110:	b1 1d       	adc	r27, r1
    1112:	aa 1f       	adc	r26, r26
    1114:	64 9f       	mul	r22, r20
    1116:	66 27       	eor	r22, r22
    1118:	b0 0d       	add	r27, r0
    111a:	a1 1d       	adc	r26, r1
    111c:	66 1f       	adc	r22, r22
    111e:	82 9f       	mul	r24, r18
    1120:	22 27       	eor	r18, r18
    1122:	b0 0d       	add	r27, r0
    1124:	a1 1d       	adc	r26, r1
    1126:	62 1f       	adc	r22, r18
    1128:	73 9f       	mul	r23, r19
    112a:	b0 0d       	add	r27, r0
    112c:	a1 1d       	adc	r26, r1
    112e:	62 1f       	adc	r22, r18
    1130:	83 9f       	mul	r24, r19
    1132:	a0 0d       	add	r26, r0
    1134:	61 1d       	adc	r22, r1
    1136:	22 1f       	adc	r18, r18
    1138:	74 9f       	mul	r23, r20
    113a:	33 27       	eor	r19, r19
    113c:	a0 0d       	add	r26, r0
    113e:	61 1d       	adc	r22, r1
    1140:	23 1f       	adc	r18, r19
    1142:	84 9f       	mul	r24, r20
    1144:	60 0d       	add	r22, r0
    1146:	21 1d       	adc	r18, r1
    1148:	82 2f       	mov	r24, r18
    114a:	76 2f       	mov	r23, r22
    114c:	6a 2f       	mov	r22, r26
    114e:	11 24       	eor	r1, r1
    1150:	9f 57       	subi	r25, 0x7F	; 127
    1152:	50 40       	sbci	r21, 0x00	; 0
    1154:	8a f0       	brmi	.+34     	; 0x1178 <__mulsf3_pse+0x84>
    1156:	e1 f0       	breq	.+56     	; 0x1190 <__mulsf3_pse+0x9c>
    1158:	88 23       	and	r24, r24
    115a:	4a f0       	brmi	.+18     	; 0x116e <__mulsf3_pse+0x7a>
    115c:	ee 0f       	add	r30, r30
    115e:	ff 1f       	adc	r31, r31
    1160:	bb 1f       	adc	r27, r27
    1162:	66 1f       	adc	r22, r22
    1164:	77 1f       	adc	r23, r23
    1166:	88 1f       	adc	r24, r24
    1168:	91 50       	subi	r25, 0x01	; 1
    116a:	50 40       	sbci	r21, 0x00	; 0
    116c:	a9 f7       	brne	.-22     	; 0x1158 <__mulsf3_pse+0x64>
    116e:	9e 3f       	cpi	r25, 0xFE	; 254
    1170:	51 05       	cpc	r21, r1
    1172:	70 f0       	brcs	.+28     	; 0x1190 <__mulsf3_pse+0x9c>
    1174:	5c cf       	rjmp	.-328    	; 0x102e <__fp_inf>
    1176:	a6 cf       	rjmp	.-180    	; 0x10c4 <__fp_szero>
    1178:	5f 3f       	cpi	r21, 0xFF	; 255
    117a:	ec f3       	brlt	.-6      	; 0x1176 <__mulsf3_pse+0x82>
    117c:	98 3e       	cpi	r25, 0xE8	; 232
    117e:	dc f3       	brlt	.-10     	; 0x1176 <__mulsf3_pse+0x82>
    1180:	86 95       	lsr	r24
    1182:	77 95       	ror	r23
    1184:	67 95       	ror	r22
    1186:	b7 95       	ror	r27
    1188:	f7 95       	ror	r31
    118a:	e7 95       	ror	r30
    118c:	9f 5f       	subi	r25, 0xFF	; 255
    118e:	c1 f7       	brne	.-16     	; 0x1180 <__mulsf3_pse+0x8c>
    1190:	fe 2b       	or	r31, r30
    1192:	88 0f       	add	r24, r24
    1194:	91 1d       	adc	r25, r1
    1196:	96 95       	lsr	r25
    1198:	87 95       	ror	r24
    119a:	97 f9       	bld	r25, 7
    119c:	08 95       	ret
    119e:	11 f4       	brne	.+4      	; 0x11a4 <__mulsf3_pse+0xb0>
    11a0:	0e f4       	brtc	.+2      	; 0x11a4 <__mulsf3_pse+0xb0>
    11a2:	4b cf       	rjmp	.-362    	; 0x103a <__fp_nan>
    11a4:	3e c0       	rjmp	.+124    	; 0x1222 <__fp_mpack>

000011a6 <sqrt>:
    11a6:	73 df       	rcall	.-282    	; 0x108e <__fp_splitA>
    11a8:	d0 f3       	brcs	.-12     	; 0x119e <__mulsf3_pse+0xaa>
    11aa:	99 23       	and	r25, r25
    11ac:	d9 f3       	breq	.-10     	; 0x11a4 <__mulsf3_pse+0xb0>
    11ae:	ce f3       	brts	.-14     	; 0x11a2 <__mulsf3_pse+0xae>
    11b0:	9f 57       	subi	r25, 0x7F	; 127
    11b2:	55 0b       	sbc	r21, r21
    11b4:	87 ff       	sbrs	r24, 7
    11b6:	43 d0       	rcall	.+134    	; 0x123e <__fp_norm2>
    11b8:	00 24       	eor	r0, r0
    11ba:	a0 e6       	ldi	r26, 0x60	; 96
    11bc:	40 ea       	ldi	r20, 0xA0	; 160
    11be:	90 01       	movw	r18, r0
    11c0:	80 58       	subi	r24, 0x80	; 128
    11c2:	56 95       	lsr	r21
    11c4:	97 95       	ror	r25
    11c6:	28 f4       	brcc	.+10     	; 0x11d2 <sqrt+0x2c>
    11c8:	80 5c       	subi	r24, 0xC0	; 192
    11ca:	66 0f       	add	r22, r22
    11cc:	77 1f       	adc	r23, r23
    11ce:	88 1f       	adc	r24, r24
    11d0:	20 f0       	brcs	.+8      	; 0x11da <sqrt+0x34>
    11d2:	26 17       	cp	r18, r22
    11d4:	37 07       	cpc	r19, r23
    11d6:	48 07       	cpc	r20, r24
    11d8:	30 f4       	brcc	.+12     	; 0x11e6 <sqrt+0x40>
    11da:	62 1b       	sub	r22, r18
    11dc:	73 0b       	sbc	r23, r19
    11de:	84 0b       	sbc	r24, r20
    11e0:	20 29       	or	r18, r0
    11e2:	31 29       	or	r19, r1
    11e4:	4a 2b       	or	r20, r26
    11e6:	a6 95       	lsr	r26
    11e8:	17 94       	ror	r1
    11ea:	07 94       	ror	r0
    11ec:	20 25       	eor	r18, r0
    11ee:	31 25       	eor	r19, r1
    11f0:	4a 27       	eor	r20, r26
    11f2:	58 f7       	brcc	.-42     	; 0x11ca <sqrt+0x24>
    11f4:	66 0f       	add	r22, r22
    11f6:	77 1f       	adc	r23, r23
    11f8:	88 1f       	adc	r24, r24
    11fa:	20 f0       	brcs	.+8      	; 0x1204 <sqrt+0x5e>
    11fc:	26 17       	cp	r18, r22
    11fe:	37 07       	cpc	r19, r23
    1200:	48 07       	cpc	r20, r24
    1202:	30 f4       	brcc	.+12     	; 0x1210 <sqrt+0x6a>
    1204:	62 0b       	sbc	r22, r18
    1206:	73 0b       	sbc	r23, r19
    1208:	84 0b       	sbc	r24, r20
    120a:	20 0d       	add	r18, r0
    120c:	31 1d       	adc	r19, r1
    120e:	41 1d       	adc	r20, r1
    1210:	a0 95       	com	r26
    1212:	81 f7       	brne	.-32     	; 0x11f4 <sqrt+0x4e>
    1214:	b9 01       	movw	r22, r18
    1216:	84 2f       	mov	r24, r20
    1218:	91 58       	subi	r25, 0x81	; 129
    121a:	88 0f       	add	r24, r24
    121c:	96 95       	lsr	r25
    121e:	87 95       	ror	r24
    1220:	08 95       	ret

00001222 <__fp_mpack>:
    1222:	9f 3f       	cpi	r25, 0xFF	; 255
    1224:	31 f0       	breq	.+12     	; 0x1232 <__fp_mpack_finite+0xc>

00001226 <__fp_mpack_finite>:
    1226:	91 50       	subi	r25, 0x01	; 1
    1228:	20 f4       	brcc	.+8      	; 0x1232 <__fp_mpack_finite+0xc>
    122a:	87 95       	ror	r24
    122c:	77 95       	ror	r23
    122e:	67 95       	ror	r22
    1230:	b7 95       	ror	r27
    1232:	88 0f       	add	r24, r24
    1234:	91 1d       	adc	r25, r1
    1236:	96 95       	lsr	r25
    1238:	87 95       	ror	r24
    123a:	97 f9       	bld	r25, 7
    123c:	08 95       	ret

0000123e <__fp_norm2>:
    123e:	91 50       	subi	r25, 0x01	; 1
    1240:	50 40       	sbci	r21, 0x00	; 0
    1242:	66 0f       	add	r22, r22
    1244:	77 1f       	adc	r23, r23
    1246:	88 1f       	adc	r24, r24
    1248:	d2 f7       	brpl	.-12     	; 0x123e <__fp_norm2>
    124a:	08 95       	ret

0000124c <__divmodhi4>:
    124c:	97 fb       	bst	r25, 7
    124e:	07 2e       	mov	r0, r23
    1250:	16 f4       	brtc	.+4      	; 0x1256 <__divmodhi4+0xa>
    1252:	00 94       	com	r0
    1254:	06 d0       	rcall	.+12     	; 0x1262 <__divmodhi4_neg1>
    1256:	77 fd       	sbrc	r23, 7
    1258:	08 d0       	rcall	.+16     	; 0x126a <__divmodhi4_neg2>
    125a:	0b d0       	rcall	.+22     	; 0x1272 <__udivmodhi4>
    125c:	07 fc       	sbrc	r0, 7
    125e:	05 d0       	rcall	.+10     	; 0x126a <__divmodhi4_neg2>
    1260:	3e f4       	brtc	.+14     	; 0x1270 <__divmodhi4_exit>

00001262 <__divmodhi4_neg1>:
    1262:	90 95       	com	r25
    1264:	81 95       	neg	r24
    1266:	9f 4f       	sbci	r25, 0xFF	; 255
    1268:	08 95       	ret

0000126a <__divmodhi4_neg2>:
    126a:	70 95       	com	r23
    126c:	61 95       	neg	r22
    126e:	7f 4f       	sbci	r23, 0xFF	; 255

00001270 <__divmodhi4_exit>:
    1270:	08 95       	ret

00001272 <__udivmodhi4>:
    1272:	aa 1b       	sub	r26, r26
    1274:	bb 1b       	sub	r27, r27
    1276:	51 e1       	ldi	r21, 0x11	; 17
    1278:	07 c0       	rjmp	.+14     	; 0x1288 <__udivmodhi4_ep>

0000127a <__udivmodhi4_loop>:
    127a:	aa 1f       	adc	r26, r26
    127c:	bb 1f       	adc	r27, r27
    127e:	a6 17       	cp	r26, r22
    1280:	b7 07       	cpc	r27, r23
    1282:	10 f0       	brcs	.+4      	; 0x1288 <__udivmodhi4_ep>
    1284:	a6 1b       	sub	r26, r22
    1286:	b7 0b       	sbc	r27, r23

00001288 <__udivmodhi4_ep>:
    1288:	88 1f       	adc	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	5a 95       	dec	r21
    128e:	a9 f7       	brne	.-22     	; 0x127a <__udivmodhi4_loop>
    1290:	80 95       	com	r24
    1292:	90 95       	com	r25
    1294:	bc 01       	movw	r22, r24
    1296:	cd 01       	movw	r24, r26
    1298:	08 95       	ret

0000129a <__tablejump2__>:
    129a:	ee 0f       	add	r30, r30
    129c:	ff 1f       	adc	r31, r31
    129e:	05 90       	lpm	r0, Z+
    12a0:	f4 91       	lpm	r31, Z
    12a2:	e0 2d       	mov	r30, r0
    12a4:	09 94       	ijmp

000012a6 <_exit>:
    12a6:	f8 94       	cli

000012a8 <__stop_program>:
    12a8:	ff cf       	rjmp	.-2      	; 0x12a8 <__stop_program>
